#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~ Imports 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

from _ctypes_opengl import *

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~ Code generated from:
#~   "inc/OpenGL/gl.h"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# typedef GLenum
GLenum = c_ulong
# typedef GLboolean
GLboolean = c_ubyte
# typedef GLbitfield
GLbitfield = c_ulong
# typedef GLbyte
GLbyte = c_byte
# typedef GLshort
GLshort = c_short
# typedef GLint
GLint = c_long
# typedef GLsizei
GLsizei = c_long
# typedef GLubyte
GLubyte = c_ubyte
# typedef GLushort
GLushort = c_ushort
# typedef GLuint
GLuint = c_ulong
# typedef GLfloat
GLfloat = c_float
# typedef GLclampf
GLclampf = c_float
# typedef GLdouble
GLdouble = c_double
# typedef GLclampd
GLclampd = c_double
# typedef GLvoid
GLvoid = None

# typedef GLintptr
GLintptr = c_long
# typedef GLsizeiptr
GLsizeiptr = c_long

#~ line: 61, skipped: 4 ~~~~~~

# typedef GLchar
GLchar = c_char

#~ line: 69, skipped: 8 ~~~~~~

GL_LOGIC_OP = 0x0BF1 # = GL_INDEX_LOGIC_OP
GL_LOGIC_OP = 0x0BF1 # = GL_INDEX_LOGIC_OP
GL_TEXTURE_COMPONENTS = 0x1003 # = GL_TEXTURE_INTERNAL_FORMAT
GL_TEXTURE_COMPONENTS = 0x1003 # = GL_TEXTURE_INTERNAL_FORMAT

#~ line: 75, skipped: 5 ~~~~~~

GL_VERSION_1_1 = 1
GL_VERSION_1_1 = 1
GL_VERSION_1_2 = 1
GL_VERSION_1_2 = 1
GL_VERSION_1_3 = 1
GL_VERSION_1_3 = 1
GL_VERSION_1_4 = 1
GL_VERSION_1_4 = 1
GL_VERSION_1_5 = 1
GL_VERSION_1_5 = 1
GL_VERSION_2_0 = 1
GL_VERSION_2_0 = 1

GL_ACCUM = 0x0100
GL_ACCUM = 0x0100
GL_LOAD = 0x0101
GL_LOAD = 0x0101
GL_RETURN = 0x0102
GL_RETURN = 0x0102
GL_MULT = 0x0103
GL_MULT = 0x0103
GL_ADD = 0x0104
GL_ADD = 0x0104

GL_NEVER = 0x0200
GL_NEVER = 0x0200
GL_LESS = 0x0201
GL_LESS = 0x0201
GL_EQUAL = 0x0202
GL_EQUAL = 0x0202
GL_LEQUAL = 0x0203
GL_LEQUAL = 0x0203
GL_GREATER = 0x0204
GL_GREATER = 0x0204
GL_NOTEQUAL = 0x0205
GL_NOTEQUAL = 0x0205
GL_GEQUAL = 0x0206
GL_GEQUAL = 0x0206
GL_ALWAYS = 0x0207
GL_ALWAYS = 0x0207

GL_CURRENT_BIT = 0x00000001
GL_CURRENT_BIT = 0x00000001
GL_POINT_BIT = 0x00000002
GL_POINT_BIT = 0x00000002
GL_LINE_BIT = 0x00000004
GL_LINE_BIT = 0x00000004
GL_POLYGON_BIT = 0x00000008
GL_POLYGON_BIT = 0x00000008
GL_POLYGON_STIPPLE_BIT = 0x00000010
GL_POLYGON_STIPPLE_BIT = 0x00000010
GL_PIXEL_MODE_BIT = 0x00000020
GL_PIXEL_MODE_BIT = 0x00000020
GL_LIGHTING_BIT = 0x00000040
GL_LIGHTING_BIT = 0x00000040
GL_FOG_BIT = 0x00000080
GL_FOG_BIT = 0x00000080
GL_DEPTH_BUFFER_BIT = 0x00000100
GL_DEPTH_BUFFER_BIT = 0x00000100
GL_ACCUM_BUFFER_BIT = 0x00000200
GL_ACCUM_BUFFER_BIT = 0x00000200
GL_STENCIL_BUFFER_BIT = 0x00000400
GL_STENCIL_BUFFER_BIT = 0x00000400
GL_VIEWPORT_BIT = 0x00000800
GL_VIEWPORT_BIT = 0x00000800
GL_TRANSFORM_BIT = 0x00001000
GL_TRANSFORM_BIT = 0x00001000
GL_ENABLE_BIT = 0x00002000
GL_ENABLE_BIT = 0x00002000
GL_COLOR_BUFFER_BIT = 0x00004000
GL_COLOR_BUFFER_BIT = 0x00004000
GL_HINT_BIT = 0x00008000
GL_HINT_BIT = 0x00008000
GL_EVAL_BIT = 0x00010000
GL_EVAL_BIT = 0x00010000
GL_LIST_BIT = 0x00020000
GL_LIST_BIT = 0x00020000
GL_TEXTURE_BIT = 0x00040000
GL_TEXTURE_BIT = 0x00040000
GL_SCISSOR_BIT = 0x00080000
GL_SCISSOR_BIT = 0x00080000
GL_ALL_ATTRIB_BITS = 0x000fffff
GL_ALL_ATTRIB_BITS = 0x000fffff

GL_POINTS = 0x0000
GL_POINTS = 0x0000
GL_LINES = 0x0001
GL_LINES = 0x0001
GL_LINE_LOOP = 0x0002
GL_LINE_LOOP = 0x0002
GL_LINE_STRIP = 0x0003
GL_LINE_STRIP = 0x0003
GL_TRIANGLES = 0x0004
GL_TRIANGLES = 0x0004
GL_TRIANGLE_STRIP = 0x0005
GL_TRIANGLE_STRIP = 0x0005
GL_TRIANGLE_FAN = 0x0006
GL_TRIANGLE_FAN = 0x0006
GL_QUADS = 0x0007
GL_QUADS = 0x0007
GL_QUAD_STRIP = 0x0008
GL_QUAD_STRIP = 0x0008
GL_POLYGON = 0x0009
GL_POLYGON = 0x0009

#~ line: 143, skipped: 11 ~~~~~~

GL_ZERO = 0
GL_ZERO = 0
GL_ONE = 1
GL_ONE = 1
GL_SRC_COLOR = 0x0300
GL_SRC_COLOR = 0x0300
GL_ONE_MINUS_SRC_COLOR = 0x0301
GL_ONE_MINUS_SRC_COLOR = 0x0301
GL_SRC_ALPHA = 0x0302
GL_SRC_ALPHA = 0x0302
GL_ONE_MINUS_SRC_ALPHA = 0x0303
GL_ONE_MINUS_SRC_ALPHA = 0x0303
GL_DST_ALPHA = 0x0304
GL_DST_ALPHA = 0x0304
GL_ONE_MINUS_DST_ALPHA = 0x0305
GL_ONE_MINUS_DST_ALPHA = 0x0305

#~ line: 159, skipped: 9 ~~~~~~

GL_DST_COLOR = 0x0306
GL_DST_COLOR = 0x0306
GL_ONE_MINUS_DST_COLOR = 0x0307
GL_ONE_MINUS_DST_COLOR = 0x0307
GL_SRC_ALPHA_SATURATE = 0x0308
GL_SRC_ALPHA_SATURATE = 0x0308

#~ line: 172, skipped: 11 ~~~~~~

GL_TRUE = 1
GL_TRUE = 1
GL_FALSE = 0
GL_FALSE = 0

#~ line: 190, skipped: 17 ~~~~~~

GL_CLIP_PLANE0 = 0x3000
GL_CLIP_PLANE0 = 0x3000
GL_CLIP_PLANE1 = 0x3001
GL_CLIP_PLANE1 = 0x3001
GL_CLIP_PLANE2 = 0x3002
GL_CLIP_PLANE2 = 0x3002
GL_CLIP_PLANE3 = 0x3003
GL_CLIP_PLANE3 = 0x3003
GL_CLIP_PLANE4 = 0x3004
GL_CLIP_PLANE4 = 0x3004
GL_CLIP_PLANE5 = 0x3005
GL_CLIP_PLANE5 = 0x3005

#~ line: 251, skipped: 56 ~~~~~~

GL_BYTE = 0x1400
GL_BYTE = 0x1400
GL_UNSIGNED_BYTE = 0x1401
GL_UNSIGNED_BYTE = 0x1401
GL_SHORT = 0x1402
GL_SHORT = 0x1402
GL_UNSIGNED_SHORT = 0x1403
GL_UNSIGNED_SHORT = 0x1403
GL_INT = 0x1404
GL_INT = 0x1404
GL_UNSIGNED_INT = 0x1405
GL_UNSIGNED_INT = 0x1405
GL_FLOAT = 0x1406
GL_FLOAT = 0x1406
GL_2_BYTES = 0x1407
GL_2_BYTES = 0x1407
GL_3_BYTES = 0x1408
GL_3_BYTES = 0x1408
GL_4_BYTES = 0x1409
GL_4_BYTES = 0x1409
GL_DOUBLE = 0x140A
GL_DOUBLE = 0x140A

#~ line: 274, skipped: 13 ~~~~~~

GL_NONE = 0
GL_NONE = 0
GL_FRONT_LEFT = 0x0400
GL_FRONT_LEFT = 0x0400
GL_FRONT_RIGHT = 0x0401
GL_FRONT_RIGHT = 0x0401
GL_BACK_LEFT = 0x0402
GL_BACK_LEFT = 0x0402
GL_BACK_RIGHT = 0x0403
GL_BACK_RIGHT = 0x0403
GL_FRONT = 0x0404
GL_FRONT = 0x0404
GL_BACK = 0x0405
GL_BACK = 0x0405
GL_LEFT = 0x0406
GL_LEFT = 0x0406
GL_RIGHT = 0x0407
GL_RIGHT = 0x0407
GL_FRONT_AND_BACK = 0x0408
GL_FRONT_AND_BACK = 0x0408
GL_AUX0 = 0x0409
GL_AUX0 = 0x0409
GL_AUX1 = 0x040A
GL_AUX1 = 0x040A
GL_AUX2 = 0x040B
GL_AUX2 = 0x040B
GL_AUX3 = 0x040C
GL_AUX3 = 0x040C

#~ line: 368, skipped: 81 ~~~~~~

GL_NO_ERROR = 0
GL_NO_ERROR = 0
GL_INVALID_ENUM = 0x0500
GL_INVALID_ENUM = 0x0500
GL_INVALID_VALUE = 0x0501
GL_INVALID_VALUE = 0x0501
GL_INVALID_OPERATION = 0x0502
GL_INVALID_OPERATION = 0x0502
GL_STACK_OVERFLOW = 0x0503
GL_STACK_OVERFLOW = 0x0503
GL_STACK_UNDERFLOW = 0x0504
GL_STACK_UNDERFLOW = 0x0504
GL_OUT_OF_MEMORY = 0x0505
GL_OUT_OF_MEMORY = 0x0505

#~ line: 378, skipped: 4 ~~~~~~

GL_2D = 0x0600
GL_2D = 0x0600
GL_3D = 0x0601
GL_3D = 0x0601
GL_3D_COLOR = 0x0602
GL_3D_COLOR = 0x0602
GL_3D_COLOR_TEXTURE = 0x0603
GL_3D_COLOR_TEXTURE = 0x0603
GL_4D_COLOR_TEXTURE = 0x0604
GL_4D_COLOR_TEXTURE = 0x0604

GL_PASS_THROUGH_TOKEN = 0x0700
GL_PASS_THROUGH_TOKEN = 0x0700
GL_POINT_TOKEN = 0x0701
GL_POINT_TOKEN = 0x0701
GL_LINE_TOKEN = 0x0702
GL_LINE_TOKEN = 0x0702
GL_POLYGON_TOKEN = 0x0703
GL_POLYGON_TOKEN = 0x0703
GL_BITMAP_TOKEN = 0x0704
GL_BITMAP_TOKEN = 0x0704
GL_DRAW_PIXEL_TOKEN = 0x0705
GL_DRAW_PIXEL_TOKEN = 0x0705
GL_COPY_PIXEL_TOKEN = 0x0706
GL_COPY_PIXEL_TOKEN = 0x0706
GL_LINE_RESET_TOKEN = 0x0707
GL_LINE_RESET_TOKEN = 0x0707

#~ line: 396, skipped: 4 ~~~~~~

GL_EXP = 0x0800
GL_EXP = 0x0800
GL_EXP2 = 0x0801
GL_EXP2 = 0x0801

#~ line: 408, skipped: 11 ~~~~~~

GL_CW = 0x0900
GL_CW = 0x0900
GL_CCW = 0x0901
GL_CCW = 0x0901

#~ line: 445, skipped: 36 ~~~~~~

GL_COEFF = 0x0A00
GL_COEFF = 0x0A00
GL_ORDER = 0x0A01
GL_ORDER = 0x0A01
GL_DOMAIN = 0x0A02
GL_DOMAIN = 0x0A02

#~ line: 474, skipped: 27 ~~~~~~

GL_CURRENT_COLOR = 0x0B00
GL_CURRENT_COLOR = 0x0B00
GL_CURRENT_INDEX = 0x0B01
GL_CURRENT_INDEX = 0x0B01
GL_CURRENT_NORMAL = 0x0B02
GL_CURRENT_NORMAL = 0x0B02
GL_CURRENT_TEXTURE_COORDS = 0x0B03
GL_CURRENT_TEXTURE_COORDS = 0x0B03
GL_CURRENT_RASTER_COLOR = 0x0B04
GL_CURRENT_RASTER_COLOR = 0x0B04
GL_CURRENT_RASTER_INDEX = 0x0B05
GL_CURRENT_RASTER_INDEX = 0x0B05
GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06
GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06
GL_CURRENT_RASTER_POSITION = 0x0B07
GL_CURRENT_RASTER_POSITION = 0x0B07
GL_CURRENT_RASTER_POSITION_VALID = 0x0B08
GL_CURRENT_RASTER_POSITION_VALID = 0x0B08
GL_CURRENT_RASTER_DISTANCE = 0x0B09
GL_CURRENT_RASTER_DISTANCE = 0x0B09
GL_POINT_SMOOTH = 0x0B10
GL_POINT_SMOOTH = 0x0B10
GL_POINT_SIZE = 0x0B11
GL_POINT_SIZE = 0x0B11
GL_POINT_SIZE_RANGE = 0x0B12
GL_POINT_SIZE_RANGE = 0x0B12
GL_POINT_SIZE_GRANULARITY = 0x0B13
GL_POINT_SIZE_GRANULARITY = 0x0B13
GL_LINE_SMOOTH = 0x0B20
GL_LINE_SMOOTH = 0x0B20
GL_LINE_WIDTH = 0x0B21
GL_LINE_WIDTH = 0x0B21
GL_LINE_WIDTH_RANGE = 0x0B22
GL_LINE_WIDTH_RANGE = 0x0B22
GL_LINE_WIDTH_GRANULARITY = 0x0B23
GL_LINE_WIDTH_GRANULARITY = 0x0B23
GL_LINE_STIPPLE = 0x0B24
GL_LINE_STIPPLE = 0x0B24
GL_LINE_STIPPLE_PATTERN = 0x0B25
GL_LINE_STIPPLE_PATTERN = 0x0B25
GL_LINE_STIPPLE_REPEAT = 0x0B26
GL_LINE_STIPPLE_REPEAT = 0x0B26

#~ line: 501, skipped: 7 ~~~~~~

GL_LIST_MODE = 0x0B30
GL_LIST_MODE = 0x0B30
GL_MAX_LIST_NESTING = 0x0B31
GL_MAX_LIST_NESTING = 0x0B31
GL_LIST_BASE = 0x0B32
GL_LIST_BASE = 0x0B32
GL_LIST_INDEX = 0x0B33
GL_LIST_INDEX = 0x0B33
GL_POLYGON_MODE = 0x0B40
GL_POLYGON_MODE = 0x0B40
GL_POLYGON_SMOOTH = 0x0B41
GL_POLYGON_SMOOTH = 0x0B41
GL_POLYGON_STIPPLE = 0x0B42
GL_POLYGON_STIPPLE = 0x0B42
GL_EDGE_FLAG = 0x0B43
GL_EDGE_FLAG = 0x0B43
GL_CULL_FACE = 0x0B44
GL_CULL_FACE = 0x0B44
GL_CULL_FACE_MODE = 0x0B45
GL_CULL_FACE_MODE = 0x0B45
GL_FRONT_FACE = 0x0B46
GL_FRONT_FACE = 0x0B46
GL_LIGHTING = 0x0B50
GL_LIGHTING = 0x0B50
GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51
GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51
GL_LIGHT_MODEL_TWO_SIDE = 0x0B52
GL_LIGHT_MODEL_TWO_SIDE = 0x0B52
GL_LIGHT_MODEL_AMBIENT = 0x0B53
GL_LIGHT_MODEL_AMBIENT = 0x0B53
GL_SHADE_MODEL = 0x0B54
GL_SHADE_MODEL = 0x0B54
GL_COLOR_MATERIAL_FACE = 0x0B55
GL_COLOR_MATERIAL_FACE = 0x0B55
GL_COLOR_MATERIAL_PARAMETER = 0x0B56
GL_COLOR_MATERIAL_PARAMETER = 0x0B56
GL_COLOR_MATERIAL = 0x0B57
GL_COLOR_MATERIAL = 0x0B57
GL_FOG = 0x0B60
GL_FOG = 0x0B60
GL_FOG_INDEX = 0x0B61
GL_FOG_INDEX = 0x0B61
GL_FOG_DENSITY = 0x0B62
GL_FOG_DENSITY = 0x0B62
GL_FOG_START = 0x0B63
GL_FOG_START = 0x0B63
GL_FOG_END = 0x0B64
GL_FOG_END = 0x0B64
GL_FOG_MODE = 0x0B65
GL_FOG_MODE = 0x0B65
GL_FOG_COLOR = 0x0B66
GL_FOG_COLOR = 0x0B66
GL_DEPTH_RANGE = 0x0B70
GL_DEPTH_RANGE = 0x0B70
GL_DEPTH_TEST = 0x0B71
GL_DEPTH_TEST = 0x0B71
GL_DEPTH_WRITEMASK = 0x0B72
GL_DEPTH_WRITEMASK = 0x0B72
GL_DEPTH_CLEAR_VALUE = 0x0B73
GL_DEPTH_CLEAR_VALUE = 0x0B73
GL_DEPTH_FUNC = 0x0B74
GL_DEPTH_FUNC = 0x0B74
GL_ACCUM_CLEAR_VALUE = 0x0B80
GL_ACCUM_CLEAR_VALUE = 0x0B80
GL_STENCIL_TEST = 0x0B90
GL_STENCIL_TEST = 0x0B90
GL_STENCIL_CLEAR_VALUE = 0x0B91
GL_STENCIL_CLEAR_VALUE = 0x0B91
GL_STENCIL_FUNC = 0x0B92
GL_STENCIL_FUNC = 0x0B92
GL_STENCIL_VALUE_MASK = 0x0B93
GL_STENCIL_VALUE_MASK = 0x0B93
GL_STENCIL_FAIL = 0x0B94
GL_STENCIL_FAIL = 0x0B94
GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95
GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95
GL_STENCIL_PASS_DEPTH_PASS = 0x0B96
GL_STENCIL_PASS_DEPTH_PASS = 0x0B96
GL_STENCIL_REF = 0x0B97
GL_STENCIL_REF = 0x0B97
GL_STENCIL_WRITEMASK = 0x0B98
GL_STENCIL_WRITEMASK = 0x0B98
GL_MATRIX_MODE = 0x0BA0
GL_MATRIX_MODE = 0x0BA0
GL_NORMALIZE = 0x0BA1
GL_NORMALIZE = 0x0BA1
GL_VIEWPORT = 0x0BA2
GL_VIEWPORT = 0x0BA2
GL_MODELVIEW_STACK_DEPTH = 0x0BA3
GL_MODELVIEW_STACK_DEPTH = 0x0BA3
GL_PROJECTION_STACK_DEPTH = 0x0BA4
GL_PROJECTION_STACK_DEPTH = 0x0BA4
GL_TEXTURE_STACK_DEPTH = 0x0BA5
GL_TEXTURE_STACK_DEPTH = 0x0BA5
GL_MODELVIEW_MATRIX = 0x0BA6
GL_MODELVIEW_MATRIX = 0x0BA6
GL_PROJECTION_MATRIX = 0x0BA7
GL_PROJECTION_MATRIX = 0x0BA7
GL_TEXTURE_MATRIX = 0x0BA8
GL_TEXTURE_MATRIX = 0x0BA8
GL_ATTRIB_STACK_DEPTH = 0x0BB0
GL_ATTRIB_STACK_DEPTH = 0x0BB0
GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1
GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1
GL_ALPHA_TEST = 0x0BC0
GL_ALPHA_TEST = 0x0BC0
GL_ALPHA_TEST_FUNC = 0x0BC1
GL_ALPHA_TEST_FUNC = 0x0BC1
GL_ALPHA_TEST_REF = 0x0BC2
GL_ALPHA_TEST_REF = 0x0BC2
GL_DITHER = 0x0BD0
GL_DITHER = 0x0BD0
GL_BLEND_DST = 0x0BE0
GL_BLEND_DST = 0x0BE0
GL_BLEND_SRC = 0x0BE1
GL_BLEND_SRC = 0x0BE1
GL_BLEND = 0x0BE2
GL_BLEND = 0x0BE2
GL_LOGIC_OP_MODE = 0x0BF0
GL_LOGIC_OP_MODE = 0x0BF0
GL_INDEX_LOGIC_OP = 0x0BF1
GL_INDEX_LOGIC_OP = 0x0BF1
GL_COLOR_LOGIC_OP = 0x0BF2
GL_COLOR_LOGIC_OP = 0x0BF2
GL_AUX_BUFFERS = 0x0C00
GL_AUX_BUFFERS = 0x0C00
GL_DRAW_BUFFER = 0x0C01
GL_DRAW_BUFFER = 0x0C01
GL_READ_BUFFER = 0x0C02
GL_READ_BUFFER = 0x0C02
GL_SCISSOR_BOX = 0x0C10
GL_SCISSOR_BOX = 0x0C10
GL_SCISSOR_TEST = 0x0C11
GL_SCISSOR_TEST = 0x0C11
GL_INDEX_CLEAR_VALUE = 0x0C20
GL_INDEX_CLEAR_VALUE = 0x0C20
GL_INDEX_WRITEMASK = 0x0C21
GL_INDEX_WRITEMASK = 0x0C21
GL_COLOR_CLEAR_VALUE = 0x0C22
GL_COLOR_CLEAR_VALUE = 0x0C22
GL_COLOR_WRITEMASK = 0x0C23
GL_COLOR_WRITEMASK = 0x0C23
GL_INDEX_MODE = 0x0C30
GL_INDEX_MODE = 0x0C30
GL_RGBA_MODE = 0x0C31
GL_RGBA_MODE = 0x0C31
GL_DOUBLEBUFFER = 0x0C32
GL_DOUBLEBUFFER = 0x0C32
GL_STEREO = 0x0C33
GL_STEREO = 0x0C33
GL_RENDER_MODE = 0x0C40
GL_RENDER_MODE = 0x0C40
GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50
GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50
GL_POINT_SMOOTH_HINT = 0x0C51
GL_POINT_SMOOTH_HINT = 0x0C51
GL_LINE_SMOOTH_HINT = 0x0C52
GL_LINE_SMOOTH_HINT = 0x0C52
GL_POLYGON_SMOOTH_HINT = 0x0C53
GL_POLYGON_SMOOTH_HINT = 0x0C53
GL_FOG_HINT = 0x0C54
GL_FOG_HINT = 0x0C54
GL_TEXTURE_GEN_S = 0x0C60
GL_TEXTURE_GEN_S = 0x0C60
GL_TEXTURE_GEN_T = 0x0C61
GL_TEXTURE_GEN_T = 0x0C61
GL_TEXTURE_GEN_R = 0x0C62
GL_TEXTURE_GEN_R = 0x0C62
GL_TEXTURE_GEN_Q = 0x0C63
GL_TEXTURE_GEN_Q = 0x0C63
GL_PIXEL_MAP_I_TO_I = 0x0C70
GL_PIXEL_MAP_I_TO_I = 0x0C70
GL_PIXEL_MAP_S_TO_S = 0x0C71
GL_PIXEL_MAP_S_TO_S = 0x0C71
GL_PIXEL_MAP_I_TO_R = 0x0C72
GL_PIXEL_MAP_I_TO_R = 0x0C72
GL_PIXEL_MAP_I_TO_G = 0x0C73
GL_PIXEL_MAP_I_TO_G = 0x0C73
GL_PIXEL_MAP_I_TO_B = 0x0C74
GL_PIXEL_MAP_I_TO_B = 0x0C74
GL_PIXEL_MAP_I_TO_A = 0x0C75
GL_PIXEL_MAP_I_TO_A = 0x0C75
GL_PIXEL_MAP_R_TO_R = 0x0C76
GL_PIXEL_MAP_R_TO_R = 0x0C76
GL_PIXEL_MAP_G_TO_G = 0x0C77
GL_PIXEL_MAP_G_TO_G = 0x0C77
GL_PIXEL_MAP_B_TO_B = 0x0C78
GL_PIXEL_MAP_B_TO_B = 0x0C78
GL_PIXEL_MAP_A_TO_A = 0x0C79
GL_PIXEL_MAP_A_TO_A = 0x0C79
GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0
GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0
GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1
GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1
GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2
GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2
GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3
GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3
GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4
GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4
GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5
GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5
GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6
GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6
GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7
GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7
GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8
GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8
GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9
GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9
GL_UNPACK_SWAP_BYTES = 0x0CF0
GL_UNPACK_SWAP_BYTES = 0x0CF0
GL_UNPACK_LSB_FIRST = 0x0CF1
GL_UNPACK_LSB_FIRST = 0x0CF1
GL_UNPACK_ROW_LENGTH = 0x0CF2
GL_UNPACK_ROW_LENGTH = 0x0CF2
GL_UNPACK_SKIP_ROWS = 0x0CF3
GL_UNPACK_SKIP_ROWS = 0x0CF3
GL_UNPACK_SKIP_PIXELS = 0x0CF4
GL_UNPACK_SKIP_PIXELS = 0x0CF4
GL_UNPACK_ALIGNMENT = 0x0CF5
GL_UNPACK_ALIGNMENT = 0x0CF5
GL_PACK_SWAP_BYTES = 0x0D00
GL_PACK_SWAP_BYTES = 0x0D00
GL_PACK_LSB_FIRST = 0x0D01
GL_PACK_LSB_FIRST = 0x0D01
GL_PACK_ROW_LENGTH = 0x0D02
GL_PACK_ROW_LENGTH = 0x0D02
GL_PACK_SKIP_ROWS = 0x0D03
GL_PACK_SKIP_ROWS = 0x0D03
GL_PACK_SKIP_PIXELS = 0x0D04
GL_PACK_SKIP_PIXELS = 0x0D04
GL_PACK_ALIGNMENT = 0x0D05
GL_PACK_ALIGNMENT = 0x0D05
GL_MAP_COLOR = 0x0D10
GL_MAP_COLOR = 0x0D10
GL_MAP_STENCIL = 0x0D11
GL_MAP_STENCIL = 0x0D11
GL_INDEX_SHIFT = 0x0D12
GL_INDEX_SHIFT = 0x0D12
GL_INDEX_OFFSET = 0x0D13
GL_INDEX_OFFSET = 0x0D13
GL_RED_SCALE = 0x0D14
GL_RED_SCALE = 0x0D14
GL_RED_BIAS = 0x0D15
GL_RED_BIAS = 0x0D15
GL_ZOOM_X = 0x0D16
GL_ZOOM_X = 0x0D16
GL_ZOOM_Y = 0x0D17
GL_ZOOM_Y = 0x0D17
GL_GREEN_SCALE = 0x0D18
GL_GREEN_SCALE = 0x0D18
GL_GREEN_BIAS = 0x0D19
GL_GREEN_BIAS = 0x0D19
GL_BLUE_SCALE = 0x0D1A
GL_BLUE_SCALE = 0x0D1A
GL_BLUE_BIAS = 0x0D1B
GL_BLUE_BIAS = 0x0D1B
GL_ALPHA_SCALE = 0x0D1C
GL_ALPHA_SCALE = 0x0D1C
GL_ALPHA_BIAS = 0x0D1D
GL_ALPHA_BIAS = 0x0D1D
GL_DEPTH_SCALE = 0x0D1E
GL_DEPTH_SCALE = 0x0D1E
GL_DEPTH_BIAS = 0x0D1F
GL_DEPTH_BIAS = 0x0D1F
GL_MAX_EVAL_ORDER = 0x0D30
GL_MAX_EVAL_ORDER = 0x0D30
GL_MAX_LIGHTS = 0x0D31
GL_MAX_LIGHTS = 0x0D31
GL_MAX_CLIP_PLANES = 0x0D32
GL_MAX_CLIP_PLANES = 0x0D32
GL_MAX_TEXTURE_SIZE = 0x0D33
GL_MAX_TEXTURE_SIZE = 0x0D33
GL_MAX_PIXEL_MAP_TABLE = 0x0D34
GL_MAX_PIXEL_MAP_TABLE = 0x0D34
GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35
GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35
GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36
GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36
GL_MAX_NAME_STACK_DEPTH = 0x0D37
GL_MAX_NAME_STACK_DEPTH = 0x0D37
GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38
GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38
GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39
GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39
GL_MAX_VIEWPORT_DIMS = 0x0D3A
GL_MAX_VIEWPORT_DIMS = 0x0D3A
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B
GL_SUBPIXEL_BITS = 0x0D50
GL_SUBPIXEL_BITS = 0x0D50
GL_INDEX_BITS = 0x0D51
GL_INDEX_BITS = 0x0D51
GL_RED_BITS = 0x0D52
GL_RED_BITS = 0x0D52
GL_GREEN_BITS = 0x0D53
GL_GREEN_BITS = 0x0D53
GL_BLUE_BITS = 0x0D54
GL_BLUE_BITS = 0x0D54
GL_ALPHA_BITS = 0x0D55
GL_ALPHA_BITS = 0x0D55
GL_DEPTH_BITS = 0x0D56
GL_DEPTH_BITS = 0x0D56
GL_STENCIL_BITS = 0x0D57
GL_STENCIL_BITS = 0x0D57
GL_ACCUM_RED_BITS = 0x0D58
GL_ACCUM_RED_BITS = 0x0D58
GL_ACCUM_GREEN_BITS = 0x0D59
GL_ACCUM_GREEN_BITS = 0x0D59
GL_ACCUM_BLUE_BITS = 0x0D5A
GL_ACCUM_BLUE_BITS = 0x0D5A
GL_ACCUM_ALPHA_BITS = 0x0D5B
GL_ACCUM_ALPHA_BITS = 0x0D5B
GL_NAME_STACK_DEPTH = 0x0D70
GL_NAME_STACK_DEPTH = 0x0D70
GL_AUTO_NORMAL = 0x0D80
GL_AUTO_NORMAL = 0x0D80
GL_MAP1_COLOR_4 = 0x0D90
GL_MAP1_COLOR_4 = 0x0D90
GL_MAP1_INDEX = 0x0D91
GL_MAP1_INDEX = 0x0D91
GL_MAP1_NORMAL = 0x0D92
GL_MAP1_NORMAL = 0x0D92
GL_MAP1_TEXTURE_COORD_1 = 0x0D93
GL_MAP1_TEXTURE_COORD_1 = 0x0D93
GL_MAP1_TEXTURE_COORD_2 = 0x0D94
GL_MAP1_TEXTURE_COORD_2 = 0x0D94
GL_MAP1_TEXTURE_COORD_3 = 0x0D95
GL_MAP1_TEXTURE_COORD_3 = 0x0D95
GL_MAP1_TEXTURE_COORD_4 = 0x0D96
GL_MAP1_TEXTURE_COORD_4 = 0x0D96
GL_MAP1_VERTEX_3 = 0x0D97
GL_MAP1_VERTEX_3 = 0x0D97
GL_MAP1_VERTEX_4 = 0x0D98
GL_MAP1_VERTEX_4 = 0x0D98
GL_MAP2_COLOR_4 = 0x0DB0
GL_MAP2_COLOR_4 = 0x0DB0
GL_MAP2_INDEX = 0x0DB1
GL_MAP2_INDEX = 0x0DB1
GL_MAP2_NORMAL = 0x0DB2
GL_MAP2_NORMAL = 0x0DB2
GL_MAP2_TEXTURE_COORD_1 = 0x0DB3
GL_MAP2_TEXTURE_COORD_1 = 0x0DB3
GL_MAP2_TEXTURE_COORD_2 = 0x0DB4
GL_MAP2_TEXTURE_COORD_2 = 0x0DB4
GL_MAP2_TEXTURE_COORD_3 = 0x0DB5
GL_MAP2_TEXTURE_COORD_3 = 0x0DB5
GL_MAP2_TEXTURE_COORD_4 = 0x0DB6
GL_MAP2_TEXTURE_COORD_4 = 0x0DB6
GL_MAP2_VERTEX_3 = 0x0DB7
GL_MAP2_VERTEX_3 = 0x0DB7
GL_MAP2_VERTEX_4 = 0x0DB8
GL_MAP2_VERTEX_4 = 0x0DB8
GL_MAP1_GRID_DOMAIN = 0x0DD0
GL_MAP1_GRID_DOMAIN = 0x0DD0
GL_MAP1_GRID_SEGMENTS = 0x0DD1
GL_MAP1_GRID_SEGMENTS = 0x0DD1
GL_MAP2_GRID_DOMAIN = 0x0DD2
GL_MAP2_GRID_DOMAIN = 0x0DD2
GL_MAP2_GRID_SEGMENTS = 0x0DD3
GL_MAP2_GRID_SEGMENTS = 0x0DD3
GL_TEXTURE_1D = 0x0DE0
GL_TEXTURE_1D = 0x0DE0
GL_TEXTURE_2D = 0x0DE1
GL_TEXTURE_2D = 0x0DE1
GL_FEEDBACK_BUFFER_POINTER = 0x0DF0
GL_FEEDBACK_BUFFER_POINTER = 0x0DF0
GL_FEEDBACK_BUFFER_SIZE = 0x0DF1
GL_FEEDBACK_BUFFER_SIZE = 0x0DF1
GL_FEEDBACK_BUFFER_TYPE = 0x0DF2
GL_FEEDBACK_BUFFER_TYPE = 0x0DF2
GL_SELECTION_BUFFER_POINTER = 0x0DF3
GL_SELECTION_BUFFER_POINTER = 0x0DF3
GL_SELECTION_BUFFER_SIZE = 0x0DF4
GL_SELECTION_BUFFER_SIZE = 0x0DF4

#~ line: 759, skipped: 71 ~~~~~~

GL_TEXTURE_WIDTH = 0x1000
GL_TEXTURE_WIDTH = 0x1000
GL_TEXTURE_HEIGHT = 0x1001
GL_TEXTURE_HEIGHT = 0x1001
GL_TEXTURE_INTERNAL_FORMAT = 0x1003
GL_TEXTURE_INTERNAL_FORMAT = 0x1003
GL_TEXTURE_BORDER_COLOR = 0x1004
GL_TEXTURE_BORDER_COLOR = 0x1004
GL_TEXTURE_BORDER = 0x1005
GL_TEXTURE_BORDER = 0x1005

#~ line: 780, skipped: 17 ~~~~~~

GL_DONT_CARE = 0x1100
GL_DONT_CARE = 0x1100
GL_FASTEST = 0x1101
GL_FASTEST = 0x1101
GL_NICEST = 0x1102
GL_NICEST = 0x1102

#~ line: 812, skipped: 30 ~~~~~~

GL_LIGHT0 = 0x4000
GL_LIGHT0 = 0x4000
GL_LIGHT1 = 0x4001
GL_LIGHT1 = 0x4001
GL_LIGHT2 = 0x4002
GL_LIGHT2 = 0x4002
GL_LIGHT3 = 0x4003
GL_LIGHT3 = 0x4003
GL_LIGHT4 = 0x4004
GL_LIGHT4 = 0x4004
GL_LIGHT5 = 0x4005
GL_LIGHT5 = 0x4005
GL_LIGHT6 = 0x4006
GL_LIGHT6 = 0x4006
GL_LIGHT7 = 0x4007
GL_LIGHT7 = 0x4007

GL_AMBIENT = 0x1200
GL_AMBIENT = 0x1200
GL_DIFFUSE = 0x1201
GL_DIFFUSE = 0x1201
GL_SPECULAR = 0x1202
GL_SPECULAR = 0x1202
GL_POSITION = 0x1203
GL_POSITION = 0x1203
GL_SPOT_DIRECTION = 0x1204
GL_SPOT_DIRECTION = 0x1204
GL_SPOT_EXPONENT = 0x1205
GL_SPOT_EXPONENT = 0x1205
GL_SPOT_CUTOFF = 0x1206
GL_SPOT_CUTOFF = 0x1206
GL_CONSTANT_ATTENUATION = 0x1207
GL_CONSTANT_ATTENUATION = 0x1207
GL_LINEAR_ATTENUATION = 0x1208
GL_LINEAR_ATTENUATION = 0x1208
GL_QUADRATIC_ATTENUATION = 0x1209
GL_QUADRATIC_ATTENUATION = 0x1209

#~ line: 850, skipped: 19 ~~~~~~

GL_COMPILE = 0x1300
GL_COMPILE = 0x1300
GL_COMPILE_AND_EXECUTE = 0x1301
GL_COMPILE_AND_EXECUTE = 0x1301

#~ line: 866, skipped: 15 ~~~~~~

GL_CLEAR = 0x1500
GL_CLEAR = 0x1500
GL_AND = 0x1501
GL_AND = 0x1501
GL_AND_REVERSE = 0x1502
GL_AND_REVERSE = 0x1502
GL_COPY = 0x1503
GL_COPY = 0x1503
GL_AND_INVERTED = 0x1504
GL_AND_INVERTED = 0x1504
GL_NOOP = 0x1505
GL_NOOP = 0x1505
GL_XOR = 0x1506
GL_XOR = 0x1506
GL_OR = 0x1507
GL_OR = 0x1507
GL_NOR = 0x1508
GL_NOR = 0x1508
GL_EQUIV = 0x1509
GL_EQUIV = 0x1509
GL_INVERT = 0x150A
GL_INVERT = 0x150A
GL_OR_REVERSE = 0x150B
GL_OR_REVERSE = 0x150B
GL_COPY_INVERTED = 0x150C
GL_COPY_INVERTED = 0x150C
GL_OR_INVERTED = 0x150D
GL_OR_INVERTED = 0x150D
GL_NAND = 0x150E
GL_NAND = 0x150E
GL_SET = 0x150F
GL_SET = 0x150F

#~ line: 909, skipped: 28 ~~~~~~

GL_EMISSION = 0x1600
GL_EMISSION = 0x1600
GL_SHININESS = 0x1601
GL_SHININESS = 0x1601
GL_AMBIENT_AND_DIFFUSE = 0x1602
GL_AMBIENT_AND_DIFFUSE = 0x1602
GL_COLOR_INDEXES = 0x1603
GL_COLOR_INDEXES = 0x1603

#~ line: 918, skipped: 6 ~~~~~~

GL_MODELVIEW = 0x1700
GL_MODELVIEW = 0x1700
GL_PROJECTION = 0x1701
GL_PROJECTION = 0x1701
GL_TEXTURE = 0x1702
GL_TEXTURE = 0x1702

#~ line: 942, skipped: 22 ~~~~~~

GL_COLOR = 0x1800
GL_COLOR = 0x1800
GL_DEPTH = 0x1801
GL_DEPTH = 0x1801
GL_STENCIL = 0x1802
GL_STENCIL = 0x1802

GL_COLOR_INDEX = 0x1900
GL_COLOR_INDEX = 0x1900
GL_STENCIL_INDEX = 0x1901
GL_STENCIL_INDEX = 0x1901
GL_DEPTH_COMPONENT = 0x1902
GL_DEPTH_COMPONENT = 0x1902
GL_RED = 0x1903
GL_RED = 0x1903
GL_GREEN = 0x1904
GL_GREEN = 0x1904
GL_BLUE = 0x1905
GL_BLUE = 0x1905
GL_ALPHA = 0x1906
GL_ALPHA = 0x1906
GL_RGB = 0x1907
GL_RGB = 0x1907
GL_RGBA = 0x1908
GL_RGBA = 0x1908
GL_LUMINANCE = 0x1909
GL_LUMINANCE = 0x1909
GL_LUMINANCE_ALPHA = 0x190A
GL_LUMINANCE_ALPHA = 0x190A

#~ line: 1058, skipped: 101 ~~~~~~

GL_BITMAP = 0x1A00
GL_BITMAP = 0x1A00

#~ line: 1082, skipped: 24 ~~~~~~

GL_POINT = 0x1B00
GL_POINT = 0x1B00
GL_LINE = 0x1B01
GL_LINE = 0x1B01
GL_FILL = 0x1B02
GL_FILL = 0x1B02

#~ line: 1101, skipped: 17 ~~~~~~

GL_RENDER = 0x1C00
GL_RENDER = 0x1C00
GL_FEEDBACK = 0x1C01
GL_FEEDBACK = 0x1C01
GL_SELECT = 0x1C02
GL_SELECT = 0x1C02

#~ line: 1109, skipped: 6 ~~~~~~

GL_FLAT = 0x1D00
GL_FLAT = 0x1D00
GL_SMOOTH = 0x1D01
GL_SMOOTH = 0x1D01

#~ line: 1124, skipped: 14 ~~~~~~

GL_KEEP = 0x1E00
GL_KEEP = 0x1E00
GL_REPLACE = 0x1E01
GL_REPLACE = 0x1E01
GL_INCR = 0x1E02
GL_INCR = 0x1E02
GL_DECR = 0x1E03
GL_DECR = 0x1E03

#~ line: 1131, skipped: 4 ~~~~~~

GL_VENDOR = 0x1F00
GL_VENDOR = 0x1F00
GL_RENDERER = 0x1F01
GL_RENDERER = 0x1F01
GL_VERSION = 0x1F02
GL_VERSION = 0x1F02
GL_EXTENSIONS = 0x1F03
GL_EXTENSIONS = 0x1F03

GL_S = 0x2000
GL_S = 0x2000
GL_T = 0x2001
GL_T = 0x2001
GL_R = 0x2002
GL_R = 0x2002
GL_Q = 0x2003
GL_Q = 0x2003

#~ line: 1149, skipped: 9 ~~~~~~

GL_MODULATE = 0x2100
GL_MODULATE = 0x2100
GL_DECAL = 0x2101
GL_DECAL = 0x2101

#~ line: 1155, skipped: 5 ~~~~~~

GL_TEXTURE_ENV_MODE = 0x2200
GL_TEXTURE_ENV_MODE = 0x2200
GL_TEXTURE_ENV_COLOR = 0x2201
GL_TEXTURE_ENV_COLOR = 0x2201

GL_TEXTURE_ENV = 0x2300
GL_TEXTURE_ENV = 0x2300

GL_EYE_LINEAR = 0x2400
GL_EYE_LINEAR = 0x2400
GL_OBJECT_LINEAR = 0x2401
GL_OBJECT_LINEAR = 0x2401
GL_SPHERE_MAP = 0x2402
GL_SPHERE_MAP = 0x2402

GL_TEXTURE_GEN_MODE = 0x2500
GL_TEXTURE_GEN_MODE = 0x2500
GL_OBJECT_PLANE = 0x2501
GL_OBJECT_PLANE = 0x2501
GL_EYE_PLANE = 0x2502
GL_EYE_PLANE = 0x2502

GL_NEAREST = 0x2600
GL_NEAREST = 0x2600
GL_LINEAR = 0x2601
GL_LINEAR = 0x2601

#~ line: 1178, skipped: 5 ~~~~~~

GL_NEAREST_MIPMAP_NEAREST = 0x2700
GL_NEAREST_MIPMAP_NEAREST = 0x2700
GL_LINEAR_MIPMAP_NEAREST = 0x2701
GL_LINEAR_MIPMAP_NEAREST = 0x2701
GL_NEAREST_MIPMAP_LINEAR = 0x2702
GL_NEAREST_MIPMAP_LINEAR = 0x2702
GL_LINEAR_MIPMAP_LINEAR = 0x2703
GL_LINEAR_MIPMAP_LINEAR = 0x2703

GL_TEXTURE_MAG_FILTER = 0x2800
GL_TEXTURE_MAG_FILTER = 0x2800
GL_TEXTURE_MIN_FILTER = 0x2801
GL_TEXTURE_MIN_FILTER = 0x2801
GL_TEXTURE_WRAP_S = 0x2802
GL_TEXTURE_WRAP_S = 0x2802
GL_TEXTURE_WRAP_T = 0x2803
GL_TEXTURE_WRAP_T = 0x2803

#~ line: 1205, skipped: 18 ~~~~~~

GL_CLAMP = 0x2900
GL_CLAMP = 0x2900
GL_REPEAT = 0x2901
GL_REPEAT = 0x2901

#~ line: 1216, skipped: 10 ~~~~~~

GL_CLIENT_PIXEL_STORE_BIT = 0x00000001
GL_CLIENT_PIXEL_STORE_BIT = 0x00000001
GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002
GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002
GL_CLIENT_ALL_ATTRIB_BITS = 0xffffffff
GL_CLIENT_ALL_ATTRIB_BITS = 0xffffffff

GL_POLYGON_OFFSET_FACTOR = 0x8038
GL_POLYGON_OFFSET_FACTOR = 0x8038
GL_POLYGON_OFFSET_UNITS = 0x2A00
GL_POLYGON_OFFSET_UNITS = 0x2A00
GL_POLYGON_OFFSET_POINT = 0x2A01
GL_POLYGON_OFFSET_POINT = 0x2A01
GL_POLYGON_OFFSET_LINE = 0x2A02
GL_POLYGON_OFFSET_LINE = 0x2A02
GL_POLYGON_OFFSET_FILL = 0x8037
GL_POLYGON_OFFSET_FILL = 0x8037

GL_ALPHA4 = 0x803B
GL_ALPHA4 = 0x803B
GL_ALPHA8 = 0x803C
GL_ALPHA8 = 0x803C
GL_ALPHA12 = 0x803D
GL_ALPHA12 = 0x803D
GL_ALPHA16 = 0x803E
GL_ALPHA16 = 0x803E
GL_LUMINANCE4 = 0x803F
GL_LUMINANCE4 = 0x803F
GL_LUMINANCE8 = 0x8040
GL_LUMINANCE8 = 0x8040
GL_LUMINANCE12 = 0x8041
GL_LUMINANCE12 = 0x8041
GL_LUMINANCE16 = 0x8042
GL_LUMINANCE16 = 0x8042
GL_LUMINANCE4_ALPHA4 = 0x8043
GL_LUMINANCE4_ALPHA4 = 0x8043
GL_LUMINANCE6_ALPHA2 = 0x8044
GL_LUMINANCE6_ALPHA2 = 0x8044
GL_LUMINANCE8_ALPHA8 = 0x8045
GL_LUMINANCE8_ALPHA8 = 0x8045
GL_LUMINANCE12_ALPHA4 = 0x8046
GL_LUMINANCE12_ALPHA4 = 0x8046
GL_LUMINANCE12_ALPHA12 = 0x8047
GL_LUMINANCE12_ALPHA12 = 0x8047
GL_LUMINANCE16_ALPHA16 = 0x8048
GL_LUMINANCE16_ALPHA16 = 0x8048
GL_INTENSITY = 0x8049
GL_INTENSITY = 0x8049
GL_INTENSITY4 = 0x804A
GL_INTENSITY4 = 0x804A
GL_INTENSITY8 = 0x804B
GL_INTENSITY8 = 0x804B
GL_INTENSITY12 = 0x804C
GL_INTENSITY12 = 0x804C
GL_INTENSITY16 = 0x804D
GL_INTENSITY16 = 0x804D
GL_R3_G3_B2 = 0x2A10
GL_R3_G3_B2 = 0x2A10
GL_RGB4 = 0x804F
GL_RGB4 = 0x804F
GL_RGB5 = 0x8050
GL_RGB5 = 0x8050
GL_RGB8 = 0x8051
GL_RGB8 = 0x8051
GL_RGB10 = 0x8052
GL_RGB10 = 0x8052
GL_RGB12 = 0x8053
GL_RGB12 = 0x8053
GL_RGB16 = 0x8054
GL_RGB16 = 0x8054
GL_RGBA2 = 0x8055
GL_RGBA2 = 0x8055
GL_RGBA4 = 0x8056
GL_RGBA4 = 0x8056
GL_RGB5_A1 = 0x8057
GL_RGB5_A1 = 0x8057
GL_RGBA8 = 0x8058
GL_RGBA8 = 0x8058
GL_RGB10_A2 = 0x8059
GL_RGB10_A2 = 0x8059
GL_RGBA12 = 0x805A
GL_RGBA12 = 0x805A
GL_RGBA16 = 0x805B
GL_RGBA16 = 0x805B
GL_TEXTURE_RED_SIZE = 0x805C
GL_TEXTURE_RED_SIZE = 0x805C
GL_TEXTURE_GREEN_SIZE = 0x805D
GL_TEXTURE_GREEN_SIZE = 0x805D
GL_TEXTURE_BLUE_SIZE = 0x805E
GL_TEXTURE_BLUE_SIZE = 0x805E
GL_TEXTURE_ALPHA_SIZE = 0x805F
GL_TEXTURE_ALPHA_SIZE = 0x805F
GL_TEXTURE_LUMINANCE_SIZE = 0x8060
GL_TEXTURE_LUMINANCE_SIZE = 0x8060
GL_TEXTURE_INTENSITY_SIZE = 0x8061
GL_TEXTURE_INTENSITY_SIZE = 0x8061
GL_PROXY_TEXTURE_1D = 0x8063
GL_PROXY_TEXTURE_1D = 0x8063
GL_PROXY_TEXTURE_2D = 0x8064
GL_PROXY_TEXTURE_2D = 0x8064

GL_TEXTURE_PRIORITY = 0x8066
GL_TEXTURE_PRIORITY = 0x8066
GL_TEXTURE_RESIDENT = 0x8067
GL_TEXTURE_RESIDENT = 0x8067
GL_TEXTURE_BINDING_1D = 0x8068
GL_TEXTURE_BINDING_1D = 0x8068
GL_TEXTURE_BINDING_2D = 0x8069
GL_TEXTURE_BINDING_2D = 0x8069
GL_TEXTURE_BINDING_3D = 0x806A
GL_TEXTURE_BINDING_3D = 0x806A

GL_VERTEX_ARRAY = 0x8074
GL_VERTEX_ARRAY = 0x8074
GL_NORMAL_ARRAY = 0x8075
GL_NORMAL_ARRAY = 0x8075
GL_COLOR_ARRAY = 0x8076
GL_COLOR_ARRAY = 0x8076
GL_INDEX_ARRAY = 0x8077
GL_INDEX_ARRAY = 0x8077
GL_TEXTURE_COORD_ARRAY = 0x8078
GL_TEXTURE_COORD_ARRAY = 0x8078
GL_EDGE_FLAG_ARRAY = 0x8079
GL_EDGE_FLAG_ARRAY = 0x8079
GL_VERTEX_ARRAY_SIZE = 0x807A
GL_VERTEX_ARRAY_SIZE = 0x807A
GL_VERTEX_ARRAY_TYPE = 0x807B
GL_VERTEX_ARRAY_TYPE = 0x807B
GL_VERTEX_ARRAY_STRIDE = 0x807C
GL_VERTEX_ARRAY_STRIDE = 0x807C
GL_NORMAL_ARRAY_TYPE = 0x807E
GL_NORMAL_ARRAY_TYPE = 0x807E
GL_NORMAL_ARRAY_STRIDE = 0x807F
GL_NORMAL_ARRAY_STRIDE = 0x807F
GL_COLOR_ARRAY_SIZE = 0x8081
GL_COLOR_ARRAY_SIZE = 0x8081
GL_COLOR_ARRAY_TYPE = 0x8082
GL_COLOR_ARRAY_TYPE = 0x8082
GL_COLOR_ARRAY_STRIDE = 0x8083
GL_COLOR_ARRAY_STRIDE = 0x8083
GL_INDEX_ARRAY_TYPE = 0x8085
GL_INDEX_ARRAY_TYPE = 0x8085
GL_INDEX_ARRAY_STRIDE = 0x8086
GL_INDEX_ARRAY_STRIDE = 0x8086
GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088
GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088
GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089
GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089
GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A
GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A
GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C
GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C
GL_VERTEX_ARRAY_POINTER = 0x808E
GL_VERTEX_ARRAY_POINTER = 0x808E
GL_NORMAL_ARRAY_POINTER = 0x808F
GL_NORMAL_ARRAY_POINTER = 0x808F
GL_COLOR_ARRAY_POINTER = 0x8090
GL_COLOR_ARRAY_POINTER = 0x8090
GL_INDEX_ARRAY_POINTER = 0x8091
GL_INDEX_ARRAY_POINTER = 0x8091
GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092
GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092
GL_EDGE_FLAG_ARRAY_POINTER = 0x8093
GL_EDGE_FLAG_ARRAY_POINTER = 0x8093
GL_V2F = 0x2A20
GL_V2F = 0x2A20
GL_V3F = 0x2A21
GL_V3F = 0x2A21
GL_C4UB_V2F = 0x2A22
GL_C4UB_V2F = 0x2A22
GL_C4UB_V3F = 0x2A23
GL_C4UB_V3F = 0x2A23
GL_C3F_V3F = 0x2A24
GL_C3F_V3F = 0x2A24
GL_N3F_V3F = 0x2A25
GL_N3F_V3F = 0x2A25
GL_C4F_N3F_V3F = 0x2A26
GL_C4F_N3F_V3F = 0x2A26
GL_T2F_V3F = 0x2A27
GL_T2F_V3F = 0x2A27
GL_T4F_V4F = 0x2A28
GL_T4F_V4F = 0x2A28
GL_T2F_C4UB_V3F = 0x2A29
GL_T2F_C4UB_V3F = 0x2A29
GL_T2F_C3F_V3F = 0x2A2A
GL_T2F_C3F_V3F = 0x2A2A
GL_T2F_N3F_V3F = 0x2A2B
GL_T2F_N3F_V3F = 0x2A2B
GL_T2F_C4F_N3F_V3F = 0x2A2C
GL_T2F_C4F_N3F_V3F = 0x2A2C
GL_T4F_C4F_N3F_V4F = 0x2A2D
GL_T4F_C4F_N3F_V4F = 0x2A2D

GL_BGR = 0x80E0
GL_BGR = 0x80E0
GL_BGRA = 0x80E1
GL_BGRA = 0x80E1

GL_CONSTANT_COLOR = 0x8001
GL_CONSTANT_COLOR = 0x8001
GL_ONE_MINUS_CONSTANT_COLOR = 0x8002
GL_ONE_MINUS_CONSTANT_COLOR = 0x8002
GL_CONSTANT_ALPHA = 0x8003
GL_CONSTANT_ALPHA = 0x8003
GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004
GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004
GL_BLEND_COLOR = 0x8005
GL_BLEND_COLOR = 0x8005

GL_FUNC_ADD = 0x8006
GL_FUNC_ADD = 0x8006
GL_MIN = 0x8007
GL_MIN = 0x8007
GL_MAX = 0x8008
GL_MAX = 0x8008
GL_BLEND_EQUATION = 0x8009
GL_BLEND_EQUATION = 0x8009

GL_FUNC_SUBTRACT = 0x800A
GL_FUNC_SUBTRACT = 0x800A
GL_FUNC_REVERSE_SUBTRACT = 0x800B
GL_FUNC_REVERSE_SUBTRACT = 0x800B

GL_COLOR_MATRIX = 0x80B1
GL_COLOR_MATRIX = 0x80B1
GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2
GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2
GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3
GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3
GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4
GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4
GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5
GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5
GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6
GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6
GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7
GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7
GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8
GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8
GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9
GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9
GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA
GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA
GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB
GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB

GL_COLOR_TABLE = 0x80D0
GL_COLOR_TABLE = 0x80D0
GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1
GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1
GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2
GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2
GL_PROXY_COLOR_TABLE = 0x80D3
GL_PROXY_COLOR_TABLE = 0x80D3
GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4
GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4
GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5
GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5
GL_COLOR_TABLE_SCALE = 0x80D6
GL_COLOR_TABLE_SCALE = 0x80D6
GL_COLOR_TABLE_BIAS = 0x80D7
GL_COLOR_TABLE_BIAS = 0x80D7
GL_COLOR_TABLE_FORMAT = 0x80D8
GL_COLOR_TABLE_FORMAT = 0x80D8
GL_COLOR_TABLE_WIDTH = 0x80D9
GL_COLOR_TABLE_WIDTH = 0x80D9
GL_COLOR_TABLE_RED_SIZE = 0x80DA
GL_COLOR_TABLE_RED_SIZE = 0x80DA
GL_COLOR_TABLE_GREEN_SIZE = 0x80DB
GL_COLOR_TABLE_GREEN_SIZE = 0x80DB
GL_COLOR_TABLE_BLUE_SIZE = 0x80DC
GL_COLOR_TABLE_BLUE_SIZE = 0x80DC
GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD
GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD
GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE
GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE
GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF
GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF

GL_CONVOLUTION_1D = 0x8010
GL_CONVOLUTION_1D = 0x8010
GL_CONVOLUTION_2D = 0x8011
GL_CONVOLUTION_2D = 0x8011
GL_SEPARABLE_2D = 0x8012
GL_SEPARABLE_2D = 0x8012
GL_CONVOLUTION_BORDER_MODE = 0x8013
GL_CONVOLUTION_BORDER_MODE = 0x8013
GL_CONVOLUTION_FILTER_SCALE = 0x8014
GL_CONVOLUTION_FILTER_SCALE = 0x8014
GL_CONVOLUTION_FILTER_BIAS = 0x8015
GL_CONVOLUTION_FILTER_BIAS = 0x8015
GL_REDUCE = 0x8016
GL_REDUCE = 0x8016
GL_CONVOLUTION_FORMAT = 0x8017
GL_CONVOLUTION_FORMAT = 0x8017
GL_CONVOLUTION_WIDTH = 0x8018
GL_CONVOLUTION_WIDTH = 0x8018
GL_CONVOLUTION_HEIGHT = 0x8019
GL_CONVOLUTION_HEIGHT = 0x8019
GL_MAX_CONVOLUTION_WIDTH = 0x801A
GL_MAX_CONVOLUTION_WIDTH = 0x801A
GL_MAX_CONVOLUTION_HEIGHT = 0x801B
GL_MAX_CONVOLUTION_HEIGHT = 0x801B
GL_POST_CONVOLUTION_RED_SCALE = 0x801C
GL_POST_CONVOLUTION_RED_SCALE = 0x801C
GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D
GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D
GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E
GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E
GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F
GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F
GL_POST_CONVOLUTION_RED_BIAS = 0x8020
GL_POST_CONVOLUTION_RED_BIAS = 0x8020
GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021
GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021
GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022
GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022
GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023
GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023
GL_CONSTANT_BORDER = 0x8151
GL_CONSTANT_BORDER = 0x8151
GL_REPLICATE_BORDER = 0x8153
GL_REPLICATE_BORDER = 0x8153
GL_CONVOLUTION_BORDER_COLOR = 0x8154
GL_CONVOLUTION_BORDER_COLOR = 0x8154

GL_MAX_ELEMENTS_VERTICES = 0x80E8
GL_MAX_ELEMENTS_VERTICES = 0x80E8
GL_MAX_ELEMENTS_INDICES = 0x80E9
GL_MAX_ELEMENTS_INDICES = 0x80E9

GL_HISTOGRAM = 0x8024
GL_HISTOGRAM = 0x8024
GL_PROXY_HISTOGRAM = 0x8025
GL_PROXY_HISTOGRAM = 0x8025
GL_HISTOGRAM_WIDTH = 0x8026
GL_HISTOGRAM_WIDTH = 0x8026
GL_HISTOGRAM_FORMAT = 0x8027
GL_HISTOGRAM_FORMAT = 0x8027
GL_HISTOGRAM_RED_SIZE = 0x8028
GL_HISTOGRAM_RED_SIZE = 0x8028
GL_HISTOGRAM_GREEN_SIZE = 0x8029
GL_HISTOGRAM_GREEN_SIZE = 0x8029
GL_HISTOGRAM_BLUE_SIZE = 0x802A
GL_HISTOGRAM_BLUE_SIZE = 0x802A
GL_HISTOGRAM_ALPHA_SIZE = 0x802B
GL_HISTOGRAM_ALPHA_SIZE = 0x802B
GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C
GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C
GL_HISTOGRAM_SINK = 0x802D
GL_HISTOGRAM_SINK = 0x802D
GL_MINMAX = 0x802E
GL_MINMAX = 0x802E
GL_MINMAX_FORMAT = 0x802F
GL_MINMAX_FORMAT = 0x802F
GL_MINMAX_SINK = 0x8030
GL_MINMAX_SINK = 0x8030
GL_TABLE_TOO_LARGE = 0x8031
GL_TABLE_TOO_LARGE = 0x8031

GL_UNSIGNED_BYTE_3_3_2 = 0x8032
GL_UNSIGNED_BYTE_3_3_2 = 0x8032
GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033
GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033
GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034
GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034
GL_UNSIGNED_INT_8_8_8_8 = 0x8035
GL_UNSIGNED_INT_8_8_8_8 = 0x8035
GL_UNSIGNED_INT_10_10_10_2 = 0x8036
GL_UNSIGNED_INT_10_10_10_2 = 0x8036
GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362
GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362
GL_UNSIGNED_SHORT_5_6_5 = 0x8363
GL_UNSIGNED_SHORT_5_6_5 = 0x8363
GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364
GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364
GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365
GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365
GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366
GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366
GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367
GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367
GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368
GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368

GL_RESCALE_NORMAL = 0x803A
GL_RESCALE_NORMAL = 0x803A

GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8
GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8
GL_SINGLE_COLOR = 0x81F9
GL_SINGLE_COLOR = 0x81F9
GL_SEPARATE_SPECULAR_COLOR = 0x81FA
GL_SEPARATE_SPECULAR_COLOR = 0x81FA

GL_PACK_SKIP_IMAGES = 0x806B
GL_PACK_SKIP_IMAGES = 0x806B
GL_PACK_IMAGE_HEIGHT = 0x806C
GL_PACK_IMAGE_HEIGHT = 0x806C
GL_UNPACK_SKIP_IMAGES = 0x806D
GL_UNPACK_SKIP_IMAGES = 0x806D
GL_UNPACK_IMAGE_HEIGHT = 0x806E
GL_UNPACK_IMAGE_HEIGHT = 0x806E
GL_TEXTURE_3D = 0x806F
GL_TEXTURE_3D = 0x806F
GL_PROXY_TEXTURE_3D = 0x8070
GL_PROXY_TEXTURE_3D = 0x8070
GL_TEXTURE_DEPTH = 0x8071
GL_TEXTURE_DEPTH = 0x8071
GL_TEXTURE_WRAP_R = 0x8072
GL_TEXTURE_WRAP_R = 0x8072
GL_MAX_3D_TEXTURE_SIZE = 0x8073
GL_MAX_3D_TEXTURE_SIZE = 0x8073

GL_CLAMP_TO_EDGE = 0x812F
GL_CLAMP_TO_EDGE = 0x812F
GL_CLAMP_TO_BORDER = 0x812D
GL_CLAMP_TO_BORDER = 0x812D

GL_TEXTURE_MIN_LOD = 0x813A
GL_TEXTURE_MIN_LOD = 0x813A
GL_TEXTURE_MAX_LOD = 0x813B
GL_TEXTURE_MAX_LOD = 0x813B
GL_TEXTURE_BASE_LEVEL = 0x813C
GL_TEXTURE_BASE_LEVEL = 0x813C
GL_TEXTURE_MAX_LEVEL = 0x813D
GL_TEXTURE_MAX_LEVEL = 0x813D

GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12
GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12
GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13
GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13
GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22
GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22
GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23
GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23
GL_ALIASED_POINT_SIZE_RANGE = 0x846D
GL_ALIASED_POINT_SIZE_RANGE = 0x846D
GL_ALIASED_LINE_WIDTH_RANGE = 0x846E
GL_ALIASED_LINE_WIDTH_RANGE = 0x846E

GL_TEXTURE0 = 0x84C0
GL_TEXTURE0 = 0x84C0
GL_TEXTURE1 = 0x84C1
GL_TEXTURE1 = 0x84C1
GL_TEXTURE2 = 0x84C2
GL_TEXTURE2 = 0x84C2
GL_TEXTURE3 = 0x84C3
GL_TEXTURE3 = 0x84C3
GL_TEXTURE4 = 0x84C4
GL_TEXTURE4 = 0x84C4
GL_TEXTURE5 = 0x84C5
GL_TEXTURE5 = 0x84C5
GL_TEXTURE6 = 0x84C6
GL_TEXTURE6 = 0x84C6
GL_TEXTURE7 = 0x84C7
GL_TEXTURE7 = 0x84C7
GL_TEXTURE8 = 0x84C8
GL_TEXTURE8 = 0x84C8
GL_TEXTURE9 = 0x84C9
GL_TEXTURE9 = 0x84C9
GL_TEXTURE10 = 0x84CA
GL_TEXTURE10 = 0x84CA
GL_TEXTURE11 = 0x84CB
GL_TEXTURE11 = 0x84CB
GL_TEXTURE12 = 0x84CC
GL_TEXTURE12 = 0x84CC
GL_TEXTURE13 = 0x84CD
GL_TEXTURE13 = 0x84CD
GL_TEXTURE14 = 0x84CE
GL_TEXTURE14 = 0x84CE
GL_TEXTURE15 = 0x84CF
GL_TEXTURE15 = 0x84CF
GL_TEXTURE16 = 0x84D0
GL_TEXTURE16 = 0x84D0
GL_TEXTURE17 = 0x84D1
GL_TEXTURE17 = 0x84D1
GL_TEXTURE18 = 0x84D2
GL_TEXTURE18 = 0x84D2
GL_TEXTURE19 = 0x84D3
GL_TEXTURE19 = 0x84D3
GL_TEXTURE20 = 0x84D4
GL_TEXTURE20 = 0x84D4
GL_TEXTURE21 = 0x84D5
GL_TEXTURE21 = 0x84D5
GL_TEXTURE22 = 0x84D6
GL_TEXTURE22 = 0x84D6
GL_TEXTURE23 = 0x84D7
GL_TEXTURE23 = 0x84D7
GL_TEXTURE24 = 0x84D8
GL_TEXTURE24 = 0x84D8
GL_TEXTURE25 = 0x84D9
GL_TEXTURE25 = 0x84D9
GL_TEXTURE26 = 0x84DA
GL_TEXTURE26 = 0x84DA
GL_TEXTURE27 = 0x84DB
GL_TEXTURE27 = 0x84DB
GL_TEXTURE28 = 0x84DC
GL_TEXTURE28 = 0x84DC
GL_TEXTURE29 = 0x84DD
GL_TEXTURE29 = 0x84DD
GL_TEXTURE30 = 0x84DE
GL_TEXTURE30 = 0x84DE
GL_TEXTURE31 = 0x84DF
GL_TEXTURE31 = 0x84DF
GL_ACTIVE_TEXTURE = 0x84E0
GL_ACTIVE_TEXTURE = 0x84E0
GL_CLIENT_ACTIVE_TEXTURE = 0x84E1
GL_CLIENT_ACTIVE_TEXTURE = 0x84E1
GL_MAX_TEXTURE_UNITS = 0x84E2
GL_MAX_TEXTURE_UNITS = 0x84E2

GL_COMBINE = 0x8570
GL_COMBINE = 0x8570
GL_COMBINE_RGB = 0x8571
GL_COMBINE_RGB = 0x8571
GL_COMBINE_ALPHA = 0x8572
GL_COMBINE_ALPHA = 0x8572
GL_RGB_SCALE = 0x8573
GL_RGB_SCALE = 0x8573
GL_ADD_SIGNED = 0x8574
GL_ADD_SIGNED = 0x8574
GL_INTERPOLATE = 0x8575
GL_INTERPOLATE = 0x8575
GL_CONSTANT = 0x8576
GL_CONSTANT = 0x8576
GL_PRIMARY_COLOR = 0x8577
GL_PRIMARY_COLOR = 0x8577
GL_PREVIOUS = 0x8578
GL_PREVIOUS = 0x8578
GL_SUBTRACT = 0x84E7
GL_SUBTRACT = 0x84E7

GL_SRC0_RGB = 0x8580
GL_SRC0_RGB = 0x8580
GL_SRC1_RGB = 0x8581
GL_SRC1_RGB = 0x8581
GL_SRC2_RGB = 0x8582
GL_SRC2_RGB = 0x8582
GL_SRC3_RGB = 0x8583
GL_SRC3_RGB = 0x8583
GL_SRC4_RGB = 0x8584
GL_SRC4_RGB = 0x8584
GL_SRC5_RGB = 0x8585
GL_SRC5_RGB = 0x8585
GL_SRC6_RGB = 0x8586
GL_SRC6_RGB = 0x8586
GL_SRC7_RGB = 0x8587
GL_SRC7_RGB = 0x8587
GL_SRC0_ALPHA = 0x8588
GL_SRC0_ALPHA = 0x8588
GL_SRC1_ALPHA = 0x8589
GL_SRC1_ALPHA = 0x8589
GL_SRC2_ALPHA = 0x858A
GL_SRC2_ALPHA = 0x858A
GL_SRC3_ALPHA = 0x858B
GL_SRC3_ALPHA = 0x858B
GL_SRC4_ALPHA = 0x858C
GL_SRC4_ALPHA = 0x858C
GL_SRC5_ALPHA = 0x858D
GL_SRC5_ALPHA = 0x858D
GL_SRC6_ALPHA = 0x858E
GL_SRC6_ALPHA = 0x858E
GL_SRC7_ALPHA = 0x858F
GL_SRC7_ALPHA = 0x858F

GL_SOURCE0_RGB = 0x8580
GL_SOURCE0_RGB = 0x8580
GL_SOURCE1_RGB = 0x8581
GL_SOURCE1_RGB = 0x8581
GL_SOURCE2_RGB = 0x8582
GL_SOURCE2_RGB = 0x8582
GL_SOURCE3_RGB = 0x8583
GL_SOURCE3_RGB = 0x8583
GL_SOURCE4_RGB = 0x8584
GL_SOURCE4_RGB = 0x8584
GL_SOURCE5_RGB = 0x8585
GL_SOURCE5_RGB = 0x8585
GL_SOURCE6_RGB = 0x8586
GL_SOURCE6_RGB = 0x8586
GL_SOURCE7_RGB = 0x8587
GL_SOURCE7_RGB = 0x8587
GL_SOURCE0_ALPHA = 0x8588
GL_SOURCE0_ALPHA = 0x8588
GL_SOURCE1_ALPHA = 0x8589
GL_SOURCE1_ALPHA = 0x8589
GL_SOURCE2_ALPHA = 0x858A
GL_SOURCE2_ALPHA = 0x858A
GL_SOURCE3_ALPHA = 0x858B
GL_SOURCE3_ALPHA = 0x858B
GL_SOURCE4_ALPHA = 0x858C
GL_SOURCE4_ALPHA = 0x858C
GL_SOURCE5_ALPHA = 0x858D
GL_SOURCE5_ALPHA = 0x858D
GL_SOURCE6_ALPHA = 0x858E
GL_SOURCE6_ALPHA = 0x858E
GL_SOURCE7_ALPHA = 0x858F
GL_SOURCE7_ALPHA = 0x858F

GL_OPERAND0_RGB = 0x8590
GL_OPERAND0_RGB = 0x8590
GL_OPERAND1_RGB = 0x8591
GL_OPERAND1_RGB = 0x8591
GL_OPERAND2_RGB = 0x8592
GL_OPERAND2_RGB = 0x8592
GL_OPERAND3_RGB = 0x8593
GL_OPERAND3_RGB = 0x8593
GL_OPERAND4_RGB = 0x8594
GL_OPERAND4_RGB = 0x8594
GL_OPERAND5_RGB = 0x8595
GL_OPERAND5_RGB = 0x8595
GL_OPERAND6_RGB = 0x8596
GL_OPERAND6_RGB = 0x8596
GL_OPERAND7_RGB = 0x8597
GL_OPERAND7_RGB = 0x8597
GL_OPERAND0_ALPHA = 0x8598
GL_OPERAND0_ALPHA = 0x8598
GL_OPERAND1_ALPHA = 0x8599
GL_OPERAND1_ALPHA = 0x8599
GL_OPERAND2_ALPHA = 0x859A
GL_OPERAND2_ALPHA = 0x859A
GL_OPERAND3_ALPHA = 0x859B
GL_OPERAND3_ALPHA = 0x859B
GL_OPERAND4_ALPHA = 0x859C
GL_OPERAND4_ALPHA = 0x859C
GL_OPERAND5_ALPHA = 0x859D
GL_OPERAND5_ALPHA = 0x859D
GL_OPERAND6_ALPHA = 0x859E
GL_OPERAND6_ALPHA = 0x859E
GL_OPERAND7_ALPHA = 0x859F
GL_OPERAND7_ALPHA = 0x859F

GL_DOT3_RGB = 0x86AE
GL_DOT3_RGB = 0x86AE
GL_DOT3_RGBA = 0x86AF
GL_DOT3_RGBA = 0x86AF

GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3
GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3
GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4
GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4
GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5
GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5
GL_TRANSPOSE_COLOR_MATRIX = 0x84E6
GL_TRANSPOSE_COLOR_MATRIX = 0x84E6

GL_NORMAL_MAP = 0x8511
GL_NORMAL_MAP = 0x8511
GL_REFLECTION_MAP = 0x8512
GL_REFLECTION_MAP = 0x8512
GL_TEXTURE_CUBE_MAP = 0x8513
GL_TEXTURE_CUBE_MAP = 0x8513
GL_TEXTURE_BINDING_CUBE_MAP = 0x8514
GL_TEXTURE_BINDING_CUBE_MAP = 0x8514
GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515
GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515
GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516
GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516
GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517
GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518
GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519
GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A
GL_PROXY_TEXTURE_CUBE_MAP = 0x851B
GL_PROXY_TEXTURE_CUBE_MAP = 0x851B
GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C
GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C

GL_COMPRESSED_ALPHA = 0x84E9
GL_COMPRESSED_ALPHA = 0x84E9
GL_COMPRESSED_LUMINANCE = 0x84EA
GL_COMPRESSED_LUMINANCE = 0x84EA
GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB
GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB
GL_COMPRESSED_INTENSITY = 0x84EC
GL_COMPRESSED_INTENSITY = 0x84EC
GL_COMPRESSED_RGB = 0x84ED
GL_COMPRESSED_RGB = 0x84ED
GL_COMPRESSED_RGBA = 0x84EE
GL_COMPRESSED_RGBA = 0x84EE
GL_TEXTURE_COMPRESSION_HINT = 0x84EF
GL_TEXTURE_COMPRESSION_HINT = 0x84EF
GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0
GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0
GL_TEXTURE_COMPRESSED = 0x86A1
GL_TEXTURE_COMPRESSED = 0x86A1
GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2
GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2
GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3
GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3

GL_MULTISAMPLE = 0x809D
GL_MULTISAMPLE = 0x809D
GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E
GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E
GL_SAMPLE_ALPHA_TO_ONE = 0x809F
GL_SAMPLE_ALPHA_TO_ONE = 0x809F
GL_SAMPLE_COVERAGE = 0x80A0
GL_SAMPLE_COVERAGE = 0x80A0
GL_SAMPLE_BUFFERS = 0x80A8
GL_SAMPLE_BUFFERS = 0x80A8
GL_SAMPLES = 0x80A9
GL_SAMPLES = 0x80A9
GL_SAMPLE_COVERAGE_VALUE = 0x80AA
GL_SAMPLE_COVERAGE_VALUE = 0x80AA
GL_SAMPLE_COVERAGE_INVERT = 0x80AB
GL_SAMPLE_COVERAGE_INVERT = 0x80AB
GL_MULTISAMPLE_BIT = 0x20000000
GL_MULTISAMPLE_BIT = 0x20000000

GL_DEPTH_COMPONENT16 = 0x81A5
GL_DEPTH_COMPONENT16 = 0x81A5
GL_DEPTH_COMPONENT24 = 0x81A6
GL_DEPTH_COMPONENT24 = 0x81A6
GL_DEPTH_COMPONENT32 = 0x81A7
GL_DEPTH_COMPONENT32 = 0x81A7
GL_TEXTURE_DEPTH_SIZE = 0x884A
GL_TEXTURE_DEPTH_SIZE = 0x884A
GL_DEPTH_TEXTURE_MODE = 0x884B
GL_DEPTH_TEXTURE_MODE = 0x884B

GL_TEXTURE_COMPARE_MODE = 0x884C
GL_TEXTURE_COMPARE_MODE = 0x884C
GL_TEXTURE_COMPARE_FUNC = 0x884D
GL_TEXTURE_COMPARE_FUNC = 0x884D
GL_COMPARE_R_TO_TEXTURE = 0x884E
GL_COMPARE_R_TO_TEXTURE = 0x884E

GL_QUERY_COUNTER_BITS = 0x8864
GL_QUERY_COUNTER_BITS = 0x8864
GL_CURRENT_QUERY = 0x8865
GL_CURRENT_QUERY = 0x8865
GL_QUERY_RESULT = 0x8866
GL_QUERY_RESULT = 0x8866
GL_QUERY_RESULT_AVAILABLE = 0x8867
GL_QUERY_RESULT_AVAILABLE = 0x8867
GL_SAMPLES_PASSED = 0x8914
GL_SAMPLES_PASSED = 0x8914

GL_FOG_COORD_SRC = 0x8450
GL_FOG_COORD_SRC = 0x8450
GL_FOG_COORD = 0x8451
GL_FOG_COORD = 0x8451
GL_FRAGMENT_DEPTH = 0x8452
GL_FRAGMENT_DEPTH = 0x8452
GL_CURRENT_FOG_COORD = 0x8453
GL_CURRENT_FOG_COORD = 0x8453
GL_FOG_COORD_ARRAY_TYPE = 0x8454
GL_FOG_COORD_ARRAY_TYPE = 0x8454
GL_FOG_COORD_ARRAY_STRIDE = 0x8455
GL_FOG_COORD_ARRAY_STRIDE = 0x8455
GL_FOG_COORD_ARRAY_POINTER = 0x8456
GL_FOG_COORD_ARRAY_POINTER = 0x8456
GL_FOG_COORD_ARRAY = 0x8457
GL_FOG_COORD_ARRAY = 0x8457

GL_FOG_COORDINATE_SOURCE = 0x8450
GL_FOG_COORDINATE_SOURCE = 0x8450
GL_FOG_COORDINATE = 0x8451
GL_FOG_COORDINATE = 0x8451
GL_CURRENT_FOG_COORDINATE = 0x8453
GL_CURRENT_FOG_COORDINATE = 0x8453
GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454
GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454
GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455
GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455
GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456
GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456
GL_FOG_COORDINATE_ARRAY = 0x8457
GL_FOG_COORDINATE_ARRAY = 0x8457

GL_COLOR_SUM = 0x8458
GL_COLOR_SUM = 0x8458
GL_CURRENT_SECONDARY_COLOR = 0x8459
GL_CURRENT_SECONDARY_COLOR = 0x8459
GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A
GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A
GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B
GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B
GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C
GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C
GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D
GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D
GL_SECONDARY_COLOR_ARRAY = 0x845E
GL_SECONDARY_COLOR_ARRAY = 0x845E

GL_POINT_SIZE_MIN = 0x8126
GL_POINT_SIZE_MIN = 0x8126
GL_POINT_SIZE_MAX = 0x8127
GL_POINT_SIZE_MAX = 0x8127
GL_POINT_FADE_THRESHOLD_SIZE = 0x8128
GL_POINT_FADE_THRESHOLD_SIZE = 0x8128
GL_POINT_DISTANCE_ATTENUATION = 0x8129
GL_POINT_DISTANCE_ATTENUATION = 0x8129

GL_BLEND_DST_RGB = 0x80C8
GL_BLEND_DST_RGB = 0x80C8
GL_BLEND_SRC_RGB = 0x80C9
GL_BLEND_SRC_RGB = 0x80C9
GL_BLEND_DST_ALPHA = 0x80CA
GL_BLEND_DST_ALPHA = 0x80CA
GL_BLEND_SRC_ALPHA = 0x80CB
GL_BLEND_SRC_ALPHA = 0x80CB

GL_GENERATE_MIPMAP = 0x8191
GL_GENERATE_MIPMAP = 0x8191
GL_GENERATE_MIPMAP_HINT = 0x8192
GL_GENERATE_MIPMAP_HINT = 0x8192

GL_INCR_WRAP = 0x8507
GL_INCR_WRAP = 0x8507
GL_DECR_WRAP = 0x8508
GL_DECR_WRAP = 0x8508

GL_MIRRORED_REPEAT = 0x8370
GL_MIRRORED_REPEAT = 0x8370

GL_MAX_TEXTURE_LOD_BIAS = 0x84FD
GL_MAX_TEXTURE_LOD_BIAS = 0x84FD
GL_TEXTURE_FILTER_CONTROL = 0x8500
GL_TEXTURE_FILTER_CONTROL = 0x8500
GL_TEXTURE_LOD_BIAS = 0x8501
GL_TEXTURE_LOD_BIAS = 0x8501

GL_ARRAY_BUFFER = 0x8892
GL_ARRAY_BUFFER = 0x8892
GL_ELEMENT_ARRAY_BUFFER = 0x8893
GL_ELEMENT_ARRAY_BUFFER = 0x8893
GL_ARRAY_BUFFER_BINDING = 0x8894
GL_ARRAY_BUFFER_BINDING = 0x8894
GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895
GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895
GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896
GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896
GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897
GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897
GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898
GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898
GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899
GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899
GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A
GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A
GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B
GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B
GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C
GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C
GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D
GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D
GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E
GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F
GL_STREAM_DRAW = 0x88E0
GL_STREAM_DRAW = 0x88E0
GL_STREAM_READ = 0x88E1
GL_STREAM_READ = 0x88E1
GL_STREAM_COPY = 0x88E2
GL_STREAM_COPY = 0x88E2
GL_STATIC_DRAW = 0x88E4
GL_STATIC_DRAW = 0x88E4
GL_STATIC_READ = 0x88E5
GL_STATIC_READ = 0x88E5
GL_STATIC_COPY = 0x88E6
GL_STATIC_COPY = 0x88E6
GL_DYNAMIC_DRAW = 0x88E8
GL_DYNAMIC_DRAW = 0x88E8
GL_DYNAMIC_READ = 0x88E9
GL_DYNAMIC_READ = 0x88E9
GL_DYNAMIC_COPY = 0x88EA
GL_DYNAMIC_COPY = 0x88EA
GL_READ_ONLY = 0x88B8
GL_READ_ONLY = 0x88B8
GL_WRITE_ONLY = 0x88B9
GL_WRITE_ONLY = 0x88B9
GL_READ_WRITE = 0x88BA
GL_READ_WRITE = 0x88BA
GL_BUFFER_SIZE = 0x8764
GL_BUFFER_SIZE = 0x8764
GL_BUFFER_USAGE = 0x8765
GL_BUFFER_USAGE = 0x8765
GL_BUFFER_ACCESS = 0x88BB
GL_BUFFER_ACCESS = 0x88BB
GL_BUFFER_MAPPED = 0x88BC
GL_BUFFER_MAPPED = 0x88BC
GL_BUFFER_MAP_POINTER = 0x88BD
GL_BUFFER_MAP_POINTER = 0x88BD

GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D
GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D

GL_CURRENT_PROGRAM = 0x8B8D
GL_CURRENT_PROGRAM = 0x8B8D
GL_SHADER_TYPE = 0x8B4E
GL_SHADER_TYPE = 0x8B4E
GL_DELETE_STATUS = 0x8B80
GL_DELETE_STATUS = 0x8B80
GL_COMPILE_STATUS = 0x8B81
GL_COMPILE_STATUS = 0x8B81
GL_LINK_STATUS = 0x8B82
GL_LINK_STATUS = 0x8B82
GL_VALIDATE_STATUS = 0x8B83
GL_VALIDATE_STATUS = 0x8B83
GL_INFO_LOG_LENGTH = 0x8B84
GL_INFO_LOG_LENGTH = 0x8B84
GL_ATTACHED_SHADERS = 0x8B85
GL_ATTACHED_SHADERS = 0x8B85
GL_ACTIVE_UNIFORMS = 0x8B86
GL_ACTIVE_UNIFORMS = 0x8B86
GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87
GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87
GL_SHADER_SOURCE_LENGTH = 0x8B88
GL_SHADER_SOURCE_LENGTH = 0x8B88
GL_FLOAT_VEC2 = 0x8B50
GL_FLOAT_VEC2 = 0x8B50
GL_FLOAT_VEC3 = 0x8B51
GL_FLOAT_VEC3 = 0x8B51
GL_FLOAT_VEC4 = 0x8B52
GL_FLOAT_VEC4 = 0x8B52
GL_INT_VEC2 = 0x8B53
GL_INT_VEC2 = 0x8B53
GL_INT_VEC3 = 0x8B54
GL_INT_VEC3 = 0x8B54
GL_INT_VEC4 = 0x8B55
GL_INT_VEC4 = 0x8B55
GL_BOOL = 0x8B56
GL_BOOL = 0x8B56
GL_BOOL_VEC2 = 0x8B57
GL_BOOL_VEC2 = 0x8B57
GL_BOOL_VEC3 = 0x8B58
GL_BOOL_VEC3 = 0x8B58
GL_BOOL_VEC4 = 0x8B59
GL_BOOL_VEC4 = 0x8B59
GL_FLOAT_MAT2 = 0x8B5A
GL_FLOAT_MAT2 = 0x8B5A
GL_FLOAT_MAT3 = 0x8B5B
GL_FLOAT_MAT3 = 0x8B5B
GL_FLOAT_MAT4 = 0x8B5C
GL_FLOAT_MAT4 = 0x8B5C
GL_SAMPLER_1D = 0x8B5D
GL_SAMPLER_1D = 0x8B5D
GL_SAMPLER_2D = 0x8B5E
GL_SAMPLER_2D = 0x8B5E
GL_SAMPLER_3D = 0x8B5F
GL_SAMPLER_3D = 0x8B5F
GL_SAMPLER_CUBE = 0x8B60
GL_SAMPLER_CUBE = 0x8B60
GL_SAMPLER_1D_SHADOW = 0x8B61
GL_SAMPLER_1D_SHADOW = 0x8B61
GL_SAMPLER_2D_SHADOW = 0x8B62
GL_SAMPLER_2D_SHADOW = 0x8B62
GL_SHADING_LANGUAGE_VERSION = 0x8B8C
GL_SHADING_LANGUAGE_VERSION = 0x8B8C
GL_VERTEX_SHADER = 0x8B31
GL_VERTEX_SHADER = 0x8B31
GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A
GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A
GL_MAX_VARYING_FLOATS = 0x8B4B
GL_MAX_VARYING_FLOATS = 0x8B4B
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D
GL_ACTIVE_ATTRIBUTES = 0x8B89
GL_ACTIVE_ATTRIBUTES = 0x8B89
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A
GL_FRAGMENT_SHADER = 0x8B30
GL_FRAGMENT_SHADER = 0x8B30
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49
GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B
GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B
GL_MAX_VERTEX_ATTRIBS = 0x8869
GL_MAX_VERTEX_ATTRIBS = 0x8869
GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622
GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622
GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623
GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623
GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624
GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624
GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625
GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A
GL_CURRENT_VERTEX_ATTRIB = 0x8626
GL_CURRENT_VERTEX_ATTRIB = 0x8626
GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645
GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645
GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642
GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642
GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643
GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643
GL_MAX_TEXTURE_COORDS = 0x8871
GL_MAX_TEXTURE_COORDS = 0x8871
GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872
GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872
GL_MAX_DRAW_BUFFERS = 0x8824
GL_MAX_DRAW_BUFFERS = 0x8824
GL_DRAW_BUFFER0 = 0x8825
GL_DRAW_BUFFER0 = 0x8825
GL_DRAW_BUFFER1 = 0x8826
GL_DRAW_BUFFER1 = 0x8826
GL_DRAW_BUFFER2 = 0x8827
GL_DRAW_BUFFER2 = 0x8827
GL_DRAW_BUFFER3 = 0x8828
GL_DRAW_BUFFER3 = 0x8828
GL_DRAW_BUFFER4 = 0x8829
GL_DRAW_BUFFER4 = 0x8829
GL_DRAW_BUFFER5 = 0x882A
GL_DRAW_BUFFER5 = 0x882A
GL_DRAW_BUFFER6 = 0x882B
GL_DRAW_BUFFER6 = 0x882B
GL_DRAW_BUFFER7 = 0x882C
GL_DRAW_BUFFER7 = 0x882C
GL_DRAW_BUFFER8 = 0x882D
GL_DRAW_BUFFER8 = 0x882D
GL_DRAW_BUFFER9 = 0x882E
GL_DRAW_BUFFER9 = 0x882E
GL_DRAW_BUFFER10 = 0x882F
GL_DRAW_BUFFER10 = 0x882F
GL_DRAW_BUFFER11 = 0x8830
GL_DRAW_BUFFER11 = 0x8830
GL_DRAW_BUFFER12 = 0x8831
GL_DRAW_BUFFER12 = 0x8831
GL_DRAW_BUFFER13 = 0x8832
GL_DRAW_BUFFER13 = 0x8832
GL_DRAW_BUFFER14 = 0x8833
GL_DRAW_BUFFER14 = 0x8833
GL_DRAW_BUFFER15 = 0x8834
GL_DRAW_BUFFER15 = 0x8834
GL_POINT_SPRITE = 0x8861
GL_POINT_SPRITE = 0x8861
GL_COORD_REPLACE = 0x8862
GL_COORD_REPLACE = 0x8862
GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0
GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0
GL_LOWER_LEFT = 0x8CA1
GL_LOWER_LEFT = 0x8CA1
GL_UPPER_LEFT = 0x8CA2
GL_UPPER_LEFT = 0x8CA2
GL_STENCIL_BACK_FUNC = 0x8800
GL_STENCIL_BACK_FUNC = 0x8800
GL_STENCIL_BACK_VALUE_MASK = 0x8CA4
GL_STENCIL_BACK_VALUE_MASK = 0x8CA4
GL_STENCIL_BACK_REF = 0x8CA3
GL_STENCIL_BACK_REF = 0x8CA3
GL_STENCIL_BACK_FAIL = 0x8801
GL_STENCIL_BACK_FAIL = 0x8801
GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802
GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802
GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803
GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803
GL_STENCIL_BACK_WRITEMASK = 0x8CA5
GL_STENCIL_BACK_WRITEMASK = 0x8CA5

#~ line: 2389, skipped: 598 ~~~~~~

@bind(None, [GLenum, GLfloat])
def glAccum(op, value, _api_=None): 
    """glAccum(op, value)
    
        op : GLenum
        value : GLfloat
    """
    return _api_(op, value)
    
@bind(None, [GLenum, GLclampf])
def glAlphaFunc(func, ref, _api_=None): 
    """glAlphaFunc(func, ref)
    
        func : GLenum
        ref : GLclampf
    """
    return _api_(func, ref)
    
@bind(GLboolean, [GLsizei, POINTER(c_ulong), POINTER(c_ubyte)])
def glAreTexturesResident(n, textures, residences, _api_=None): 
    """glAreTexturesResident(n, textures, residences)
    
        n : GLsizei
        textures : POINTER(c_ulong)
        residences : POINTER(c_ubyte)
    """
    return _api_(n, textures, residences)
    
@bind(None, [GLint])
def glArrayElement(i, _api_=None): 
    """glArrayElement(i)
    
        i : GLint
    """
    return _api_(i)
    
@bind(None, [GLenum])
def glBegin(mode, _api_=None): 
    """glBegin(mode)
    
        mode : GLenum
    """
    return _api_(mode)
    
@bind(None, [GLenum, GLuint])
def glBindTexture(target, texture, _api_=None): 
    """glBindTexture(target, texture)
    
        target : GLenum
        texture : GLuint
    """
    return _api_(target, texture)
    
@bind(None, [GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, POINTER(c_ubyte)])
def glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap, _api_=None): 
    """glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap)
    
        width : GLsizei
        height : GLsizei
        xorig : GLfloat
        yorig : GLfloat
        xmove : GLfloat
        ymove : GLfloat
        bitmap : POINTER(c_ubyte)
    """
    return _api_(width, height, xorig, yorig, xmove, ymove, bitmap)
    
@bind(None, [GLclampf, GLclampf, GLclampf, GLclampf])
def glBlendColor(red, green, blue, alpha, _api_=None): 
    """glBlendColor(red, green, blue, alpha)
    
        red : GLclampf
        green : GLclampf
        blue : GLclampf
        alpha : GLclampf
    """
    return _api_(red, green, blue, alpha)
    
@bind(None, [GLenum])
def glBlendEquation(mode, _api_=None): 
    """glBlendEquation(mode)
    
        mode : GLenum
    """
    return _api_(mode)
    
@bind(None, [GLenum, GLenum])
def glBlendFunc(sfactor, dfactor, _api_=None): 
    """glBlendFunc(sfactor, dfactor)
    
        sfactor : GLenum
        dfactor : GLenum
    """
    return _api_(sfactor, dfactor)
    
@bind(None, [GLuint])
def glCallList(list, _api_=None): 
    """glCallList(list)
    
        list : GLuint
    """
    return _api_(list)
    
@bind(None, [GLsizei, GLenum, c_void_p])
def glCallLists(n, type, lists, _api_=None): 
    """glCallLists(n, type, lists)
    
        n : GLsizei
        type : GLenum
        lists : c_void_p
    """
    return _api_(n, type, lists)
    
@bind(None, [GLbitfield])
def glClear(mask, _api_=None): 
    """glClear(mask)
    
        mask : GLbitfield
    """
    return _api_(mask)
    
@bind(None, [GLfloat, GLfloat, GLfloat, GLfloat])
def glClearAccum(red, green, blue, alpha, _api_=None): 
    """glClearAccum(red, green, blue, alpha)
    
        red : GLfloat
        green : GLfloat
        blue : GLfloat
        alpha : GLfloat
    """
    return _api_(red, green, blue, alpha)
    
@bind(None, [GLclampf, GLclampf, GLclampf, GLclampf])
def glClearColor(red, green, blue, alpha, _api_=None): 
    """glClearColor(red, green, blue, alpha)
    
        red : GLclampf
        green : GLclampf
        blue : GLclampf
        alpha : GLclampf
    """
    return _api_(red, green, blue, alpha)
    
@bind(None, [GLclampd])
def glClearDepth(depth, _api_=None): 
    """glClearDepth(depth)
    
        depth : GLclampd
    """
    return _api_(depth)
    
@bind(None, [GLfloat])
def glClearIndex(c, _api_=None): 
    """glClearIndex(c)
    
        c : GLfloat
    """
    return _api_(c)
    
@bind(None, [GLint])
def glClearStencil(s, _api_=None): 
    """glClearStencil(s)
    
        s : GLint
    """
    return _api_(s)
    
@bind(None, [GLenum, POINTER(c_double)])
def glClipPlane(plane, equation, _api_=None): 
    """glClipPlane(plane, equation)
    
        plane : GLenum
        equation : POINTER(c_double)
    """
    return _api_(plane, equation)
    
@bind(None, [GLbyte, GLbyte, GLbyte])
def glColor3b(red, green, blue, _api_=None): 
    """glColor3b(red, green, blue)
    
        red : GLbyte
        green : GLbyte
        blue : GLbyte
    """
    return _api_(red, green, blue)
    
@bind(None, [POINTER(c_byte)])
def glColor3bv(v, _api_=None): 
    """glColor3bv(v)
    
        v : POINTER(c_byte)
    """
    return _api_(v)
    
@bind(None, [GLdouble, GLdouble, GLdouble])
def glColor3d(red, green, blue, _api_=None): 
    """glColor3d(red, green, blue)
    
        red : GLdouble
        green : GLdouble
        blue : GLdouble
    """
    return _api_(red, green, blue)
    
@bind(None, [POINTER(c_double)])
def glColor3dv(v, _api_=None): 
    """glColor3dv(v)
    
        v : POINTER(c_double)
    """
    return _api_(v)
    
@bind(None, [GLfloat, GLfloat, GLfloat])
def glColor3f(red, green, blue, _api_=None): 
    """glColor3f(red, green, blue)
    
        red : GLfloat
        green : GLfloat
        blue : GLfloat
    """
    return _api_(red, green, blue)
    
@bind(None, [POINTER(c_float)])
def glColor3fv(v, _api_=None): 
    """glColor3fv(v)
    
        v : POINTER(c_float)
    """
    return _api_(v)
    
@bind(None, [GLint, GLint, GLint])
def glColor3i(red, green, blue, _api_=None): 
    """glColor3i(red, green, blue)
    
        red : GLint
        green : GLint
        blue : GLint
    """
    return _api_(red, green, blue)
    
@bind(None, [POINTER(c_long)])
def glColor3iv(v, _api_=None): 
    """glColor3iv(v)
    
        v : POINTER(c_long)
    """
    return _api_(v)
    
@bind(None, [GLshort, GLshort, GLshort])
def glColor3s(red, green, blue, _api_=None): 
    """glColor3s(red, green, blue)
    
        red : GLshort
        green : GLshort
        blue : GLshort
    """
    return _api_(red, green, blue)
    
@bind(None, [POINTER(c_short)])
def glColor3sv(v, _api_=None): 
    """glColor3sv(v)
    
        v : POINTER(c_short)
    """
    return _api_(v)
    
@bind(None, [GLubyte, GLubyte, GLubyte])
def glColor3ub(red, green, blue, _api_=None): 
    """glColor3ub(red, green, blue)
    
        red : GLubyte
        green : GLubyte
        blue : GLubyte
    """
    return _api_(red, green, blue)
    
@bind(None, [POINTER(c_ubyte)])
def glColor3ubv(v, _api_=None): 
    """glColor3ubv(v)
    
        v : POINTER(c_ubyte)
    """
    return _api_(v)
    
@bind(None, [GLuint, GLuint, GLuint])
def glColor3ui(red, green, blue, _api_=None): 
    """glColor3ui(red, green, blue)
    
        red : GLuint
        green : GLuint
        blue : GLuint
    """
    return _api_(red, green, blue)
    
@bind(None, [POINTER(c_ulong)])
def glColor3uiv(v, _api_=None): 
    """glColor3uiv(v)
    
        v : POINTER(c_ulong)
    """
    return _api_(v)
    
@bind(None, [GLushort, GLushort, GLushort])
def glColor3us(red, green, blue, _api_=None): 
    """glColor3us(red, green, blue)
    
        red : GLushort
        green : GLushort
        blue : GLushort
    """
    return _api_(red, green, blue)
    
@bind(None, [POINTER(c_ushort)])
def glColor3usv(v, _api_=None): 
    """glColor3usv(v)
    
        v : POINTER(c_ushort)
    """
    return _api_(v)
    
@bind(None, [GLbyte, GLbyte, GLbyte, GLbyte])
def glColor4b(red, green, blue, alpha, _api_=None): 
    """glColor4b(red, green, blue, alpha)
    
        red : GLbyte
        green : GLbyte
        blue : GLbyte
        alpha : GLbyte
    """
    return _api_(red, green, blue, alpha)
    
@bind(None, [POINTER(c_byte)])
def glColor4bv(v, _api_=None): 
    """glColor4bv(v)
    
        v : POINTER(c_byte)
    """
    return _api_(v)
    
@bind(None, [GLdouble, GLdouble, GLdouble, GLdouble])
def glColor4d(red, green, blue, alpha, _api_=None): 
    """glColor4d(red, green, blue, alpha)
    
        red : GLdouble
        green : GLdouble
        blue : GLdouble
        alpha : GLdouble
    """
    return _api_(red, green, blue, alpha)
    
@bind(None, [POINTER(c_double)])
def glColor4dv(v, _api_=None): 
    """glColor4dv(v)
    
        v : POINTER(c_double)
    """
    return _api_(v)
    
@bind(None, [GLfloat, GLfloat, GLfloat, GLfloat])
def glColor4f(red, green, blue, alpha, _api_=None): 
    """glColor4f(red, green, blue, alpha)
    
        red : GLfloat
        green : GLfloat
        blue : GLfloat
        alpha : GLfloat
    """
    return _api_(red, green, blue, alpha)
    
@bind(None, [POINTER(c_float)])
def glColor4fv(v, _api_=None): 
    """glColor4fv(v)
    
        v : POINTER(c_float)
    """
    return _api_(v)
    
@bind(None, [GLint, GLint, GLint, GLint])
def glColor4i(red, green, blue, alpha, _api_=None): 
    """glColor4i(red, green, blue, alpha)
    
        red : GLint
        green : GLint
        blue : GLint
        alpha : GLint
    """
    return _api_(red, green, blue, alpha)
    
@bind(None, [POINTER(c_long)])
def glColor4iv(v, _api_=None): 
    """glColor4iv(v)
    
        v : POINTER(c_long)
    """
    return _api_(v)
    
@bind(None, [GLshort, GLshort, GLshort, GLshort])
def glColor4s(red, green, blue, alpha, _api_=None): 
    """glColor4s(red, green, blue, alpha)
    
        red : GLshort
        green : GLshort
        blue : GLshort
        alpha : GLshort
    """
    return _api_(red, green, blue, alpha)
    
@bind(None, [POINTER(c_short)])
def glColor4sv(v, _api_=None): 
    """glColor4sv(v)
    
        v : POINTER(c_short)
    """
    return _api_(v)
    
@bind(None, [GLubyte, GLubyte, GLubyte, GLubyte])
def glColor4ub(red, green, blue, alpha, _api_=None): 
    """glColor4ub(red, green, blue, alpha)
    
        red : GLubyte
        green : GLubyte
        blue : GLubyte
        alpha : GLubyte
    """
    return _api_(red, green, blue, alpha)
    
@bind(None, [POINTER(c_ubyte)])
def glColor4ubv(v, _api_=None): 
    """glColor4ubv(v)
    
        v : POINTER(c_ubyte)
    """
    return _api_(v)
    
@bind(None, [GLuint, GLuint, GLuint, GLuint])
def glColor4ui(red, green, blue, alpha, _api_=None): 
    """glColor4ui(red, green, blue, alpha)
    
        red : GLuint
        green : GLuint
        blue : GLuint
        alpha : GLuint
    """
    return _api_(red, green, blue, alpha)
    
@bind(None, [POINTER(c_ulong)])
def glColor4uiv(v, _api_=None): 
    """glColor4uiv(v)
    
        v : POINTER(c_ulong)
    """
    return _api_(v)
    
@bind(None, [GLushort, GLushort, GLushort, GLushort])
def glColor4us(red, green, blue, alpha, _api_=None): 
    """glColor4us(red, green, blue, alpha)
    
        red : GLushort
        green : GLushort
        blue : GLushort
        alpha : GLushort
    """
    return _api_(red, green, blue, alpha)
    
@bind(None, [POINTER(c_ushort)])
def glColor4usv(v, _api_=None): 
    """glColor4usv(v)
    
        v : POINTER(c_ushort)
    """
    return _api_(v)
    
@bind(None, [GLboolean, GLboolean, GLboolean, GLboolean])
def glColorMask(red, green, blue, alpha, _api_=None): 
    """glColorMask(red, green, blue, alpha)
    
        red : GLboolean
        green : GLboolean
        blue : GLboolean
        alpha : GLboolean
    """
    return _api_(red, green, blue, alpha)
    
@bind(None, [GLenum, GLenum])
def glColorMaterial(face, mode, _api_=None): 
    """glColorMaterial(face, mode)
    
        face : GLenum
        mode : GLenum
    """
    return _api_(face, mode)
    
@bind(None, [GLint, GLenum, GLsizei, c_void_p])
def glColorPointer(size, type, stride, pointer, _api_=None): 
    """glColorPointer(size, type, stride, pointer)
    
        size : GLint
        type : GLenum
        stride : GLsizei
        pointer : c_void_p
    """
    return _api_(size, type, stride, pointer)
    
@bind(None, [GLenum, GLsizei, GLsizei, GLenum, GLenum, c_void_p])
def glColorSubTable(target, start, count, format, type, data, _api_=None): 
    """glColorSubTable(target, start, count, format, type, data)
    
        target : GLenum
        start : GLsizei
        count : GLsizei
        format : GLenum
        type : GLenum
        data : c_void_p
    """
    return _api_(target, start, count, format, type, data)
    
@bind(None, [GLenum, GLenum, GLsizei, GLenum, GLenum, c_void_p])
def glColorTable(target, internalformat, width, format, type, table, _api_=None): 
    """glColorTable(target, internalformat, width, format, type, table)
    
        target : GLenum
        internalformat : GLenum
        width : GLsizei
        format : GLenum
        type : GLenum
        table : c_void_p
    """
    return _api_(target, internalformat, width, format, type, table)
    
@bind(None, [GLenum, GLenum, POINTER(c_float)])
def glColorTableParameterfv(target, pname, params, _api_=None): 
    """glColorTableParameterfv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLenum, POINTER(c_long)])
def glColorTableParameteriv(target, pname, params, _api_=None): 
    """glColorTableParameteriv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLenum, GLsizei, GLenum, GLenum, c_void_p])
def glConvolutionFilter1D(target, internalformat, width, format, type, image, _api_=None): 
    """glConvolutionFilter1D(target, internalformat, width, format, type, image)
    
        target : GLenum
        internalformat : GLenum
        width : GLsizei
        format : GLenum
        type : GLenum
        image : c_void_p
    """
    return _api_(target, internalformat, width, format, type, image)
    
@bind(None, [GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, c_void_p])
def glConvolutionFilter2D(target, internalformat, width, height, format, type, image, _api_=None): 
    """glConvolutionFilter2D(target, internalformat, width, height, format, type, image)
    
        target : GLenum
        internalformat : GLenum
        width : GLsizei
        height : GLsizei
        format : GLenum
        type : GLenum
        image : c_void_p
    """
    return _api_(target, internalformat, width, height, format, type, image)
    
@bind(None, [GLenum, GLenum, GLfloat])
def glConvolutionParameterf(target, pname, params, _api_=None): 
    """glConvolutionParameterf(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : GLfloat
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLenum, POINTER(c_float)])
def glConvolutionParameterfv(target, pname, params, _api_=None): 
    """glConvolutionParameterfv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLenum, GLint])
def glConvolutionParameteri(target, pname, params, _api_=None): 
    """glConvolutionParameteri(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : GLint
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLenum, POINTER(c_long)])
def glConvolutionParameteriv(target, pname, params, _api_=None): 
    """glConvolutionParameteriv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLsizei, GLint, GLint, GLsizei])
def glCopyColorSubTable(target, start, x, y, width, _api_=None): 
    """glCopyColorSubTable(target, start, x, y, width)
    
        target : GLenum
        start : GLsizei
        x : GLint
        y : GLint
        width : GLsizei
    """
    return _api_(target, start, x, y, width)
    
@bind(None, [GLenum, GLenum, GLint, GLint, GLsizei])
def glCopyColorTable(target, internalformat, x, y, width, _api_=None): 
    """glCopyColorTable(target, internalformat, x, y, width)
    
        target : GLenum
        internalformat : GLenum
        x : GLint
        y : GLint
        width : GLsizei
    """
    return _api_(target, internalformat, x, y, width)
    
@bind(None, [GLenum, GLenum, GLint, GLint, GLsizei])
def glCopyConvolutionFilter1D(target, internalformat, x, y, width, _api_=None): 
    """glCopyConvolutionFilter1D(target, internalformat, x, y, width)
    
        target : GLenum
        internalformat : GLenum
        x : GLint
        y : GLint
        width : GLsizei
    """
    return _api_(target, internalformat, x, y, width)
    
@bind(None, [GLenum, GLenum, GLint, GLint, GLsizei, GLsizei])
def glCopyConvolutionFilter2D(target, internalformat, x, y, width, height, _api_=None): 
    """glCopyConvolutionFilter2D(target, internalformat, x, y, width, height)
    
        target : GLenum
        internalformat : GLenum
        x : GLint
        y : GLint
        width : GLsizei
        height : GLsizei
    """
    return _api_(target, internalformat, x, y, width, height)
    
@bind(None, [GLint, GLint, GLsizei, GLsizei, GLenum])
def glCopyPixels(x, y, width, height, type, _api_=None): 
    """glCopyPixels(x, y, width, height, type)
    
        x : GLint
        y : GLint
        width : GLsizei
        height : GLsizei
        type : GLenum
    """
    return _api_(x, y, width, height, type)
    
@bind(None, [GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint])
def glCopyTexImage1D(target, level, internalformat, x, y, width, border, _api_=None): 
    """glCopyTexImage1D(target, level, internalformat, x, y, width, border)
    
        target : GLenum
        level : GLint
        internalformat : GLenum
        x : GLint
        y : GLint
        width : GLsizei
        border : GLint
    """
    return _api_(target, level, internalformat, x, y, width, border)
    
@bind(None, [GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint])
def glCopyTexImage2D(target, level, internalformat, x, y, width, height, border, _api_=None): 
    """glCopyTexImage2D(target, level, internalformat, x, y, width, height, border)
    
        target : GLenum
        level : GLint
        internalformat : GLenum
        x : GLint
        y : GLint
        width : GLsizei
        height : GLsizei
        border : GLint
    """
    return _api_(target, level, internalformat, x, y, width, height, border)
    
@bind(None, [GLenum, GLint, GLint, GLint, GLint, GLsizei])
def glCopyTexSubImage1D(target, level, xoffset, x, y, width, _api_=None): 
    """glCopyTexSubImage1D(target, level, xoffset, x, y, width)
    
        target : GLenum
        level : GLint
        xoffset : GLint
        x : GLint
        y : GLint
        width : GLsizei
    """
    return _api_(target, level, xoffset, x, y, width)
    
@bind(None, [GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei])
def glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height, _api_=None): 
    """glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height)
    
        target : GLenum
        level : GLint
        xoffset : GLint
        yoffset : GLint
        x : GLint
        y : GLint
        width : GLsizei
        height : GLsizei
    """
    return _api_(target, level, xoffset, yoffset, x, y, width, height)
    
@bind(None, [GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei])
def glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height, _api_=None): 
    """glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height)
    
        target : GLenum
        level : GLint
        xoffset : GLint
        yoffset : GLint
        zoffset : GLint
        x : GLint
        y : GLint
        width : GLsizei
        height : GLsizei
    """
    return _api_(target, level, xoffset, yoffset, zoffset, x, y, width, height)
    
@bind(None, [GLenum])
def glCullFace(mode, _api_=None): 
    """glCullFace(mode)
    
        mode : GLenum
    """
    return _api_(mode)
    
@bind(None, [GLuint, GLsizei])
def glDeleteLists(list, range, _api_=None): 
    """glDeleteLists(list, range)
    
        list : GLuint
        range : GLsizei
    """
    return _api_(list, range)
    
@bind(None, [GLsizei, POINTER(c_ulong)])
def glDeleteTextures(n, textures, _api_=None): 
    """glDeleteTextures(n, textures)
    
        n : GLsizei
        textures : POINTER(c_ulong)
    """
    return _api_(n, textures)
    
@bind(None, [GLenum])
def glDepthFunc(func, _api_=None): 
    """glDepthFunc(func)
    
        func : GLenum
    """
    return _api_(func)
    
@bind(None, [GLboolean])
def glDepthMask(flag, _api_=None): 
    """glDepthMask(flag)
    
        flag : GLboolean
    """
    return _api_(flag)
    
@bind(None, [GLclampd, GLclampd])
def glDepthRange(zNear, zFar, _api_=None): 
    """glDepthRange(zNear, zFar)
    
        zNear : GLclampd
        zFar : GLclampd
    """
    return _api_(zNear, zFar)
    
@bind(None, [GLenum])
def glDisable(cap, _api_=None): 
    """glDisable(cap)
    
        cap : GLenum
    """
    return _api_(cap)
    
@bind(None, [GLenum])
def glDisableClientState(array, _api_=None): 
    """glDisableClientState(array)
    
        array : GLenum
    """
    return _api_(array)
    
@bind(None, [GLenum, GLint, GLsizei])
def glDrawArrays(mode, first, count, _api_=None): 
    """glDrawArrays(mode, first, count)
    
        mode : GLenum
        first : GLint
        count : GLsizei
    """
    return _api_(mode, first, count)
    
@bind(None, [GLenum])
def glDrawBuffer(mode, _api_=None): 
    """glDrawBuffer(mode)
    
        mode : GLenum
    """
    return _api_(mode)
    
@bind(None, [GLenum, GLsizei, GLenum, c_void_p])
def glDrawElements(mode, count, type, indices, _api_=None): 
    """glDrawElements(mode, count, type, indices)
    
        mode : GLenum
        count : GLsizei
        type : GLenum
        indices : c_void_p
    """
    return _api_(mode, count, type, indices)
    
@bind(None, [GLsizei, GLsizei, GLenum, GLenum, c_void_p])
def glDrawPixels(width, height, format, type, pixels, _api_=None): 
    """glDrawPixels(width, height, format, type, pixels)
    
        width : GLsizei
        height : GLsizei
        format : GLenum
        type : GLenum
        pixels : c_void_p
    """
    return _api_(width, height, format, type, pixels)
    
@bind(None, [GLenum, GLuint, GLuint, GLsizei, GLenum, c_void_p])
def glDrawRangeElements(mode, start, end, count, type, indices, _api_=None): 
    """glDrawRangeElements(mode, start, end, count, type, indices)
    
        mode : GLenum
        start : GLuint
        end : GLuint
        count : GLsizei
        type : GLenum
        indices : c_void_p
    """
    return _api_(mode, start, end, count, type, indices)
    
@bind(None, [GLboolean])
def glEdgeFlag(flag, _api_=None): 
    """glEdgeFlag(flag)
    
        flag : GLboolean
    """
    return _api_(flag)
    
@bind(None, [GLsizei, c_void_p])
def glEdgeFlagPointer(stride, pointer, _api_=None): 
    """glEdgeFlagPointer(stride, pointer)
    
        stride : GLsizei
        pointer : c_void_p
    """
    return _api_(stride, pointer)
    
@bind(None, [POINTER(c_ubyte)])
def glEdgeFlagv(flag, _api_=None): 
    """glEdgeFlagv(flag)
    
        flag : POINTER(c_ubyte)
    """
    return _api_(flag)
    
@bind(None, [GLenum])
def glEnable(cap, _api_=None): 
    """glEnable(cap)
    
        cap : GLenum
    """
    return _api_(cap)
    
@bind(None, [GLenum])
def glEnableClientState(array, _api_=None): 
    """glEnableClientState(array)
    
        array : GLenum
    """
    return _api_(array)
    
@bind(None, [])
def glEnd(_api_=None): 
    """glEnd()
    
        
    """
    return _api_()
    
@bind(None, [])
def glEndList(_api_=None): 
    """glEndList()
    
        
    """
    return _api_()
    
@bind(None, [GLdouble])
def glEvalCoord1d(u, _api_=None): 
    """glEvalCoord1d(u)
    
        u : GLdouble
    """
    return _api_(u)
    
@bind(None, [POINTER(c_double)])
def glEvalCoord1dv(u, _api_=None): 
    """glEvalCoord1dv(u)
    
        u : POINTER(c_double)
    """
    return _api_(u)
    
@bind(None, [GLfloat])
def glEvalCoord1f(u, _api_=None): 
    """glEvalCoord1f(u)
    
        u : GLfloat
    """
    return _api_(u)
    
@bind(None, [POINTER(c_float)])
def glEvalCoord1fv(u, _api_=None): 
    """glEvalCoord1fv(u)
    
        u : POINTER(c_float)
    """
    return _api_(u)
    
@bind(None, [GLdouble, GLdouble])
def glEvalCoord2d(u, v, _api_=None): 
    """glEvalCoord2d(u, v)
    
        u : GLdouble
        v : GLdouble
    """
    return _api_(u, v)
    
@bind(None, [POINTER(c_double)])
def glEvalCoord2dv(u, _api_=None): 
    """glEvalCoord2dv(u)
    
        u : POINTER(c_double)
    """
    return _api_(u)
    
@bind(None, [GLfloat, GLfloat])
def glEvalCoord2f(u, v, _api_=None): 
    """glEvalCoord2f(u, v)
    
        u : GLfloat
        v : GLfloat
    """
    return _api_(u, v)
    
@bind(None, [POINTER(c_float)])
def glEvalCoord2fv(u, _api_=None): 
    """glEvalCoord2fv(u)
    
        u : POINTER(c_float)
    """
    return _api_(u)
    
@bind(None, [GLenum, GLint, GLint])
def glEvalMesh1(mode, i1, i2, _api_=None): 
    """glEvalMesh1(mode, i1, i2)
    
        mode : GLenum
        i1 : GLint
        i2 : GLint
    """
    return _api_(mode, i1, i2)
    
@bind(None, [GLenum, GLint, GLint, GLint, GLint])
def glEvalMesh2(mode, i1, i2, j1, j2, _api_=None): 
    """glEvalMesh2(mode, i1, i2, j1, j2)
    
        mode : GLenum
        i1 : GLint
        i2 : GLint
        j1 : GLint
        j2 : GLint
    """
    return _api_(mode, i1, i2, j1, j2)
    
@bind(None, [GLint])
def glEvalPoint1(i, _api_=None): 
    """glEvalPoint1(i)
    
        i : GLint
    """
    return _api_(i)
    
@bind(None, [GLint, GLint])
def glEvalPoint2(i, j, _api_=None): 
    """glEvalPoint2(i, j)
    
        i : GLint
        j : GLint
    """
    return _api_(i, j)
    
@bind(None, [GLsizei, GLenum, POINTER(c_float)])
def glFeedbackBuffer(size, type, buffer, _api_=None): 
    """glFeedbackBuffer(size, type, buffer)
    
        size : GLsizei
        type : GLenum
        buffer : POINTER(c_float)
    """
    return _api_(size, type, buffer)
    
@bind(None, [])
def glFinish(_api_=None): 
    """glFinish()
    
        
    """
    return _api_()
    
@bind(None, [])
def glFlush(_api_=None): 
    """glFlush()
    
        
    """
    return _api_()
    
@bind(None, [GLenum, GLfloat])
def glFogf(pname, param, _api_=None): 
    """glFogf(pname, param)
    
        pname : GLenum
        param : GLfloat
    """
    return _api_(pname, param)
    
@bind(None, [GLenum, POINTER(c_float)])
def glFogfv(pname, params, _api_=None): 
    """glFogfv(pname, params)
    
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(pname, params)
    
@bind(None, [GLenum, GLint])
def glFogi(pname, param, _api_=None): 
    """glFogi(pname, param)
    
        pname : GLenum
        param : GLint
    """
    return _api_(pname, param)
    
@bind(None, [GLenum, POINTER(c_long)])
def glFogiv(pname, params, _api_=None): 
    """glFogiv(pname, params)
    
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(pname, params)
    
@bind(None, [GLenum])
def glFrontFace(mode, _api_=None): 
    """glFrontFace(mode)
    
        mode : GLenum
    """
    return _api_(mode)
    
@bind(None, [GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble])
def glFrustum(left, right, bottom, top, zNear, zFar, _api_=None): 
    """glFrustum(left, right, bottom, top, zNear, zFar)
    
        left : GLdouble
        right : GLdouble
        bottom : GLdouble
        top : GLdouble
        zNear : GLdouble
        zFar : GLdouble
    """
    return _api_(left, right, bottom, top, zNear, zFar)
    
@bind(GLuint, [GLsizei])
def glGenLists(range, _api_=None): 
    """glGenLists(range)
    
        range : GLsizei
    """
    return _api_(range)
    
@bind(None, [GLsizei, POINTER(c_ulong)])
def glGenTextures(n, textures, _api_=None): 
    """glGenTextures(n, textures)
    
        n : GLsizei
        textures : POINTER(c_ulong)
    """
    return _api_(n, textures)
    
@bind(None, [GLenum, POINTER(c_ubyte)])
def glGetBooleanv(pname, params, _api_=None): 
    """glGetBooleanv(pname, params)
    
        pname : GLenum
        params : POINTER(c_ubyte)
    """
    return _api_(pname, params)
    
@bind(None, [GLenum, POINTER(c_double)])
def glGetClipPlane(plane, equation, _api_=None): 
    """glGetClipPlane(plane, equation)
    
        plane : GLenum
        equation : POINTER(c_double)
    """
    return _api_(plane, equation)
    
@bind(None, [GLenum, GLenum, GLenum, c_void_p])
def glGetColorTable(target, format, type, table, _api_=None): 
    """glGetColorTable(target, format, type, table)
    
        target : GLenum
        format : GLenum
        type : GLenum
        table : c_void_p
    """
    return _api_(target, format, type, table)
    
@bind(None, [GLenum, GLenum, POINTER(c_float)])
def glGetColorTableParameterfv(target, pname, params, _api_=None): 
    """glGetColorTableParameterfv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLenum, POINTER(c_long)])
def glGetColorTableParameteriv(target, pname, params, _api_=None): 
    """glGetColorTableParameteriv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLenum, GLenum, c_void_p])
def glGetConvolutionFilter(target, format, type, image, _api_=None): 
    """glGetConvolutionFilter(target, format, type, image)
    
        target : GLenum
        format : GLenum
        type : GLenum
        image : c_void_p
    """
    return _api_(target, format, type, image)
    
@bind(None, [GLenum, GLenum, POINTER(c_float)])
def glGetConvolutionParameterfv(target, pname, params, _api_=None): 
    """glGetConvolutionParameterfv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLenum, POINTER(c_long)])
def glGetConvolutionParameteriv(target, pname, params, _api_=None): 
    """glGetConvolutionParameteriv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, POINTER(c_double)])
def glGetDoublev(pname, params, _api_=None): 
    """glGetDoublev(pname, params)
    
        pname : GLenum
        params : POINTER(c_double)
    """
    return _api_(pname, params)
    
@bind(GLenum, [])
def glGetError(_api_=None): 
    """glGetError()
    
        
    """
    return _api_()
    
@bind(None, [GLenum, POINTER(c_float)])
def glGetFloatv(pname, params, _api_=None): 
    """glGetFloatv(pname, params)
    
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(pname, params)
    
@bind(None, [GLenum, GLboolean, GLenum, GLenum, c_void_p])
def glGetHistogram(target, reset, format, type, values, _api_=None): 
    """glGetHistogram(target, reset, format, type, values)
    
        target : GLenum
        reset : GLboolean
        format : GLenum
        type : GLenum
        values : c_void_p
    """
    return _api_(target, reset, format, type, values)
    
@bind(None, [GLenum, GLenum, POINTER(c_float)])
def glGetHistogramParameterfv(target, pname, params, _api_=None): 
    """glGetHistogramParameterfv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLenum, POINTER(c_long)])
def glGetHistogramParameteriv(target, pname, params, _api_=None): 
    """glGetHistogramParameteriv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, POINTER(c_long)])
def glGetIntegerv(pname, params, _api_=None): 
    """glGetIntegerv(pname, params)
    
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(pname, params)
    
@bind(None, [GLenum, GLenum, POINTER(c_float)])
def glGetLightfv(light, pname, params, _api_=None): 
    """glGetLightfv(light, pname, params)
    
        light : GLenum
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(light, pname, params)
    
@bind(None, [GLenum, GLenum, POINTER(c_long)])
def glGetLightiv(light, pname, params, _api_=None): 
    """glGetLightiv(light, pname, params)
    
        light : GLenum
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(light, pname, params)
    
@bind(None, [GLenum, GLenum, POINTER(c_double)])
def glGetMapdv(target, query, v, _api_=None): 
    """glGetMapdv(target, query, v)
    
        target : GLenum
        query : GLenum
        v : POINTER(c_double)
    """
    return _api_(target, query, v)
    
@bind(None, [GLenum, GLenum, POINTER(c_float)])
def glGetMapfv(target, query, v, _api_=None): 
    """glGetMapfv(target, query, v)
    
        target : GLenum
        query : GLenum
        v : POINTER(c_float)
    """
    return _api_(target, query, v)
    
@bind(None, [GLenum, GLenum, POINTER(c_long)])
def glGetMapiv(target, query, v, _api_=None): 
    """glGetMapiv(target, query, v)
    
        target : GLenum
        query : GLenum
        v : POINTER(c_long)
    """
    return _api_(target, query, v)
    
@bind(None, [GLenum, GLenum, POINTER(c_float)])
def glGetMaterialfv(face, pname, params, _api_=None): 
    """glGetMaterialfv(face, pname, params)
    
        face : GLenum
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(face, pname, params)
    
@bind(None, [GLenum, GLenum, POINTER(c_long)])
def glGetMaterialiv(face, pname, params, _api_=None): 
    """glGetMaterialiv(face, pname, params)
    
        face : GLenum
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(face, pname, params)
    
@bind(None, [GLenum, GLboolean, GLenum, GLenum, c_void_p])
def glGetMinmax(target, reset, format, type, values, _api_=None): 
    """glGetMinmax(target, reset, format, type, values)
    
        target : GLenum
        reset : GLboolean
        format : GLenum
        type : GLenum
        values : c_void_p
    """
    return _api_(target, reset, format, type, values)
    
@bind(None, [GLenum, GLenum, POINTER(c_float)])
def glGetMinmaxParameterfv(target, pname, params, _api_=None): 
    """glGetMinmaxParameterfv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLenum, POINTER(c_long)])
def glGetMinmaxParameteriv(target, pname, params, _api_=None): 
    """glGetMinmaxParameteriv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, POINTER(c_float)])
def glGetPixelMapfv(map, values, _api_=None): 
    """glGetPixelMapfv(map, values)
    
        map : GLenum
        values : POINTER(c_float)
    """
    return _api_(map, values)
    
@bind(None, [GLenum, POINTER(c_ulong)])
def glGetPixelMapuiv(map, values, _api_=None): 
    """glGetPixelMapuiv(map, values)
    
        map : GLenum
        values : POINTER(c_ulong)
    """
    return _api_(map, values)
    
@bind(None, [GLenum, POINTER(c_ushort)])
def glGetPixelMapusv(map, values, _api_=None): 
    """glGetPixelMapusv(map, values)
    
        map : GLenum
        values : POINTER(c_ushort)
    """
    return _api_(map, values)
    
@bind(None, [GLenum, c_void_p])
def glGetPointerv(pname, params, _api_=None): 
    """glGetPointerv(pname, params)
    
        pname : GLenum
        params : c_void_p
    """
    return _api_(pname, params)
    
@bind(None, [POINTER(c_ubyte)])
def glGetPolygonStipple(mask, _api_=None): 
    """glGetPolygonStipple(mask)
    
        mask : POINTER(c_ubyte)
    """
    return _api_(mask)
    
@bind(None, [GLenum, GLenum, GLenum, c_void_p, c_void_p, c_void_p])
def glGetSeparableFilter(target, format, type, row, column, span, _api_=None): 
    """glGetSeparableFilter(target, format, type, row, column, span)
    
        target : GLenum
        format : GLenum
        type : GLenum
        row : c_void_p
        column : c_void_p
        span : c_void_p
    """
    return _api_(target, format, type, row, column, span)
    
@bind(POINTER(c_ubyte), [GLenum])
def glGetString(name, _api_=None): 
    """glGetString(name)
    
        name : GLenum
    """
    return _api_(name)
    
@bind(None, [GLenum, GLenum, POINTER(c_float)])
def glGetTexEnvfv(target, pname, params, _api_=None): 
    """glGetTexEnvfv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLenum, POINTER(c_long)])
def glGetTexEnviv(target, pname, params, _api_=None): 
    """glGetTexEnviv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLenum, POINTER(c_double)])
def glGetTexGendv(coord, pname, params, _api_=None): 
    """glGetTexGendv(coord, pname, params)
    
        coord : GLenum
        pname : GLenum
        params : POINTER(c_double)
    """
    return _api_(coord, pname, params)
    
@bind(None, [GLenum, GLenum, POINTER(c_float)])
def glGetTexGenfv(coord, pname, params, _api_=None): 
    """glGetTexGenfv(coord, pname, params)
    
        coord : GLenum
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(coord, pname, params)
    
@bind(None, [GLenum, GLenum, POINTER(c_long)])
def glGetTexGeniv(coord, pname, params, _api_=None): 
    """glGetTexGeniv(coord, pname, params)
    
        coord : GLenum
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(coord, pname, params)
    
@bind(None, [GLenum, GLint, GLenum, GLenum, c_void_p])
def glGetTexImage(target, level, format, type, pixels, _api_=None): 
    """glGetTexImage(target, level, format, type, pixels)
    
        target : GLenum
        level : GLint
        format : GLenum
        type : GLenum
        pixels : c_void_p
    """
    return _api_(target, level, format, type, pixels)
    
@bind(None, [GLenum, GLint, GLenum, POINTER(c_float)])
def glGetTexLevelParameterfv(target, level, pname, params, _api_=None): 
    """glGetTexLevelParameterfv(target, level, pname, params)
    
        target : GLenum
        level : GLint
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(target, level, pname, params)
    
@bind(None, [GLenum, GLint, GLenum, POINTER(c_long)])
def glGetTexLevelParameteriv(target, level, pname, params, _api_=None): 
    """glGetTexLevelParameteriv(target, level, pname, params)
    
        target : GLenum
        level : GLint
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(target, level, pname, params)
    
@bind(None, [GLenum, GLenum, POINTER(c_float)])
def glGetTexParameterfv(target, pname, params, _api_=None): 
    """glGetTexParameterfv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLenum, POINTER(c_long)])
def glGetTexParameteriv(target, pname, params, _api_=None): 
    """glGetTexParameteriv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLenum])
def glHint(target, mode, _api_=None): 
    """glHint(target, mode)
    
        target : GLenum
        mode : GLenum
    """
    return _api_(target, mode)
    
@bind(None, [GLenum, GLsizei, GLenum, GLboolean])
def glHistogram(target, width, internalformat, sink, _api_=None): 
    """glHistogram(target, width, internalformat, sink)
    
        target : GLenum
        width : GLsizei
        internalformat : GLenum
        sink : GLboolean
    """
    return _api_(target, width, internalformat, sink)
    
@bind(None, [GLuint])
def glIndexMask(mask, _api_=None): 
    """glIndexMask(mask)
    
        mask : GLuint
    """
    return _api_(mask)
    
@bind(None, [GLenum, GLsizei, c_void_p])
def glIndexPointer(type, stride, pointer, _api_=None): 
    """glIndexPointer(type, stride, pointer)
    
        type : GLenum
        stride : GLsizei
        pointer : c_void_p
    """
    return _api_(type, stride, pointer)
    
@bind(None, [GLdouble])
def glIndexd(c, _api_=None): 
    """glIndexd(c)
    
        c : GLdouble
    """
    return _api_(c)
    
@bind(None, [POINTER(c_double)])
def glIndexdv(c, _api_=None): 
    """glIndexdv(c)
    
        c : POINTER(c_double)
    """
    return _api_(c)
    
@bind(None, [GLfloat])
def glIndexf(c, _api_=None): 
    """glIndexf(c)
    
        c : GLfloat
    """
    return _api_(c)
    
@bind(None, [POINTER(c_float)])
def glIndexfv(c, _api_=None): 
    """glIndexfv(c)
    
        c : POINTER(c_float)
    """
    return _api_(c)
    
@bind(None, [GLint])
def glIndexi(c, _api_=None): 
    """glIndexi(c)
    
        c : GLint
    """
    return _api_(c)
    
@bind(None, [POINTER(c_long)])
def glIndexiv(c, _api_=None): 
    """glIndexiv(c)
    
        c : POINTER(c_long)
    """
    return _api_(c)
    
@bind(None, [GLshort])
def glIndexs(c, _api_=None): 
    """glIndexs(c)
    
        c : GLshort
    """
    return _api_(c)
    
@bind(None, [POINTER(c_short)])
def glIndexsv(c, _api_=None): 
    """glIndexsv(c)
    
        c : POINTER(c_short)
    """
    return _api_(c)
    
@bind(None, [GLubyte])
def glIndexub(c, _api_=None): 
    """glIndexub(c)
    
        c : GLubyte
    """
    return _api_(c)
    
@bind(None, [POINTER(c_ubyte)])
def glIndexubv(c, _api_=None): 
    """glIndexubv(c)
    
        c : POINTER(c_ubyte)
    """
    return _api_(c)
    
@bind(None, [])
def glInitNames(_api_=None): 
    """glInitNames()
    
        
    """
    return _api_()
    
@bind(None, [GLenum, GLsizei, c_void_p])
def glInterleavedArrays(format, stride, pointer, _api_=None): 
    """glInterleavedArrays(format, stride, pointer)
    
        format : GLenum
        stride : GLsizei
        pointer : c_void_p
    """
    return _api_(format, stride, pointer)
    
@bind(GLboolean, [GLenum])
def glIsEnabled(cap, _api_=None): 
    """glIsEnabled(cap)
    
        cap : GLenum
    """
    return _api_(cap)
    
@bind(GLboolean, [GLuint])
def glIsList(list, _api_=None): 
    """glIsList(list)
    
        list : GLuint
    """
    return _api_(list)
    
@bind(GLboolean, [GLuint])
def glIsTexture(texture, _api_=None): 
    """glIsTexture(texture)
    
        texture : GLuint
    """
    return _api_(texture)
    
@bind(None, [GLenum, GLfloat])
def glLightModelf(pname, param, _api_=None): 
    """glLightModelf(pname, param)
    
        pname : GLenum
        param : GLfloat
    """
    return _api_(pname, param)
    
@bind(None, [GLenum, POINTER(c_float)])
def glLightModelfv(pname, params, _api_=None): 
    """glLightModelfv(pname, params)
    
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(pname, params)
    
@bind(None, [GLenum, GLint])
def glLightModeli(pname, param, _api_=None): 
    """glLightModeli(pname, param)
    
        pname : GLenum
        param : GLint
    """
    return _api_(pname, param)
    
@bind(None, [GLenum, POINTER(c_long)])
def glLightModeliv(pname, params, _api_=None): 
    """glLightModeliv(pname, params)
    
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(pname, params)
    
@bind(None, [GLenum, GLenum, GLfloat])
def glLightf(light, pname, param, _api_=None): 
    """glLightf(light, pname, param)
    
        light : GLenum
        pname : GLenum
        param : GLfloat
    """
    return _api_(light, pname, param)
    
@bind(None, [GLenum, GLenum, POINTER(c_float)])
def glLightfv(light, pname, params, _api_=None): 
    """glLightfv(light, pname, params)
    
        light : GLenum
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(light, pname, params)
    
@bind(None, [GLenum, GLenum, GLint])
def glLighti(light, pname, param, _api_=None): 
    """glLighti(light, pname, param)
    
        light : GLenum
        pname : GLenum
        param : GLint
    """
    return _api_(light, pname, param)
    
@bind(None, [GLenum, GLenum, POINTER(c_long)])
def glLightiv(light, pname, params, _api_=None): 
    """glLightiv(light, pname, params)
    
        light : GLenum
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(light, pname, params)
    
@bind(None, [GLint, GLushort])
def glLineStipple(factor, pattern, _api_=None): 
    """glLineStipple(factor, pattern)
    
        factor : GLint
        pattern : GLushort
    """
    return _api_(factor, pattern)
    
@bind(None, [GLfloat])
def glLineWidth(width, _api_=None): 
    """glLineWidth(width)
    
        width : GLfloat
    """
    return _api_(width)
    
@bind(None, [GLuint])
def glListBase(base, _api_=None): 
    """glListBase(base)
    
        base : GLuint
    """
    return _api_(base)
    
@bind(None, [])
def glLoadIdentity(_api_=None): 
    """glLoadIdentity()
    
        
    """
    return _api_()
    
@bind(None, [POINTER(c_double)])
def glLoadMatrixd(m, _api_=None): 
    """glLoadMatrixd(m)
    
        m : POINTER(c_double)
    """
    return _api_(m)
    
@bind(None, [POINTER(c_float)])
def glLoadMatrixf(m, _api_=None): 
    """glLoadMatrixf(m)
    
        m : POINTER(c_float)
    """
    return _api_(m)
    
@bind(None, [GLuint])
def glLoadName(name, _api_=None): 
    """glLoadName(name)
    
        name : GLuint
    """
    return _api_(name)
    
@bind(None, [GLenum])
def glLogicOp(opcode, _api_=None): 
    """glLogicOp(opcode)
    
        opcode : GLenum
    """
    return _api_(opcode)
    
@bind(None, [GLenum, GLdouble, GLdouble, GLint, GLint, POINTER(c_double)])
def glMap1d(target, u1, u2, stride, order, points, _api_=None): 
    """glMap1d(target, u1, u2, stride, order, points)
    
        target : GLenum
        u1 : GLdouble
        u2 : GLdouble
        stride : GLint
        order : GLint
        points : POINTER(c_double)
    """
    return _api_(target, u1, u2, stride, order, points)
    
@bind(None, [GLenum, GLfloat, GLfloat, GLint, GLint, POINTER(c_float)])
def glMap1f(target, u1, u2, stride, order, points, _api_=None): 
    """glMap1f(target, u1, u2, stride, order, points)
    
        target : GLenum
        u1 : GLfloat
        u2 : GLfloat
        stride : GLint
        order : GLint
        points : POINTER(c_float)
    """
    return _api_(target, u1, u2, stride, order, points)
    
@bind(None, [GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, POINTER(c_double)])
def glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points, _api_=None): 
    """glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points)
    
        target : GLenum
        u1 : GLdouble
        u2 : GLdouble
        ustride : GLint
        uorder : GLint
        v1 : GLdouble
        v2 : GLdouble
        vstride : GLint
        vorder : GLint
        points : POINTER(c_double)
    """
    return _api_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points)
    
@bind(None, [GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, POINTER(c_float)])
def glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points, _api_=None): 
    """glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points)
    
        target : GLenum
        u1 : GLfloat
        u2 : GLfloat
        ustride : GLint
        uorder : GLint
        v1 : GLfloat
        v2 : GLfloat
        vstride : GLint
        vorder : GLint
        points : POINTER(c_float)
    """
    return _api_(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points)
    
@bind(None, [GLint, GLdouble, GLdouble])
def glMapGrid1d(un, u1, u2, _api_=None): 
    """glMapGrid1d(un, u1, u2)
    
        un : GLint
        u1 : GLdouble
        u2 : GLdouble
    """
    return _api_(un, u1, u2)
    
@bind(None, [GLint, GLfloat, GLfloat])
def glMapGrid1f(un, u1, u2, _api_=None): 
    """glMapGrid1f(un, u1, u2)
    
        un : GLint
        u1 : GLfloat
        u2 : GLfloat
    """
    return _api_(un, u1, u2)
    
@bind(None, [GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble])
def glMapGrid2d(un, u1, u2, vn, v1, v2, _api_=None): 
    """glMapGrid2d(un, u1, u2, vn, v1, v2)
    
        un : GLint
        u1 : GLdouble
        u2 : GLdouble
        vn : GLint
        v1 : GLdouble
        v2 : GLdouble
    """
    return _api_(un, u1, u2, vn, v1, v2)
    
@bind(None, [GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat])
def glMapGrid2f(un, u1, u2, vn, v1, v2, _api_=None): 
    """glMapGrid2f(un, u1, u2, vn, v1, v2)
    
        un : GLint
        u1 : GLfloat
        u2 : GLfloat
        vn : GLint
        v1 : GLfloat
        v2 : GLfloat
    """
    return _api_(un, u1, u2, vn, v1, v2)
    
@bind(None, [GLenum, GLenum, GLfloat])
def glMaterialf(face, pname, param, _api_=None): 
    """glMaterialf(face, pname, param)
    
        face : GLenum
        pname : GLenum
        param : GLfloat
    """
    return _api_(face, pname, param)
    
@bind(None, [GLenum, GLenum, POINTER(c_float)])
def glMaterialfv(face, pname, params, _api_=None): 
    """glMaterialfv(face, pname, params)
    
        face : GLenum
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(face, pname, params)
    
@bind(None, [GLenum, GLenum, GLint])
def glMateriali(face, pname, param, _api_=None): 
    """glMateriali(face, pname, param)
    
        face : GLenum
        pname : GLenum
        param : GLint
    """
    return _api_(face, pname, param)
    
@bind(None, [GLenum, GLenum, POINTER(c_long)])
def glMaterialiv(face, pname, params, _api_=None): 
    """glMaterialiv(face, pname, params)
    
        face : GLenum
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(face, pname, params)
    
@bind(None, [GLenum])
def glMatrixMode(mode, _api_=None): 
    """glMatrixMode(mode)
    
        mode : GLenum
    """
    return _api_(mode)
    
@bind(None, [GLenum, GLenum, GLboolean])
def glMinmax(target, internalformat, sink, _api_=None): 
    """glMinmax(target, internalformat, sink)
    
        target : GLenum
        internalformat : GLenum
        sink : GLboolean
    """
    return _api_(target, internalformat, sink)
    
@bind(None, [POINTER(c_double)])
def glMultMatrixd(m, _api_=None): 
    """glMultMatrixd(m)
    
        m : POINTER(c_double)
    """
    return _api_(m)
    
@bind(None, [POINTER(c_float)])
def glMultMatrixf(m, _api_=None): 
    """glMultMatrixf(m)
    
        m : POINTER(c_float)
    """
    return _api_(m)
    
@bind(None, [GLuint, GLenum])
def glNewList(list, mode, _api_=None): 
    """glNewList(list, mode)
    
        list : GLuint
        mode : GLenum
    """
    return _api_(list, mode)
    
@bind(None, [GLbyte, GLbyte, GLbyte])
def glNormal3b(nx, ny, nz, _api_=None): 
    """glNormal3b(nx, ny, nz)
    
        nx : GLbyte
        ny : GLbyte
        nz : GLbyte
    """
    return _api_(nx, ny, nz)
    
@bind(None, [POINTER(c_byte)])
def glNormal3bv(v, _api_=None): 
    """glNormal3bv(v)
    
        v : POINTER(c_byte)
    """
    return _api_(v)
    
@bind(None, [GLdouble, GLdouble, GLdouble])
def glNormal3d(nx, ny, nz, _api_=None): 
    """glNormal3d(nx, ny, nz)
    
        nx : GLdouble
        ny : GLdouble
        nz : GLdouble
    """
    return _api_(nx, ny, nz)
    
@bind(None, [POINTER(c_double)])
def glNormal3dv(v, _api_=None): 
    """glNormal3dv(v)
    
        v : POINTER(c_double)
    """
    return _api_(v)
    
@bind(None, [GLfloat, GLfloat, GLfloat])
def glNormal3f(nx, ny, nz, _api_=None): 
    """glNormal3f(nx, ny, nz)
    
        nx : GLfloat
        ny : GLfloat
        nz : GLfloat
    """
    return _api_(nx, ny, nz)
    
@bind(None, [POINTER(c_float)])
def glNormal3fv(v, _api_=None): 
    """glNormal3fv(v)
    
        v : POINTER(c_float)
    """
    return _api_(v)
    
@bind(None, [GLint, GLint, GLint])
def glNormal3i(nx, ny, nz, _api_=None): 
    """glNormal3i(nx, ny, nz)
    
        nx : GLint
        ny : GLint
        nz : GLint
    """
    return _api_(nx, ny, nz)
    
@bind(None, [POINTER(c_long)])
def glNormal3iv(v, _api_=None): 
    """glNormal3iv(v)
    
        v : POINTER(c_long)
    """
    return _api_(v)
    
@bind(None, [GLshort, GLshort, GLshort])
def glNormal3s(nx, ny, nz, _api_=None): 
    """glNormal3s(nx, ny, nz)
    
        nx : GLshort
        ny : GLshort
        nz : GLshort
    """
    return _api_(nx, ny, nz)
    
@bind(None, [POINTER(c_short)])
def glNormal3sv(v, _api_=None): 
    """glNormal3sv(v)
    
        v : POINTER(c_short)
    """
    return _api_(v)
    
@bind(None, [GLenum, GLsizei, c_void_p])
def glNormalPointer(type, stride, pointer, _api_=None): 
    """glNormalPointer(type, stride, pointer)
    
        type : GLenum
        stride : GLsizei
        pointer : c_void_p
    """
    return _api_(type, stride, pointer)
    
@bind(None, [GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble])
def glOrtho(left, right, bottom, top, zNear, zFar, _api_=None): 
    """glOrtho(left, right, bottom, top, zNear, zFar)
    
        left : GLdouble
        right : GLdouble
        bottom : GLdouble
        top : GLdouble
        zNear : GLdouble
        zFar : GLdouble
    """
    return _api_(left, right, bottom, top, zNear, zFar)
    
@bind(None, [GLfloat])
def glPassThrough(token, _api_=None): 
    """glPassThrough(token)
    
        token : GLfloat
    """
    return _api_(token)
    
@bind(None, [GLenum, GLint, POINTER(c_float)])
def glPixelMapfv(map, mapsize, values, _api_=None): 
    """glPixelMapfv(map, mapsize, values)
    
        map : GLenum
        mapsize : GLint
        values : POINTER(c_float)
    """
    return _api_(map, mapsize, values)
    
@bind(None, [GLenum, GLint, POINTER(c_ulong)])
def glPixelMapuiv(map, mapsize, values, _api_=None): 
    """glPixelMapuiv(map, mapsize, values)
    
        map : GLenum
        mapsize : GLint
        values : POINTER(c_ulong)
    """
    return _api_(map, mapsize, values)
    
@bind(None, [GLenum, GLint, POINTER(c_ushort)])
def glPixelMapusv(map, mapsize, values, _api_=None): 
    """glPixelMapusv(map, mapsize, values)
    
        map : GLenum
        mapsize : GLint
        values : POINTER(c_ushort)
    """
    return _api_(map, mapsize, values)
    
@bind(None, [GLenum, GLfloat])
def glPixelStoref(pname, param, _api_=None): 
    """glPixelStoref(pname, param)
    
        pname : GLenum
        param : GLfloat
    """
    return _api_(pname, param)
    
@bind(None, [GLenum, GLint])
def glPixelStorei(pname, param, _api_=None): 
    """glPixelStorei(pname, param)
    
        pname : GLenum
        param : GLint
    """
    return _api_(pname, param)
    
@bind(None, [GLenum, GLfloat])
def glPixelTransferf(pname, param, _api_=None): 
    """glPixelTransferf(pname, param)
    
        pname : GLenum
        param : GLfloat
    """
    return _api_(pname, param)
    
@bind(None, [GLenum, GLint])
def glPixelTransferi(pname, param, _api_=None): 
    """glPixelTransferi(pname, param)
    
        pname : GLenum
        param : GLint
    """
    return _api_(pname, param)
    
@bind(None, [GLfloat, GLfloat])
def glPixelZoom(xfactor, yfactor, _api_=None): 
    """glPixelZoom(xfactor, yfactor)
    
        xfactor : GLfloat
        yfactor : GLfloat
    """
    return _api_(xfactor, yfactor)
    
@bind(None, [GLfloat])
def glPointSize(size, _api_=None): 
    """glPointSize(size)
    
        size : GLfloat
    """
    return _api_(size)
    
@bind(None, [GLenum, GLenum])
def glPolygonMode(face, mode, _api_=None): 
    """glPolygonMode(face, mode)
    
        face : GLenum
        mode : GLenum
    """
    return _api_(face, mode)
    
@bind(None, [GLfloat, GLfloat])
def glPolygonOffset(factor, units, _api_=None): 
    """glPolygonOffset(factor, units)
    
        factor : GLfloat
        units : GLfloat
    """
    return _api_(factor, units)
    
@bind(None, [POINTER(c_ubyte)])
def glPolygonStipple(mask, _api_=None): 
    """glPolygonStipple(mask)
    
        mask : POINTER(c_ubyte)
    """
    return _api_(mask)
    
@bind(None, [])
def glPopAttrib(_api_=None): 
    """glPopAttrib()
    
        
    """
    return _api_()
    
@bind(None, [])
def glPopClientAttrib(_api_=None): 
    """glPopClientAttrib()
    
        
    """
    return _api_()
    
@bind(None, [])
def glPopMatrix(_api_=None): 
    """glPopMatrix()
    
        
    """
    return _api_()
    
@bind(None, [])
def glPopName(_api_=None): 
    """glPopName()
    
        
    """
    return _api_()
    
@bind(None, [GLsizei, POINTER(c_ulong), POINTER(c_float)])
def glPrioritizeTextures(n, textures, priorities, _api_=None): 
    """glPrioritizeTextures(n, textures, priorities)
    
        n : GLsizei
        textures : POINTER(c_ulong)
        priorities : POINTER(c_float)
    """
    return _api_(n, textures, priorities)
    
@bind(None, [GLbitfield])
def glPushAttrib(mask, _api_=None): 
    """glPushAttrib(mask)
    
        mask : GLbitfield
    """
    return _api_(mask)
    
@bind(None, [GLbitfield])
def glPushClientAttrib(mask, _api_=None): 
    """glPushClientAttrib(mask)
    
        mask : GLbitfield
    """
    return _api_(mask)
    
@bind(None, [])
def glPushMatrix(_api_=None): 
    """glPushMatrix()
    
        
    """
    return _api_()
    
@bind(None, [GLuint])
def glPushName(name, _api_=None): 
    """glPushName(name)
    
        name : GLuint
    """
    return _api_(name)
    
@bind(None, [GLdouble, GLdouble])
def glRasterPos2d(x, y, _api_=None): 
    """glRasterPos2d(x, y)
    
        x : GLdouble
        y : GLdouble
    """
    return _api_(x, y)
    
@bind(None, [POINTER(c_double)])
def glRasterPos2dv(v, _api_=None): 
    """glRasterPos2dv(v)
    
        v : POINTER(c_double)
    """
    return _api_(v)
    
@bind(None, [GLfloat, GLfloat])
def glRasterPos2f(x, y, _api_=None): 
    """glRasterPos2f(x, y)
    
        x : GLfloat
        y : GLfloat
    """
    return _api_(x, y)
    
@bind(None, [POINTER(c_float)])
def glRasterPos2fv(v, _api_=None): 
    """glRasterPos2fv(v)
    
        v : POINTER(c_float)
    """
    return _api_(v)
    
@bind(None, [GLint, GLint])
def glRasterPos2i(x, y, _api_=None): 
    """glRasterPos2i(x, y)
    
        x : GLint
        y : GLint
    """
    return _api_(x, y)
    
@bind(None, [POINTER(c_long)])
def glRasterPos2iv(v, _api_=None): 
    """glRasterPos2iv(v)
    
        v : POINTER(c_long)
    """
    return _api_(v)
    
@bind(None, [GLshort, GLshort])
def glRasterPos2s(x, y, _api_=None): 
    """glRasterPos2s(x, y)
    
        x : GLshort
        y : GLshort
    """
    return _api_(x, y)
    
@bind(None, [POINTER(c_short)])
def glRasterPos2sv(v, _api_=None): 
    """glRasterPos2sv(v)
    
        v : POINTER(c_short)
    """
    return _api_(v)
    
@bind(None, [GLdouble, GLdouble, GLdouble])
def glRasterPos3d(x, y, z, _api_=None): 
    """glRasterPos3d(x, y, z)
    
        x : GLdouble
        y : GLdouble
        z : GLdouble
    """
    return _api_(x, y, z)
    
@bind(None, [POINTER(c_double)])
def glRasterPos3dv(v, _api_=None): 
    """glRasterPos3dv(v)
    
        v : POINTER(c_double)
    """
    return _api_(v)
    
@bind(None, [GLfloat, GLfloat, GLfloat])
def glRasterPos3f(x, y, z, _api_=None): 
    """glRasterPos3f(x, y, z)
    
        x : GLfloat
        y : GLfloat
        z : GLfloat
    """
    return _api_(x, y, z)
    
@bind(None, [POINTER(c_float)])
def glRasterPos3fv(v, _api_=None): 
    """glRasterPos3fv(v)
    
        v : POINTER(c_float)
    """
    return _api_(v)
    
@bind(None, [GLint, GLint, GLint])
def glRasterPos3i(x, y, z, _api_=None): 
    """glRasterPos3i(x, y, z)
    
        x : GLint
        y : GLint
        z : GLint
    """
    return _api_(x, y, z)
    
@bind(None, [POINTER(c_long)])
def glRasterPos3iv(v, _api_=None): 
    """glRasterPos3iv(v)
    
        v : POINTER(c_long)
    """
    return _api_(v)
    
@bind(None, [GLshort, GLshort, GLshort])
def glRasterPos3s(x, y, z, _api_=None): 
    """glRasterPos3s(x, y, z)
    
        x : GLshort
        y : GLshort
        z : GLshort
    """
    return _api_(x, y, z)
    
@bind(None, [POINTER(c_short)])
def glRasterPos3sv(v, _api_=None): 
    """glRasterPos3sv(v)
    
        v : POINTER(c_short)
    """
    return _api_(v)
    
@bind(None, [GLdouble, GLdouble, GLdouble, GLdouble])
def glRasterPos4d(x, y, z, w, _api_=None): 
    """glRasterPos4d(x, y, z, w)
    
        x : GLdouble
        y : GLdouble
        z : GLdouble
        w : GLdouble
    """
    return _api_(x, y, z, w)
    
@bind(None, [POINTER(c_double)])
def glRasterPos4dv(v, _api_=None): 
    """glRasterPos4dv(v)
    
        v : POINTER(c_double)
    """
    return _api_(v)
    
@bind(None, [GLfloat, GLfloat, GLfloat, GLfloat])
def glRasterPos4f(x, y, z, w, _api_=None): 
    """glRasterPos4f(x, y, z, w)
    
        x : GLfloat
        y : GLfloat
        z : GLfloat
        w : GLfloat
    """
    return _api_(x, y, z, w)
    
@bind(None, [POINTER(c_float)])
def glRasterPos4fv(v, _api_=None): 
    """glRasterPos4fv(v)
    
        v : POINTER(c_float)
    """
    return _api_(v)
    
@bind(None, [GLint, GLint, GLint, GLint])
def glRasterPos4i(x, y, z, w, _api_=None): 
    """glRasterPos4i(x, y, z, w)
    
        x : GLint
        y : GLint
        z : GLint
        w : GLint
    """
    return _api_(x, y, z, w)
    
@bind(None, [POINTER(c_long)])
def glRasterPos4iv(v, _api_=None): 
    """glRasterPos4iv(v)
    
        v : POINTER(c_long)
    """
    return _api_(v)
    
@bind(None, [GLshort, GLshort, GLshort, GLshort])
def glRasterPos4s(x, y, z, w, _api_=None): 
    """glRasterPos4s(x, y, z, w)
    
        x : GLshort
        y : GLshort
        z : GLshort
        w : GLshort
    """
    return _api_(x, y, z, w)
    
@bind(None, [POINTER(c_short)])
def glRasterPos4sv(v, _api_=None): 
    """glRasterPos4sv(v)
    
        v : POINTER(c_short)
    """
    return _api_(v)
    
@bind(None, [GLenum])
def glReadBuffer(mode, _api_=None): 
    """glReadBuffer(mode)
    
        mode : GLenum
    """
    return _api_(mode)
    
@bind(None, [GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, c_void_p])
def glReadPixels(x, y, width, height, format, type, pixels, _api_=None): 
    """glReadPixels(x, y, width, height, format, type, pixels)
    
        x : GLint
        y : GLint
        width : GLsizei
        height : GLsizei
        format : GLenum
        type : GLenum
        pixels : c_void_p
    """
    return _api_(x, y, width, height, format, type, pixels)
    
@bind(None, [GLdouble, GLdouble, GLdouble, GLdouble])
def glRectd(x1, y1, x2, y2, _api_=None): 
    """glRectd(x1, y1, x2, y2)
    
        x1 : GLdouble
        y1 : GLdouble
        x2 : GLdouble
        y2 : GLdouble
    """
    return _api_(x1, y1, x2, y2)
    
@bind(None, [POINTER(c_double), POINTER(c_double)])
def glRectdv(v1, v2, _api_=None): 
    """glRectdv(v1, v2)
    
        v1 : POINTER(c_double)
        v2 : POINTER(c_double)
    """
    return _api_(v1, v2)
    
@bind(None, [GLfloat, GLfloat, GLfloat, GLfloat])
def glRectf(x1, y1, x2, y2, _api_=None): 
    """glRectf(x1, y1, x2, y2)
    
        x1 : GLfloat
        y1 : GLfloat
        x2 : GLfloat
        y2 : GLfloat
    """
    return _api_(x1, y1, x2, y2)
    
@bind(None, [POINTER(c_float), POINTER(c_float)])
def glRectfv(v1, v2, _api_=None): 
    """glRectfv(v1, v2)
    
        v1 : POINTER(c_float)
        v2 : POINTER(c_float)
    """
    return _api_(v1, v2)
    
@bind(None, [GLint, GLint, GLint, GLint])
def glRecti(x1, y1, x2, y2, _api_=None): 
    """glRecti(x1, y1, x2, y2)
    
        x1 : GLint
        y1 : GLint
        x2 : GLint
        y2 : GLint
    """
    return _api_(x1, y1, x2, y2)
    
@bind(None, [POINTER(c_long), POINTER(c_long)])
def glRectiv(v1, v2, _api_=None): 
    """glRectiv(v1, v2)
    
        v1 : POINTER(c_long)
        v2 : POINTER(c_long)
    """
    return _api_(v1, v2)
    
@bind(None, [GLshort, GLshort, GLshort, GLshort])
def glRects(x1, y1, x2, y2, _api_=None): 
    """glRects(x1, y1, x2, y2)
    
        x1 : GLshort
        y1 : GLshort
        x2 : GLshort
        y2 : GLshort
    """
    return _api_(x1, y1, x2, y2)
    
@bind(None, [POINTER(c_short), POINTER(c_short)])
def glRectsv(v1, v2, _api_=None): 
    """glRectsv(v1, v2)
    
        v1 : POINTER(c_short)
        v2 : POINTER(c_short)
    """
    return _api_(v1, v2)
    
@bind(GLint, [GLenum])
def glRenderMode(mode, _api_=None): 
    """glRenderMode(mode)
    
        mode : GLenum
    """
    return _api_(mode)
    
@bind(None, [GLenum])
def glResetHistogram(target, _api_=None): 
    """glResetHistogram(target)
    
        target : GLenum
    """
    return _api_(target)
    
@bind(None, [GLenum])
def glResetMinmax(target, _api_=None): 
    """glResetMinmax(target)
    
        target : GLenum
    """
    return _api_(target)
    
@bind(None, [GLdouble, GLdouble, GLdouble, GLdouble])
def glRotated(angle, x, y, z, _api_=None): 
    """glRotated(angle, x, y, z)
    
        angle : GLdouble
        x : GLdouble
        y : GLdouble
        z : GLdouble
    """
    return _api_(angle, x, y, z)
    
@bind(None, [GLfloat, GLfloat, GLfloat, GLfloat])
def glRotatef(angle, x, y, z, _api_=None): 
    """glRotatef(angle, x, y, z)
    
        angle : GLfloat
        x : GLfloat
        y : GLfloat
        z : GLfloat
    """
    return _api_(angle, x, y, z)
    
@bind(None, [GLdouble, GLdouble, GLdouble])
def glScaled(x, y, z, _api_=None): 
    """glScaled(x, y, z)
    
        x : GLdouble
        y : GLdouble
        z : GLdouble
    """
    return _api_(x, y, z)
    
@bind(None, [GLfloat, GLfloat, GLfloat])
def glScalef(x, y, z, _api_=None): 
    """glScalef(x, y, z)
    
        x : GLfloat
        y : GLfloat
        z : GLfloat
    """
    return _api_(x, y, z)
    
@bind(None, [GLint, GLint, GLsizei, GLsizei])
def glScissor(x, y, width, height, _api_=None): 
    """glScissor(x, y, width, height)
    
        x : GLint
        y : GLint
        width : GLsizei
        height : GLsizei
    """
    return _api_(x, y, width, height)
    
@bind(None, [GLsizei, POINTER(c_ulong)])
def glSelectBuffer(size, buffer, _api_=None): 
    """glSelectBuffer(size, buffer)
    
        size : GLsizei
        buffer : POINTER(c_ulong)
    """
    return _api_(size, buffer)
    
@bind(None, [GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, c_void_p, c_void_p])
def glSeparableFilter2D(target, internalformat, width, height, format, type, row, column, _api_=None): 
    """glSeparableFilter2D(target, internalformat, width, height, format, type, row, column)
    
        target : GLenum
        internalformat : GLenum
        width : GLsizei
        height : GLsizei
        format : GLenum
        type : GLenum
        row : c_void_p
        column : c_void_p
    """
    return _api_(target, internalformat, width, height, format, type, row, column)
    
@bind(None, [GLenum])
def glShadeModel(mode, _api_=None): 
    """glShadeModel(mode)
    
        mode : GLenum
    """
    return _api_(mode)
    
@bind(None, [GLenum, GLint, GLuint])
def glStencilFunc(func, ref, mask, _api_=None): 
    """glStencilFunc(func, ref, mask)
    
        func : GLenum
        ref : GLint
        mask : GLuint
    """
    return _api_(func, ref, mask)
    
@bind(None, [GLuint])
def glStencilMask(mask, _api_=None): 
    """glStencilMask(mask)
    
        mask : GLuint
    """
    return _api_(mask)
    
@bind(None, [GLenum, GLenum, GLenum])
def glStencilOp(fail, zfail, zpass, _api_=None): 
    """glStencilOp(fail, zfail, zpass)
    
        fail : GLenum
        zfail : GLenum
        zpass : GLenum
    """
    return _api_(fail, zfail, zpass)
    
@bind(None, [GLdouble])
def glTexCoord1d(s, _api_=None): 
    """glTexCoord1d(s)
    
        s : GLdouble
    """
    return _api_(s)
    
@bind(None, [POINTER(c_double)])
def glTexCoord1dv(v, _api_=None): 
    """glTexCoord1dv(v)
    
        v : POINTER(c_double)
    """
    return _api_(v)
    
@bind(None, [GLfloat])
def glTexCoord1f(s, _api_=None): 
    """glTexCoord1f(s)
    
        s : GLfloat
    """
    return _api_(s)
    
@bind(None, [POINTER(c_float)])
def glTexCoord1fv(v, _api_=None): 
    """glTexCoord1fv(v)
    
        v : POINTER(c_float)
    """
    return _api_(v)
    
@bind(None, [GLint])
def glTexCoord1i(s, _api_=None): 
    """glTexCoord1i(s)
    
        s : GLint
    """
    return _api_(s)
    
@bind(None, [POINTER(c_long)])
def glTexCoord1iv(v, _api_=None): 
    """glTexCoord1iv(v)
    
        v : POINTER(c_long)
    """
    return _api_(v)
    
@bind(None, [GLshort])
def glTexCoord1s(s, _api_=None): 
    """glTexCoord1s(s)
    
        s : GLshort
    """
    return _api_(s)
    
@bind(None, [POINTER(c_short)])
def glTexCoord1sv(v, _api_=None): 
    """glTexCoord1sv(v)
    
        v : POINTER(c_short)
    """
    return _api_(v)
    
@bind(None, [GLdouble, GLdouble])
def glTexCoord2d(s, t, _api_=None): 
    """glTexCoord2d(s, t)
    
        s : GLdouble
        t : GLdouble
    """
    return _api_(s, t)
    
@bind(None, [POINTER(c_double)])
def glTexCoord2dv(v, _api_=None): 
    """glTexCoord2dv(v)
    
        v : POINTER(c_double)
    """
    return _api_(v)
    
@bind(None, [GLfloat, GLfloat])
def glTexCoord2f(s, t, _api_=None): 
    """glTexCoord2f(s, t)
    
        s : GLfloat
        t : GLfloat
    """
    return _api_(s, t)
    
@bind(None, [POINTER(c_float)])
def glTexCoord2fv(v, _api_=None): 
    """glTexCoord2fv(v)
    
        v : POINTER(c_float)
    """
    return _api_(v)
    
@bind(None, [GLint, GLint])
def glTexCoord2i(s, t, _api_=None): 
    """glTexCoord2i(s, t)
    
        s : GLint
        t : GLint
    """
    return _api_(s, t)
    
@bind(None, [POINTER(c_long)])
def glTexCoord2iv(v, _api_=None): 
    """glTexCoord2iv(v)
    
        v : POINTER(c_long)
    """
    return _api_(v)
    
@bind(None, [GLshort, GLshort])
def glTexCoord2s(s, t, _api_=None): 
    """glTexCoord2s(s, t)
    
        s : GLshort
        t : GLshort
    """
    return _api_(s, t)
    
@bind(None, [POINTER(c_short)])
def glTexCoord2sv(v, _api_=None): 
    """glTexCoord2sv(v)
    
        v : POINTER(c_short)
    """
    return _api_(v)
    
@bind(None, [GLdouble, GLdouble, GLdouble])
def glTexCoord3d(s, t, r, _api_=None): 
    """glTexCoord3d(s, t, r)
    
        s : GLdouble
        t : GLdouble
        r : GLdouble
    """
    return _api_(s, t, r)
    
@bind(None, [POINTER(c_double)])
def glTexCoord3dv(v, _api_=None): 
    """glTexCoord3dv(v)
    
        v : POINTER(c_double)
    """
    return _api_(v)
    
@bind(None, [GLfloat, GLfloat, GLfloat])
def glTexCoord3f(s, t, r, _api_=None): 
    """glTexCoord3f(s, t, r)
    
        s : GLfloat
        t : GLfloat
        r : GLfloat
    """
    return _api_(s, t, r)
    
@bind(None, [POINTER(c_float)])
def glTexCoord3fv(v, _api_=None): 
    """glTexCoord3fv(v)
    
        v : POINTER(c_float)
    """
    return _api_(v)
    
@bind(None, [GLint, GLint, GLint])
def glTexCoord3i(s, t, r, _api_=None): 
    """glTexCoord3i(s, t, r)
    
        s : GLint
        t : GLint
        r : GLint
    """
    return _api_(s, t, r)
    
@bind(None, [POINTER(c_long)])
def glTexCoord3iv(v, _api_=None): 
    """glTexCoord3iv(v)
    
        v : POINTER(c_long)
    """
    return _api_(v)
    
@bind(None, [GLshort, GLshort, GLshort])
def glTexCoord3s(s, t, r, _api_=None): 
    """glTexCoord3s(s, t, r)
    
        s : GLshort
        t : GLshort
        r : GLshort
    """
    return _api_(s, t, r)
    
@bind(None, [POINTER(c_short)])
def glTexCoord3sv(v, _api_=None): 
    """glTexCoord3sv(v)
    
        v : POINTER(c_short)
    """
    return _api_(v)
    
@bind(None, [GLdouble, GLdouble, GLdouble, GLdouble])
def glTexCoord4d(s, t, r, q, _api_=None): 
    """glTexCoord4d(s, t, r, q)
    
        s : GLdouble
        t : GLdouble
        r : GLdouble
        q : GLdouble
    """
    return _api_(s, t, r, q)
    
@bind(None, [POINTER(c_double)])
def glTexCoord4dv(v, _api_=None): 
    """glTexCoord4dv(v)
    
        v : POINTER(c_double)
    """
    return _api_(v)
    
@bind(None, [GLfloat, GLfloat, GLfloat, GLfloat])
def glTexCoord4f(s, t, r, q, _api_=None): 
    """glTexCoord4f(s, t, r, q)
    
        s : GLfloat
        t : GLfloat
        r : GLfloat
        q : GLfloat
    """
    return _api_(s, t, r, q)
    
@bind(None, [POINTER(c_float)])
def glTexCoord4fv(v, _api_=None): 
    """glTexCoord4fv(v)
    
        v : POINTER(c_float)
    """
    return _api_(v)
    
@bind(None, [GLint, GLint, GLint, GLint])
def glTexCoord4i(s, t, r, q, _api_=None): 
    """glTexCoord4i(s, t, r, q)
    
        s : GLint
        t : GLint
        r : GLint
        q : GLint
    """
    return _api_(s, t, r, q)
    
@bind(None, [POINTER(c_long)])
def glTexCoord4iv(v, _api_=None): 
    """glTexCoord4iv(v)
    
        v : POINTER(c_long)
    """
    return _api_(v)
    
@bind(None, [GLshort, GLshort, GLshort, GLshort])
def glTexCoord4s(s, t, r, q, _api_=None): 
    """glTexCoord4s(s, t, r, q)
    
        s : GLshort
        t : GLshort
        r : GLshort
        q : GLshort
    """
    return _api_(s, t, r, q)
    
@bind(None, [POINTER(c_short)])
def glTexCoord4sv(v, _api_=None): 
    """glTexCoord4sv(v)
    
        v : POINTER(c_short)
    """
    return _api_(v)
    
@bind(None, [GLint, GLenum, GLsizei, c_void_p])
def glTexCoordPointer(size, type, stride, pointer, _api_=None): 
    """glTexCoordPointer(size, type, stride, pointer)
    
        size : GLint
        type : GLenum
        stride : GLsizei
        pointer : c_void_p
    """
    return _api_(size, type, stride, pointer)
    
@bind(None, [GLenum, GLenum, GLfloat])
def glTexEnvf(target, pname, param, _api_=None): 
    """glTexEnvf(target, pname, param)
    
        target : GLenum
        pname : GLenum
        param : GLfloat
    """
    return _api_(target, pname, param)
    
@bind(None, [GLenum, GLenum, POINTER(c_float)])
def glTexEnvfv(target, pname, params, _api_=None): 
    """glTexEnvfv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLenum, GLint])
def glTexEnvi(target, pname, param, _api_=None): 
    """glTexEnvi(target, pname, param)
    
        target : GLenum
        pname : GLenum
        param : GLint
    """
    return _api_(target, pname, param)
    
@bind(None, [GLenum, GLenum, POINTER(c_long)])
def glTexEnviv(target, pname, params, _api_=None): 
    """glTexEnviv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLenum, GLdouble])
def glTexGend(coord, pname, param, _api_=None): 
    """glTexGend(coord, pname, param)
    
        coord : GLenum
        pname : GLenum
        param : GLdouble
    """
    return _api_(coord, pname, param)
    
@bind(None, [GLenum, GLenum, POINTER(c_double)])
def glTexGendv(coord, pname, params, _api_=None): 
    """glTexGendv(coord, pname, params)
    
        coord : GLenum
        pname : GLenum
        params : POINTER(c_double)
    """
    return _api_(coord, pname, params)
    
@bind(None, [GLenum, GLenum, GLfloat])
def glTexGenf(coord, pname, param, _api_=None): 
    """glTexGenf(coord, pname, param)
    
        coord : GLenum
        pname : GLenum
        param : GLfloat
    """
    return _api_(coord, pname, param)
    
@bind(None, [GLenum, GLenum, POINTER(c_float)])
def glTexGenfv(coord, pname, params, _api_=None): 
    """glTexGenfv(coord, pname, params)
    
        coord : GLenum
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(coord, pname, params)
    
@bind(None, [GLenum, GLenum, GLint])
def glTexGeni(coord, pname, param, _api_=None): 
    """glTexGeni(coord, pname, param)
    
        coord : GLenum
        pname : GLenum
        param : GLint
    """
    return _api_(coord, pname, param)
    
@bind(None, [GLenum, GLenum, POINTER(c_long)])
def glTexGeniv(coord, pname, params, _api_=None): 
    """glTexGeniv(coord, pname, params)
    
        coord : GLenum
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(coord, pname, params)
    
@bind(None, [GLenum, GLint, GLenum, GLsizei, GLint, GLenum, GLenum, c_void_p])
def glTexImage1D(target, level, internalformat, width, border, format, type, pixels, _api_=None): 
    """glTexImage1D(target, level, internalformat, width, border, format, type, pixels)
    
        target : GLenum
        level : GLint
        internalformat : GLenum
        width : GLsizei
        border : GLint
        format : GLenum
        type : GLenum
        pixels : c_void_p
    """
    return _api_(target, level, internalformat, width, border, format, type, pixels)
    
@bind(None, [GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLenum, GLenum, c_void_p])
def glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels, _api_=None): 
    """glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels)
    
        target : GLenum
        level : GLint
        internalformat : GLenum
        width : GLsizei
        height : GLsizei
        border : GLint
        format : GLenum
        type : GLenum
        pixels : c_void_p
    """
    return _api_(target, level, internalformat, width, height, border, format, type, pixels)
    
@bind(None, [GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, c_void_p])
def glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels, _api_=None): 
    """glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels)
    
        target : GLenum
        level : GLint
        internalformat : GLenum
        width : GLsizei
        height : GLsizei
        depth : GLsizei
        border : GLint
        format : GLenum
        type : GLenum
        pixels : c_void_p
    """
    return _api_(target, level, internalformat, width, height, depth, border, format, type, pixels)
    
@bind(None, [GLenum, GLenum, GLfloat])
def glTexParameterf(target, pname, param, _api_=None): 
    """glTexParameterf(target, pname, param)
    
        target : GLenum
        pname : GLenum
        param : GLfloat
    """
    return _api_(target, pname, param)
    
@bind(None, [GLenum, GLenum, POINTER(c_float)])
def glTexParameterfv(target, pname, params, _api_=None): 
    """glTexParameterfv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLenum, GLint])
def glTexParameteri(target, pname, param, _api_=None): 
    """glTexParameteri(target, pname, param)
    
        target : GLenum
        pname : GLenum
        param : GLint
    """
    return _api_(target, pname, param)
    
@bind(None, [GLenum, GLenum, POINTER(c_long)])
def glTexParameteriv(target, pname, params, _api_=None): 
    """glTexParameteriv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLint, GLint, GLsizei, GLenum, GLenum, c_void_p])
def glTexSubImage1D(target, level, xoffset, width, format, type, pixels, _api_=None): 
    """glTexSubImage1D(target, level, xoffset, width, format, type, pixels)
    
        target : GLenum
        level : GLint
        xoffset : GLint
        width : GLsizei
        format : GLenum
        type : GLenum
        pixels : c_void_p
    """
    return _api_(target, level, xoffset, width, format, type, pixels)
    
@bind(None, [GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, c_void_p])
def glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels, _api_=None): 
    """glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels)
    
        target : GLenum
        level : GLint
        xoffset : GLint
        yoffset : GLint
        width : GLsizei
        height : GLsizei
        format : GLenum
        type : GLenum
        pixels : c_void_p
    """
    return _api_(target, level, xoffset, yoffset, width, height, format, type, pixels)
    
@bind(None, [GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, c_void_p])
def glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels, _api_=None): 
    """glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
    
        target : GLenum
        level : GLint
        xoffset : GLint
        yoffset : GLint
        zoffset : GLint
        width : GLsizei
        height : GLsizei
        depth : GLsizei
        format : GLenum
        type : GLenum
        pixels : c_void_p
    """
    return _api_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels)
    
@bind(None, [GLdouble, GLdouble, GLdouble])
def glTranslated(x, y, z, _api_=None): 
    """glTranslated(x, y, z)
    
        x : GLdouble
        y : GLdouble
        z : GLdouble
    """
    return _api_(x, y, z)
    
@bind(None, [GLfloat, GLfloat, GLfloat])
def glTranslatef(x, y, z, _api_=None): 
    """glTranslatef(x, y, z)
    
        x : GLfloat
        y : GLfloat
        z : GLfloat
    """
    return _api_(x, y, z)
    
@bind(None, [GLdouble, GLdouble])
def glVertex2d(x, y, _api_=None): 
    """glVertex2d(x, y)
    
        x : GLdouble
        y : GLdouble
    """
    return _api_(x, y)
    
@bind(None, [POINTER(c_double)])
def glVertex2dv(v, _api_=None): 
    """glVertex2dv(v)
    
        v : POINTER(c_double)
    """
    return _api_(v)
    
@bind(None, [GLfloat, GLfloat])
def glVertex2f(x, y, _api_=None): 
    """glVertex2f(x, y)
    
        x : GLfloat
        y : GLfloat
    """
    return _api_(x, y)
    
@bind(None, [POINTER(c_float)])
def glVertex2fv(v, _api_=None): 
    """glVertex2fv(v)
    
        v : POINTER(c_float)
    """
    return _api_(v)
    
@bind(None, [GLint, GLint])
def glVertex2i(x, y, _api_=None): 
    """glVertex2i(x, y)
    
        x : GLint
        y : GLint
    """
    return _api_(x, y)
    
@bind(None, [POINTER(c_long)])
def glVertex2iv(v, _api_=None): 
    """glVertex2iv(v)
    
        v : POINTER(c_long)
    """
    return _api_(v)
    
@bind(None, [GLshort, GLshort])
def glVertex2s(x, y, _api_=None): 
    """glVertex2s(x, y)
    
        x : GLshort
        y : GLshort
    """
    return _api_(x, y)
    
@bind(None, [POINTER(c_short)])
def glVertex2sv(v, _api_=None): 
    """glVertex2sv(v)
    
        v : POINTER(c_short)
    """
    return _api_(v)
    
@bind(None, [GLdouble, GLdouble, GLdouble])
def glVertex3d(x, y, z, _api_=None): 
    """glVertex3d(x, y, z)
    
        x : GLdouble
        y : GLdouble
        z : GLdouble
    """
    return _api_(x, y, z)
    
@bind(None, [POINTER(c_double)])
def glVertex3dv(v, _api_=None): 
    """glVertex3dv(v)
    
        v : POINTER(c_double)
    """
    return _api_(v)
    
@bind(None, [GLfloat, GLfloat, GLfloat])
def glVertex3f(x, y, z, _api_=None): 
    """glVertex3f(x, y, z)
    
        x : GLfloat
        y : GLfloat
        z : GLfloat
    """
    return _api_(x, y, z)
    
@bind(None, [POINTER(c_float)])
def glVertex3fv(v, _api_=None): 
    """glVertex3fv(v)
    
        v : POINTER(c_float)
    """
    return _api_(v)
    
@bind(None, [GLint, GLint, GLint])
def glVertex3i(x, y, z, _api_=None): 
    """glVertex3i(x, y, z)
    
        x : GLint
        y : GLint
        z : GLint
    """
    return _api_(x, y, z)
    
@bind(None, [POINTER(c_long)])
def glVertex3iv(v, _api_=None): 
    """glVertex3iv(v)
    
        v : POINTER(c_long)
    """
    return _api_(v)
    
@bind(None, [GLshort, GLshort, GLshort])
def glVertex3s(x, y, z, _api_=None): 
    """glVertex3s(x, y, z)
    
        x : GLshort
        y : GLshort
        z : GLshort
    """
    return _api_(x, y, z)
    
@bind(None, [POINTER(c_short)])
def glVertex3sv(v, _api_=None): 
    """glVertex3sv(v)
    
        v : POINTER(c_short)
    """
    return _api_(v)
    
@bind(None, [GLdouble, GLdouble, GLdouble, GLdouble])
def glVertex4d(x, y, z, w, _api_=None): 
    """glVertex4d(x, y, z, w)
    
        x : GLdouble
        y : GLdouble
        z : GLdouble
        w : GLdouble
    """
    return _api_(x, y, z, w)
    
@bind(None, [POINTER(c_double)])
def glVertex4dv(v, _api_=None): 
    """glVertex4dv(v)
    
        v : POINTER(c_double)
    """
    return _api_(v)
    
@bind(None, [GLfloat, GLfloat, GLfloat, GLfloat])
def glVertex4f(x, y, z, w, _api_=None): 
    """glVertex4f(x, y, z, w)
    
        x : GLfloat
        y : GLfloat
        z : GLfloat
        w : GLfloat
    """
    return _api_(x, y, z, w)
    
@bind(None, [POINTER(c_float)])
def glVertex4fv(v, _api_=None): 
    """glVertex4fv(v)
    
        v : POINTER(c_float)
    """
    return _api_(v)
    
@bind(None, [GLint, GLint, GLint, GLint])
def glVertex4i(x, y, z, w, _api_=None): 
    """glVertex4i(x, y, z, w)
    
        x : GLint
        y : GLint
        z : GLint
        w : GLint
    """
    return _api_(x, y, z, w)
    
@bind(None, [POINTER(c_long)])
def glVertex4iv(v, _api_=None): 
    """glVertex4iv(v)
    
        v : POINTER(c_long)
    """
    return _api_(v)
    
@bind(None, [GLshort, GLshort, GLshort, GLshort])
def glVertex4s(x, y, z, w, _api_=None): 
    """glVertex4s(x, y, z, w)
    
        x : GLshort
        y : GLshort
        z : GLshort
        w : GLshort
    """
    return _api_(x, y, z, w)
    
@bind(None, [POINTER(c_short)])
def glVertex4sv(v, _api_=None): 
    """glVertex4sv(v)
    
        v : POINTER(c_short)
    """
    return _api_(v)
    
@bind(None, [GLint, GLenum, GLsizei, c_void_p])
def glVertexPointer(size, type, stride, pointer, _api_=None): 
    """glVertexPointer(size, type, stride, pointer)
    
        size : GLint
        type : GLenum
        stride : GLsizei
        pointer : c_void_p
    """
    return _api_(size, type, stride, pointer)
    
@bind(None, [GLint, GLint, GLsizei, GLsizei])
def glViewport(x, y, width, height, _api_=None): 
    """glViewport(x, y, width, height)
    
        x : GLint
        y : GLint
        width : GLsizei
        height : GLsizei
    """
    return _api_(x, y, width, height)
    

@bind(None, [GLclampf, GLboolean])
def glSampleCoverage(value, invert, _api_=None): 
    """glSampleCoverage(value, invert)
    
        value : GLclampf
        invert : GLboolean
    """
    return _api_(value, invert)
    
@bind(None, [GLenum])
def glSamplePass(arg_0, _api_=None): 
    """glSamplePass(arg_0)
    
        arg_0 : GLenum
    """
    return _api_(arg_0)
    

@bind(None, [POINTER(c_float)])
def glLoadTransposeMatrixf(m, _api_=None): 
    """glLoadTransposeMatrixf(m)
    
        m : POINTER(c_float)
    """
    return _api_(m)
    
@bind(None, [POINTER(c_double)])
def glLoadTransposeMatrixd(m, _api_=None): 
    """glLoadTransposeMatrixd(m)
    
        m : POINTER(c_double)
    """
    return _api_(m)
    
@bind(None, [POINTER(c_float)])
def glMultTransposeMatrixf(m, _api_=None): 
    """glMultTransposeMatrixf(m)
    
        m : POINTER(c_float)
    """
    return _api_(m)
    
@bind(None, [POINTER(c_double)])
def glMultTransposeMatrixd(m, _api_=None): 
    """glMultTransposeMatrixd(m)
    
        m : POINTER(c_double)
    """
    return _api_(m)
    

@bind(None, [GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, c_void_p])
def glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data, _api_=None): 
    """glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data)
    
        target : GLenum
        level : GLint
        internalformat : GLenum
        width : GLsizei
        height : GLsizei
        depth : GLsizei
        border : GLint
        imageSize : GLsizei
        data : c_void_p
    """
    return _api_(target, level, internalformat, width, height, depth, border, imageSize, data)
    
@bind(None, [GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, c_void_p])
def glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data, _api_=None): 
    """glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data)
    
        target : GLenum
        level : GLint
        internalformat : GLenum
        width : GLsizei
        height : GLsizei
        border : GLint
        imageSize : GLsizei
        data : c_void_p
    """
    return _api_(target, level, internalformat, width, height, border, imageSize, data)
    
@bind(None, [GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, c_void_p])
def glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data, _api_=None): 
    """glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data)
    
        target : GLenum
        level : GLint
        internalformat : GLenum
        width : GLsizei
        border : GLint
        imageSize : GLsizei
        data : c_void_p
    """
    return _api_(target, level, internalformat, width, border, imageSize, data)
    
@bind(None, [GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, c_void_p])
def glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data, _api_=None): 
    """glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data)
    
        target : GLenum
        level : GLint
        xoffset : GLint
        yoffset : GLint
        zoffset : GLint
        width : GLsizei
        height : GLsizei
        depth : GLsizei
        format : GLenum
        imageSize : GLsizei
        data : c_void_p
    """
    return _api_(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data)
    
@bind(None, [GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, c_void_p])
def glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data, _api_=None): 
    """glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data)
    
        target : GLenum
        level : GLint
        xoffset : GLint
        yoffset : GLint
        width : GLsizei
        height : GLsizei
        format : GLenum
        imageSize : GLsizei
        data : c_void_p
    """
    return _api_(target, level, xoffset, yoffset, width, height, format, imageSize, data)
    
@bind(None, [GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, c_void_p])
def glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data, _api_=None): 
    """glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data)
    
        target : GLenum
        level : GLint
        xoffset : GLint
        width : GLsizei
        format : GLenum
        imageSize : GLsizei
        data : c_void_p
    """
    return _api_(target, level, xoffset, width, format, imageSize, data)
    
@bind(None, [GLenum, GLint, c_void_p])
def glGetCompressedTexImage(target, level, img, _api_=None): 
    """glGetCompressedTexImage(target, level, img)
    
        target : GLenum
        level : GLint
        img : c_void_p
    """
    return _api_(target, level, img)
    

@bind(None, [GLenum])
def glActiveTexture(texture, _api_=None): 
    """glActiveTexture(texture)
    
        texture : GLenum
    """
    return _api_(texture)
    
@bind(None, [GLenum])
def glClientActiveTexture(texture, _api_=None): 
    """glClientActiveTexture(texture)
    
        texture : GLenum
    """
    return _api_(texture)
    
@bind(None, [GLenum, GLdouble])
def glMultiTexCoord1d(target, s, _api_=None): 
    """glMultiTexCoord1d(target, s)
    
        target : GLenum
        s : GLdouble
    """
    return _api_(target, s)
    
@bind(None, [GLenum, POINTER(c_double)])
def glMultiTexCoord1dv(target, v, _api_=None): 
    """glMultiTexCoord1dv(target, v)
    
        target : GLenum
        v : POINTER(c_double)
    """
    return _api_(target, v)
    
@bind(None, [GLenum, GLfloat])
def glMultiTexCoord1f(target, s, _api_=None): 
    """glMultiTexCoord1f(target, s)
    
        target : GLenum
        s : GLfloat
    """
    return _api_(target, s)
    
@bind(None, [GLenum, POINTER(c_float)])
def glMultiTexCoord1fv(target, v, _api_=None): 
    """glMultiTexCoord1fv(target, v)
    
        target : GLenum
        v : POINTER(c_float)
    """
    return _api_(target, v)
    
@bind(None, [GLenum, GLint])
def glMultiTexCoord1i(target, s, _api_=None): 
    """glMultiTexCoord1i(target, s)
    
        target : GLenum
        s : GLint
    """
    return _api_(target, s)
    
@bind(None, [GLenum, POINTER(c_long)])
def glMultiTexCoord1iv(target, v, _api_=None): 
    """glMultiTexCoord1iv(target, v)
    
        target : GLenum
        v : POINTER(c_long)
    """
    return _api_(target, v)
    
@bind(None, [GLenum, GLshort])
def glMultiTexCoord1s(target, s, _api_=None): 
    """glMultiTexCoord1s(target, s)
    
        target : GLenum
        s : GLshort
    """
    return _api_(target, s)
    
@bind(None, [GLenum, POINTER(c_short)])
def glMultiTexCoord1sv(target, v, _api_=None): 
    """glMultiTexCoord1sv(target, v)
    
        target : GLenum
        v : POINTER(c_short)
    """
    return _api_(target, v)
    
@bind(None, [GLenum, GLdouble, GLdouble])
def glMultiTexCoord2d(target, s, t, _api_=None): 
    """glMultiTexCoord2d(target, s, t)
    
        target : GLenum
        s : GLdouble
        t : GLdouble
    """
    return _api_(target, s, t)
    
@bind(None, [GLenum, POINTER(c_double)])
def glMultiTexCoord2dv(target, v, _api_=None): 
    """glMultiTexCoord2dv(target, v)
    
        target : GLenum
        v : POINTER(c_double)
    """
    return _api_(target, v)
    
@bind(None, [GLenum, GLfloat, GLfloat])
def glMultiTexCoord2f(target, s, t, _api_=None): 
    """glMultiTexCoord2f(target, s, t)
    
        target : GLenum
        s : GLfloat
        t : GLfloat
    """
    return _api_(target, s, t)
    
@bind(None, [GLenum, POINTER(c_float)])
def glMultiTexCoord2fv(target, v, _api_=None): 
    """glMultiTexCoord2fv(target, v)
    
        target : GLenum
        v : POINTER(c_float)
    """
    return _api_(target, v)
    
@bind(None, [GLenum, GLint, GLint])
def glMultiTexCoord2i(target, s, t, _api_=None): 
    """glMultiTexCoord2i(target, s, t)
    
        target : GLenum
        s : GLint
        t : GLint
    """
    return _api_(target, s, t)
    
@bind(None, [GLenum, POINTER(c_long)])
def glMultiTexCoord2iv(target, v, _api_=None): 
    """glMultiTexCoord2iv(target, v)
    
        target : GLenum
        v : POINTER(c_long)
    """
    return _api_(target, v)
    
@bind(None, [GLenum, GLshort, GLshort])
def glMultiTexCoord2s(target, s, t, _api_=None): 
    """glMultiTexCoord2s(target, s, t)
    
        target : GLenum
        s : GLshort
        t : GLshort
    """
    return _api_(target, s, t)
    
@bind(None, [GLenum, POINTER(c_short)])
def glMultiTexCoord2sv(target, v, _api_=None): 
    """glMultiTexCoord2sv(target, v)
    
        target : GLenum
        v : POINTER(c_short)
    """
    return _api_(target, v)
    
@bind(None, [GLenum, GLdouble, GLdouble, GLdouble])
def glMultiTexCoord3d(target, s, t, r, _api_=None): 
    """glMultiTexCoord3d(target, s, t, r)
    
        target : GLenum
        s : GLdouble
        t : GLdouble
        r : GLdouble
    """
    return _api_(target, s, t, r)
    
@bind(None, [GLenum, POINTER(c_double)])
def glMultiTexCoord3dv(target, v, _api_=None): 
    """glMultiTexCoord3dv(target, v)
    
        target : GLenum
        v : POINTER(c_double)
    """
    return _api_(target, v)
    
@bind(None, [GLenum, GLfloat, GLfloat, GLfloat])
def glMultiTexCoord3f(target, s, t, r, _api_=None): 
    """glMultiTexCoord3f(target, s, t, r)
    
        target : GLenum
        s : GLfloat
        t : GLfloat
        r : GLfloat
    """
    return _api_(target, s, t, r)
    
@bind(None, [GLenum, POINTER(c_float)])
def glMultiTexCoord3fv(target, v, _api_=None): 
    """glMultiTexCoord3fv(target, v)
    
        target : GLenum
        v : POINTER(c_float)
    """
    return _api_(target, v)
    
@bind(None, [GLenum, GLint, GLint, GLint])
def glMultiTexCoord3i(target, s, t, r, _api_=None): 
    """glMultiTexCoord3i(target, s, t, r)
    
        target : GLenum
        s : GLint
        t : GLint
        r : GLint
    """
    return _api_(target, s, t, r)
    
@bind(None, [GLenum, POINTER(c_long)])
def glMultiTexCoord3iv(target, v, _api_=None): 
    """glMultiTexCoord3iv(target, v)
    
        target : GLenum
        v : POINTER(c_long)
    """
    return _api_(target, v)
    
@bind(None, [GLenum, GLshort, GLshort, GLshort])
def glMultiTexCoord3s(target, s, t, r, _api_=None): 
    """glMultiTexCoord3s(target, s, t, r)
    
        target : GLenum
        s : GLshort
        t : GLshort
        r : GLshort
    """
    return _api_(target, s, t, r)
    
@bind(None, [GLenum, POINTER(c_short)])
def glMultiTexCoord3sv(target, v, _api_=None): 
    """glMultiTexCoord3sv(target, v)
    
        target : GLenum
        v : POINTER(c_short)
    """
    return _api_(target, v)
    
@bind(None, [GLenum, GLdouble, GLdouble, GLdouble, GLdouble])
def glMultiTexCoord4d(target, s, t, r, q, _api_=None): 
    """glMultiTexCoord4d(target, s, t, r, q)
    
        target : GLenum
        s : GLdouble
        t : GLdouble
        r : GLdouble
        q : GLdouble
    """
    return _api_(target, s, t, r, q)
    
@bind(None, [GLenum, POINTER(c_double)])
def glMultiTexCoord4dv(target, v, _api_=None): 
    """glMultiTexCoord4dv(target, v)
    
        target : GLenum
        v : POINTER(c_double)
    """
    return _api_(target, v)
    
@bind(None, [GLenum, GLfloat, GLfloat, GLfloat, GLfloat])
def glMultiTexCoord4f(target, s, t, r, q, _api_=None): 
    """glMultiTexCoord4f(target, s, t, r, q)
    
        target : GLenum
        s : GLfloat
        t : GLfloat
        r : GLfloat
        q : GLfloat
    """
    return _api_(target, s, t, r, q)
    
@bind(None, [GLenum, POINTER(c_float)])
def glMultiTexCoord4fv(target, v, _api_=None): 
    """glMultiTexCoord4fv(target, v)
    
        target : GLenum
        v : POINTER(c_float)
    """
    return _api_(target, v)
    
@bind(None, [GLenum, GLint, GLint, GLint, GLint])
def glMultiTexCoord4i(target, s, t, r, q, _api_=None): 
    """glMultiTexCoord4i(target, s, t, r, q)
    
        target : GLenum
        s : GLint
        t : GLint
        r : GLint
        q : GLint
    """
    return _api_(target, s, t, r, q)
    
@bind(None, [GLenum, POINTER(c_long)])
def glMultiTexCoord4iv(target, v, _api_=None): 
    """glMultiTexCoord4iv(target, v)
    
        target : GLenum
        v : POINTER(c_long)
    """
    return _api_(target, v)
    
@bind(None, [GLenum, GLshort, GLshort, GLshort, GLshort])
def glMultiTexCoord4s(target, s, t, r, q, _api_=None): 
    """glMultiTexCoord4s(target, s, t, r, q)
    
        target : GLenum
        s : GLshort
        t : GLshort
        r : GLshort
        q : GLshort
    """
    return _api_(target, s, t, r, q)
    
@bind(None, [GLenum, POINTER(c_short)])
def glMultiTexCoord4sv(target, v, _api_=None): 
    """glMultiTexCoord4sv(target, v)
    
        target : GLenum
        v : POINTER(c_short)
    """
    return _api_(target, v)
    

@bind(None, [GLfloat])
def glFogCoordf(coord, _api_=None): 
    """glFogCoordf(coord)
    
        coord : GLfloat
    """
    return _api_(coord)
    
@bind(None, [POINTER(c_float)])
def glFogCoordfv(coord, _api_=None): 
    """glFogCoordfv(coord)
    
        coord : POINTER(c_float)
    """
    return _api_(coord)
    
@bind(None, [GLdouble])
def glFogCoordd(coord, _api_=None): 
    """glFogCoordd(coord)
    
        coord : GLdouble
    """
    return _api_(coord)
    
@bind(None, [POINTER(c_double)])
def glFogCoorddv(coord, _api_=None): 
    """glFogCoorddv(coord)
    
        coord : POINTER(c_double)
    """
    return _api_(coord)
    
@bind(None, [GLenum, GLsizei, c_void_p])
def glFogCoordPointer(type, stride, pointer, _api_=None): 
    """glFogCoordPointer(type, stride, pointer)
    
        type : GLenum
        stride : GLsizei
        pointer : c_void_p
    """
    return _api_(type, stride, pointer)
    

@bind(None, [GLbyte, GLbyte, GLbyte])
def glSecondaryColor3b(red, green, blue, _api_=None): 
    """glSecondaryColor3b(red, green, blue)
    
        red : GLbyte
        green : GLbyte
        blue : GLbyte
    """
    return _api_(red, green, blue)
    
@bind(None, [POINTER(c_byte)])
def glSecondaryColor3bv(v, _api_=None): 
    """glSecondaryColor3bv(v)
    
        v : POINTER(c_byte)
    """
    return _api_(v)
    
@bind(None, [GLdouble, GLdouble, GLdouble])
def glSecondaryColor3d(red, green, blue, _api_=None): 
    """glSecondaryColor3d(red, green, blue)
    
        red : GLdouble
        green : GLdouble
        blue : GLdouble
    """
    return _api_(red, green, blue)
    
@bind(None, [POINTER(c_double)])
def glSecondaryColor3dv(v, _api_=None): 
    """glSecondaryColor3dv(v)
    
        v : POINTER(c_double)
    """
    return _api_(v)
    
@bind(None, [GLfloat, GLfloat, GLfloat])
def glSecondaryColor3f(red, green, blue, _api_=None): 
    """glSecondaryColor3f(red, green, blue)
    
        red : GLfloat
        green : GLfloat
        blue : GLfloat
    """
    return _api_(red, green, blue)
    
@bind(None, [POINTER(c_float)])
def glSecondaryColor3fv(v, _api_=None): 
    """glSecondaryColor3fv(v)
    
        v : POINTER(c_float)
    """
    return _api_(v)
    
@bind(None, [GLint, GLint, GLint])
def glSecondaryColor3i(red, green, blue, _api_=None): 
    """glSecondaryColor3i(red, green, blue)
    
        red : GLint
        green : GLint
        blue : GLint
    """
    return _api_(red, green, blue)
    
@bind(None, [POINTER(c_long)])
def glSecondaryColor3iv(v, _api_=None): 
    """glSecondaryColor3iv(v)
    
        v : POINTER(c_long)
    """
    return _api_(v)
    
@bind(None, [GLshort, GLshort, GLshort])
def glSecondaryColor3s(red, green, blue, _api_=None): 
    """glSecondaryColor3s(red, green, blue)
    
        red : GLshort
        green : GLshort
        blue : GLshort
    """
    return _api_(red, green, blue)
    
@bind(None, [POINTER(c_short)])
def glSecondaryColor3sv(v, _api_=None): 
    """glSecondaryColor3sv(v)
    
        v : POINTER(c_short)
    """
    return _api_(v)
    
@bind(None, [GLubyte, GLubyte, GLubyte])
def glSecondaryColor3ub(red, green, blue, _api_=None): 
    """glSecondaryColor3ub(red, green, blue)
    
        red : GLubyte
        green : GLubyte
        blue : GLubyte
    """
    return _api_(red, green, blue)
    
@bind(None, [POINTER(c_ubyte)])
def glSecondaryColor3ubv(v, _api_=None): 
    """glSecondaryColor3ubv(v)
    
        v : POINTER(c_ubyte)
    """
    return _api_(v)
    
@bind(None, [GLuint, GLuint, GLuint])
def glSecondaryColor3ui(red, green, blue, _api_=None): 
    """glSecondaryColor3ui(red, green, blue)
    
        red : GLuint
        green : GLuint
        blue : GLuint
    """
    return _api_(red, green, blue)
    
@bind(None, [POINTER(c_ulong)])
def glSecondaryColor3uiv(v, _api_=None): 
    """glSecondaryColor3uiv(v)
    
        v : POINTER(c_ulong)
    """
    return _api_(v)
    
@bind(None, [GLushort, GLushort, GLushort])
def glSecondaryColor3us(red, green, blue, _api_=None): 
    """glSecondaryColor3us(red, green, blue)
    
        red : GLushort
        green : GLushort
        blue : GLushort
    """
    return _api_(red, green, blue)
    
@bind(None, [POINTER(c_ushort)])
def glSecondaryColor3usv(v, _api_=None): 
    """glSecondaryColor3usv(v)
    
        v : POINTER(c_ushort)
    """
    return _api_(v)
    
@bind(None, [GLint, GLenum, GLsizei, c_void_p])
def glSecondaryColorPointer(size, type, stride, pointer, _api_=None): 
    """glSecondaryColorPointer(size, type, stride, pointer)
    
        size : GLint
        type : GLenum
        stride : GLsizei
        pointer : c_void_p
    """
    return _api_(size, type, stride, pointer)
    

@bind(None, [GLenum, GLfloat])
def glPointParameterf(pname, param, _api_=None): 
    """glPointParameterf(pname, param)
    
        pname : GLenum
        param : GLfloat
    """
    return _api_(pname, param)
    
@bind(None, [GLenum, POINTER(c_float)])
def glPointParameterfv(pname, params, _api_=None): 
    """glPointParameterfv(pname, params)
    
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(pname, params)
    
@bind(None, [GLenum, GLint])
def glPointParameteri(pname, param, _api_=None): 
    """glPointParameteri(pname, param)
    
        pname : GLenum
        param : GLint
    """
    return _api_(pname, param)
    
@bind(None, [GLenum, POINTER(c_long)])
def glPointParameteriv(pname, params, _api_=None): 
    """glPointParameteriv(pname, params)
    
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(pname, params)
    

@bind(None, [GLenum, GLenum, GLenum, GLenum])
def glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha, _api_=None): 
    """glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha)
    
        sfactorRGB : GLenum
        dfactorRGB : GLenum
        sfactorAlpha : GLenum
        dfactorAlpha : GLenum
    """
    return _api_(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha)
    

@bind(None, [GLenum, POINTER(c_long), POINTER(c_long), GLsizei])
def glMultiDrawArrays(mode, first, count, primcount, _api_=None): 
    """glMultiDrawArrays(mode, first, count, primcount)
    
        mode : GLenum
        first : POINTER(c_long)
        count : POINTER(c_long)
        primcount : GLsizei
    """
    return _api_(mode, first, count, primcount)
    
@bind(None, [GLenum, POINTER(c_long), GLenum, c_void_p, GLsizei])
def glMultiDrawElements(mode, count, type, indices, primcount, _api_=None): 
    """glMultiDrawElements(mode, count, type, indices, primcount)
    
        mode : GLenum
        count : POINTER(c_long)
        type : GLenum
        indices : c_void_p
        primcount : GLsizei
    """
    return _api_(mode, count, type, indices, primcount)
    

@bind(None, [GLdouble, GLdouble])
def glWindowPos2d(x, y, _api_=None): 
    """glWindowPos2d(x, y)
    
        x : GLdouble
        y : GLdouble
    """
    return _api_(x, y)
    
@bind(None, [POINTER(c_double)])
def glWindowPos2dv(v, _api_=None): 
    """glWindowPos2dv(v)
    
        v : POINTER(c_double)
    """
    return _api_(v)
    
@bind(None, [GLfloat, GLfloat])
def glWindowPos2f(x, y, _api_=None): 
    """glWindowPos2f(x, y)
    
        x : GLfloat
        y : GLfloat
    """
    return _api_(x, y)
    
@bind(None, [POINTER(c_float)])
def glWindowPos2fv(v, _api_=None): 
    """glWindowPos2fv(v)
    
        v : POINTER(c_float)
    """
    return _api_(v)
    
@bind(None, [GLint, GLint])
def glWindowPos2i(x, y, _api_=None): 
    """glWindowPos2i(x, y)
    
        x : GLint
        y : GLint
    """
    return _api_(x, y)
    
@bind(None, [POINTER(c_long)])
def glWindowPos2iv(v, _api_=None): 
    """glWindowPos2iv(v)
    
        v : POINTER(c_long)
    """
    return _api_(v)
    
@bind(None, [GLshort, GLshort])
def glWindowPos2s(x, y, _api_=None): 
    """glWindowPos2s(x, y)
    
        x : GLshort
        y : GLshort
    """
    return _api_(x, y)
    
@bind(None, [POINTER(c_short)])
def glWindowPos2sv(v, _api_=None): 
    """glWindowPos2sv(v)
    
        v : POINTER(c_short)
    """
    return _api_(v)
    
@bind(None, [GLdouble, GLdouble, GLdouble])
def glWindowPos3d(x, y, z, _api_=None): 
    """glWindowPos3d(x, y, z)
    
        x : GLdouble
        y : GLdouble
        z : GLdouble
    """
    return _api_(x, y, z)
    
@bind(None, [POINTER(c_double)])
def glWindowPos3dv(v, _api_=None): 
    """glWindowPos3dv(v)
    
        v : POINTER(c_double)
    """
    return _api_(v)
    
@bind(None, [GLfloat, GLfloat, GLfloat])
def glWindowPos3f(x, y, z, _api_=None): 
    """glWindowPos3f(x, y, z)
    
        x : GLfloat
        y : GLfloat
        z : GLfloat
    """
    return _api_(x, y, z)
    
@bind(None, [POINTER(c_float)])
def glWindowPos3fv(v, _api_=None): 
    """glWindowPos3fv(v)
    
        v : POINTER(c_float)
    """
    return _api_(v)
    
@bind(None, [GLint, GLint, GLint])
def glWindowPos3i(x, y, z, _api_=None): 
    """glWindowPos3i(x, y, z)
    
        x : GLint
        y : GLint
        z : GLint
    """
    return _api_(x, y, z)
    
@bind(None, [POINTER(c_long)])
def glWindowPos3iv(v, _api_=None): 
    """glWindowPos3iv(v)
    
        v : POINTER(c_long)
    """
    return _api_(v)
    
@bind(None, [GLshort, GLshort, GLshort])
def glWindowPos3s(x, y, z, _api_=None): 
    """glWindowPos3s(x, y, z)
    
        x : GLshort
        y : GLshort
        z : GLshort
    """
    return _api_(x, y, z)
    
@bind(None, [POINTER(c_short)])
def glWindowPos3sv(v, _api_=None): 
    """glWindowPos3sv(v)
    
        v : POINTER(c_short)
    """
    return _api_(v)
    

@bind(None, [GLsizei, POINTER(c_ulong)])
def glGenQueries(n, ids, _api_=None): 
    """glGenQueries(n, ids)
    
        n : GLsizei
        ids : POINTER(c_ulong)
    """
    return _api_(n, ids)
    
@bind(None, [GLsizei, POINTER(c_ulong)])
def glDeleteQueries(n, ids, _api_=None): 
    """glDeleteQueries(n, ids)
    
        n : GLsizei
        ids : POINTER(c_ulong)
    """
    return _api_(n, ids)
    
@bind(GLboolean, [GLuint])
def glIsQuery(id, _api_=None): 
    """glIsQuery(id)
    
        id : GLuint
    """
    return _api_(id)
    
@bind(None, [GLenum, GLuint])
def glBeginQuery(target, id, _api_=None): 
    """glBeginQuery(target, id)
    
        target : GLenum
        id : GLuint
    """
    return _api_(target, id)
    
@bind(None, [GLenum])
def glEndQuery(target, _api_=None): 
    """glEndQuery(target)
    
        target : GLenum
    """
    return _api_(target)
    
@bind(None, [GLenum, GLenum, POINTER(c_long)])
def glGetQueryiv(target, pname, params, _api_=None): 
    """glGetQueryiv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLuint, GLenum, POINTER(c_long)])
def glGetQueryObjectiv(id, pname, params, _api_=None): 
    """glGetQueryObjectiv(id, pname, params)
    
        id : GLuint
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(id, pname, params)
    
@bind(None, [GLuint, GLenum, POINTER(c_ulong)])
def glGetQueryObjectuiv(id, pname, params, _api_=None): 
    """glGetQueryObjectuiv(id, pname, params)
    
        id : GLuint
        pname : GLenum
        params : POINTER(c_ulong)
    """
    return _api_(id, pname, params)
    

@bind(None, [GLenum, GLuint])
def glBindBuffer(target, buffer, _api_=None): 
    """glBindBuffer(target, buffer)
    
        target : GLenum
        buffer : GLuint
    """
    return _api_(target, buffer)
    
@bind(None, [GLsizei, POINTER(c_ulong)])
def glDeleteBuffers(n, buffers, _api_=None): 
    """glDeleteBuffers(n, buffers)
    
        n : GLsizei
        buffers : POINTER(c_ulong)
    """
    return _api_(n, buffers)
    
@bind(None, [GLsizei, POINTER(c_ulong)])
def glGenBuffers(n, buffers, _api_=None): 
    """glGenBuffers(n, buffers)
    
        n : GLsizei
        buffers : POINTER(c_ulong)
    """
    return _api_(n, buffers)
    
@bind(GLboolean, [GLuint])
def glIsBuffer(buffer, _api_=None): 
    """glIsBuffer(buffer)
    
        buffer : GLuint
    """
    return _api_(buffer)
    
@bind(None, [GLenum, GLsizeiptr, c_void_p, GLenum])
def glBufferData(target, size, data, usage, _api_=None): 
    """glBufferData(target, size, data, usage)
    
        target : GLenum
        size : GLsizeiptr
        data : c_void_p
        usage : GLenum
    """
    return _api_(target, size, data, usage)
    
@bind(None, [GLenum, GLintptr, GLsizeiptr, c_void_p])
def glBufferSubData(target, offset, size, data, _api_=None): 
    """glBufferSubData(target, offset, size, data)
    
        target : GLenum
        offset : GLintptr
        size : GLsizeiptr
        data : c_void_p
    """
    return _api_(target, offset, size, data)
    
@bind(None, [GLenum, GLintptr, GLsizeiptr, c_void_p])
def glGetBufferSubData(target, offset, size, data, _api_=None): 
    """glGetBufferSubData(target, offset, size, data)
    
        target : GLenum
        offset : GLintptr
        size : GLsizeiptr
        data : c_void_p
    """
    return _api_(target, offset, size, data)
    
@bind(c_void_p, [GLenum, GLenum])
def glMapBuffer(target, access, _api_=None): 
    """glMapBuffer(target, access)
    
        target : GLenum
        access : GLenum
    """
    return _api_(target, access)
    
@bind(GLboolean, [GLenum])
def glUnmapBuffer(target, _api_=None): 
    """glUnmapBuffer(target)
    
        target : GLenum
    """
    return _api_(target)
    
@bind(None, [GLenum, GLenum, POINTER(c_long)])
def glGetBufferParameteriv(target, pname, params, _api_=None): 
    """glGetBufferParameteriv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(target, pname, params)
    
@bind(None, [GLenum, GLenum, c_void_p])
def glGetBufferPointerv(target, pname, params, _api_=None): 
    """glGetBufferPointerv(target, pname, params)
    
        target : GLenum
        pname : GLenum
        params : c_void_p
    """
    return _api_(target, pname, params)
    

@bind(None, [GLsizei, POINTER(c_ulong)])
def glDrawBuffers(n, bufs, _api_=None): 
    """glDrawBuffers(n, bufs)
    
        n : GLsizei
        bufs : POINTER(c_ulong)
    """
    return _api_(n, bufs)
    
@bind(None, [GLuint, GLdouble])
def glVertexAttrib1d(index, x, _api_=None): 
    """glVertexAttrib1d(index, x)
    
        index : GLuint
        x : GLdouble
    """
    return _api_(index, x)
    
@bind(None, [GLuint, POINTER(c_double)])
def glVertexAttrib1dv(index, v, _api_=None): 
    """glVertexAttrib1dv(index, v)
    
        index : GLuint
        v : POINTER(c_double)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, GLfloat])
def glVertexAttrib1f(index, x, _api_=None): 
    """glVertexAttrib1f(index, x)
    
        index : GLuint
        x : GLfloat
    """
    return _api_(index, x)
    
@bind(None, [GLuint, POINTER(c_float)])
def glVertexAttrib1fv(index, v, _api_=None): 
    """glVertexAttrib1fv(index, v)
    
        index : GLuint
        v : POINTER(c_float)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, GLshort])
def glVertexAttrib1s(index, x, _api_=None): 
    """glVertexAttrib1s(index, x)
    
        index : GLuint
        x : GLshort
    """
    return _api_(index, x)
    
@bind(None, [GLuint, POINTER(c_short)])
def glVertexAttrib1sv(index, v, _api_=None): 
    """glVertexAttrib1sv(index, v)
    
        index : GLuint
        v : POINTER(c_short)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, GLdouble, GLdouble])
def glVertexAttrib2d(index, x, y, _api_=None): 
    """glVertexAttrib2d(index, x, y)
    
        index : GLuint
        x : GLdouble
        y : GLdouble
    """
    return _api_(index, x, y)
    
@bind(None, [GLuint, POINTER(c_double)])
def glVertexAttrib2dv(index, v, _api_=None): 
    """glVertexAttrib2dv(index, v)
    
        index : GLuint
        v : POINTER(c_double)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, GLfloat, GLfloat])
def glVertexAttrib2f(index, x, y, _api_=None): 
    """glVertexAttrib2f(index, x, y)
    
        index : GLuint
        x : GLfloat
        y : GLfloat
    """
    return _api_(index, x, y)
    
@bind(None, [GLuint, POINTER(c_float)])
def glVertexAttrib2fv(index, v, _api_=None): 
    """glVertexAttrib2fv(index, v)
    
        index : GLuint
        v : POINTER(c_float)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, GLshort, GLshort])
def glVertexAttrib2s(index, x, y, _api_=None): 
    """glVertexAttrib2s(index, x, y)
    
        index : GLuint
        x : GLshort
        y : GLshort
    """
    return _api_(index, x, y)
    
@bind(None, [GLuint, POINTER(c_short)])
def glVertexAttrib2sv(index, v, _api_=None): 
    """glVertexAttrib2sv(index, v)
    
        index : GLuint
        v : POINTER(c_short)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, GLdouble, GLdouble, GLdouble])
def glVertexAttrib3d(index, x, y, z, _api_=None): 
    """glVertexAttrib3d(index, x, y, z)
    
        index : GLuint
        x : GLdouble
        y : GLdouble
        z : GLdouble
    """
    return _api_(index, x, y, z)
    
@bind(None, [GLuint, POINTER(c_double)])
def glVertexAttrib3dv(index, v, _api_=None): 
    """glVertexAttrib3dv(index, v)
    
        index : GLuint
        v : POINTER(c_double)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, GLfloat, GLfloat, GLfloat])
def glVertexAttrib3f(index, x, y, z, _api_=None): 
    """glVertexAttrib3f(index, x, y, z)
    
        index : GLuint
        x : GLfloat
        y : GLfloat
        z : GLfloat
    """
    return _api_(index, x, y, z)
    
@bind(None, [GLuint, POINTER(c_float)])
def glVertexAttrib3fv(index, v, _api_=None): 
    """glVertexAttrib3fv(index, v)
    
        index : GLuint
        v : POINTER(c_float)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, GLshort, GLshort, GLshort])
def glVertexAttrib3s(index, x, y, z, _api_=None): 
    """glVertexAttrib3s(index, x, y, z)
    
        index : GLuint
        x : GLshort
        y : GLshort
        z : GLshort
    """
    return _api_(index, x, y, z)
    
@bind(None, [GLuint, POINTER(c_short)])
def glVertexAttrib3sv(index, v, _api_=None): 
    """glVertexAttrib3sv(index, v)
    
        index : GLuint
        v : POINTER(c_short)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, POINTER(c_byte)])
def glVertexAttrib4Nbv(index, v, _api_=None): 
    """glVertexAttrib4Nbv(index, v)
    
        index : GLuint
        v : POINTER(c_byte)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, POINTER(c_long)])
def glVertexAttrib4Niv(index, v, _api_=None): 
    """glVertexAttrib4Niv(index, v)
    
        index : GLuint
        v : POINTER(c_long)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, POINTER(c_short)])
def glVertexAttrib4Nsv(index, v, _api_=None): 
    """glVertexAttrib4Nsv(index, v)
    
        index : GLuint
        v : POINTER(c_short)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, GLubyte, GLubyte, GLubyte, GLubyte])
def glVertexAttrib4Nub(index, x, y, z, w, _api_=None): 
    """glVertexAttrib4Nub(index, x, y, z, w)
    
        index : GLuint
        x : GLubyte
        y : GLubyte
        z : GLubyte
        w : GLubyte
    """
    return _api_(index, x, y, z, w)
    
@bind(None, [GLuint, POINTER(c_ubyte)])
def glVertexAttrib4Nubv(index, v, _api_=None): 
    """glVertexAttrib4Nubv(index, v)
    
        index : GLuint
        v : POINTER(c_ubyte)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, POINTER(c_ulong)])
def glVertexAttrib4Nuiv(index, v, _api_=None): 
    """glVertexAttrib4Nuiv(index, v)
    
        index : GLuint
        v : POINTER(c_ulong)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, POINTER(c_ushort)])
def glVertexAttrib4Nusv(index, v, _api_=None): 
    """glVertexAttrib4Nusv(index, v)
    
        index : GLuint
        v : POINTER(c_ushort)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, POINTER(c_byte)])
def glVertexAttrib4bv(index, v, _api_=None): 
    """glVertexAttrib4bv(index, v)
    
        index : GLuint
        v : POINTER(c_byte)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, GLdouble, GLdouble, GLdouble, GLdouble])
def glVertexAttrib4d(index, x, y, z, w, _api_=None): 
    """glVertexAttrib4d(index, x, y, z, w)
    
        index : GLuint
        x : GLdouble
        y : GLdouble
        z : GLdouble
        w : GLdouble
    """
    return _api_(index, x, y, z, w)
    
@bind(None, [GLuint, POINTER(c_double)])
def glVertexAttrib4dv(index, v, _api_=None): 
    """glVertexAttrib4dv(index, v)
    
        index : GLuint
        v : POINTER(c_double)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, GLfloat, GLfloat, GLfloat, GLfloat])
def glVertexAttrib4f(index, x, y, z, w, _api_=None): 
    """glVertexAttrib4f(index, x, y, z, w)
    
        index : GLuint
        x : GLfloat
        y : GLfloat
        z : GLfloat
        w : GLfloat
    """
    return _api_(index, x, y, z, w)
    
@bind(None, [GLuint, POINTER(c_float)])
def glVertexAttrib4fv(index, v, _api_=None): 
    """glVertexAttrib4fv(index, v)
    
        index : GLuint
        v : POINTER(c_float)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, POINTER(c_long)])
def glVertexAttrib4iv(index, v, _api_=None): 
    """glVertexAttrib4iv(index, v)
    
        index : GLuint
        v : POINTER(c_long)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, GLshort, GLshort, GLshort, GLshort])
def glVertexAttrib4s(index, x, y, z, w, _api_=None): 
    """glVertexAttrib4s(index, x, y, z, w)
    
        index : GLuint
        x : GLshort
        y : GLshort
        z : GLshort
        w : GLshort
    """
    return _api_(index, x, y, z, w)
    
@bind(None, [GLuint, POINTER(c_short)])
def glVertexAttrib4sv(index, v, _api_=None): 
    """glVertexAttrib4sv(index, v)
    
        index : GLuint
        v : POINTER(c_short)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, POINTER(c_ubyte)])
def glVertexAttrib4ubv(index, v, _api_=None): 
    """glVertexAttrib4ubv(index, v)
    
        index : GLuint
        v : POINTER(c_ubyte)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, POINTER(c_ulong)])
def glVertexAttrib4uiv(index, v, _api_=None): 
    """glVertexAttrib4uiv(index, v)
    
        index : GLuint
        v : POINTER(c_ulong)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, POINTER(c_ushort)])
def glVertexAttrib4usv(index, v, _api_=None): 
    """glVertexAttrib4usv(index, v)
    
        index : GLuint
        v : POINTER(c_ushort)
    """
    return _api_(index, v)
    
@bind(None, [GLuint, GLint, GLenum, GLboolean, GLsizei, c_void_p])
def glVertexAttribPointer(index, size, type, normalized, stride, pointer, _api_=None): 
    """glVertexAttribPointer(index, size, type, normalized, stride, pointer)
    
        index : GLuint
        size : GLint
        type : GLenum
        normalized : GLboolean
        stride : GLsizei
        pointer : c_void_p
    """
    return _api_(index, size, type, normalized, stride, pointer)
    
@bind(None, [GLuint])
def glEnableVertexAttribArray(index, _api_=None): 
    """glEnableVertexAttribArray(index)
    
        index : GLuint
    """
    return _api_(index)
    
@bind(None, [GLuint])
def glDisableVertexAttribArray(index, _api_=None): 
    """glDisableVertexAttribArray(index)
    
        index : GLuint
    """
    return _api_(index)
    
@bind(None, [GLuint, GLenum, POINTER(c_double)])
def glGetVertexAttribdv(index, pname, params, _api_=None): 
    """glGetVertexAttribdv(index, pname, params)
    
        index : GLuint
        pname : GLenum
        params : POINTER(c_double)
    """
    return _api_(index, pname, params)
    
@bind(None, [GLuint, GLenum, POINTER(c_float)])
def glGetVertexAttribfv(index, pname, params, _api_=None): 
    """glGetVertexAttribfv(index, pname, params)
    
        index : GLuint
        pname : GLenum
        params : POINTER(c_float)
    """
    return _api_(index, pname, params)
    
@bind(None, [GLuint, GLenum, POINTER(c_long)])
def glGetVertexAttribiv(index, pname, params, _api_=None): 
    """glGetVertexAttribiv(index, pname, params)
    
        index : GLuint
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(index, pname, params)
    
@bind(None, [GLuint, GLenum, c_void_p])
def glGetVertexAttribPointerv(index, pname, pointer, _api_=None): 
    """glGetVertexAttribPointerv(index, pname, pointer)
    
        index : GLuint
        pname : GLenum
        pointer : c_void_p
    """
    return _api_(index, pname, pointer)
    
@bind(None, [GLuint])
def glDeleteShader(shader, _api_=None): 
    """glDeleteShader(shader)
    
        shader : GLuint
    """
    return _api_(shader)
    
@bind(None, [GLuint, GLuint])
def glDetachShader(program, shader, _api_=None): 
    """glDetachShader(program, shader)
    
        program : GLuint
        shader : GLuint
    """
    return _api_(program, shader)
    
@bind(GLuint, [GLenum])
def glCreateShader(type, _api_=None): 
    """glCreateShader(type)
    
        type : GLenum
    """
    return _api_(type)
    
@bind(None, [GLuint, GLsizei, c_char_p, POINTER(c_long)])
def glShaderSource(shader, count, string, length, _api_=None): 
    """glShaderSource(shader, count, string, length)
    
        shader : GLuint
        count : GLsizei
        string : c_char_p
        length : POINTER(c_long)
    """
    return _api_(shader, count, string, length)
    
@bind(None, [GLuint])
def glCompileShader(shader, _api_=None): 
    """glCompileShader(shader)
    
        shader : GLuint
    """
    return _api_(shader)
    
@bind(GLuint, [])
def glCreateProgram(_api_=None): 
    """glCreateProgram()
    
        
    """
    return _api_()
    
@bind(None, [GLuint, GLuint])
def glAttachShader(program, shader, _api_=None): 
    """glAttachShader(program, shader)
    
        program : GLuint
        shader : GLuint
    """
    return _api_(program, shader)
    
@bind(None, [GLuint])
def glLinkProgram(program, _api_=None): 
    """glLinkProgram(program)
    
        program : GLuint
    """
    return _api_(program)
    
@bind(None, [GLuint])
def glUseProgram(program, _api_=None): 
    """glUseProgram(program)
    
        program : GLuint
    """
    return _api_(program)
    
@bind(None, [GLuint])
def glDeleteProgram(program, _api_=None): 
    """glDeleteProgram(program)
    
        program : GLuint
    """
    return _api_(program)
    
@bind(None, [GLuint])
def glValidateProgram(program, _api_=None): 
    """glValidateProgram(program)
    
        program : GLuint
    """
    return _api_(program)
    
@bind(None, [GLint, GLfloat])
def glUniform1f(location, v0, _api_=None): 
    """glUniform1f(location, v0)
    
        location : GLint
        v0 : GLfloat
    """
    return _api_(location, v0)
    
@bind(None, [GLint, GLfloat, GLfloat])
def glUniform2f(location, v0, v1, _api_=None): 
    """glUniform2f(location, v0, v1)
    
        location : GLint
        v0 : GLfloat
        v1 : GLfloat
    """
    return _api_(location, v0, v1)
    
@bind(None, [GLint, GLfloat, GLfloat, GLfloat])
def glUniform3f(location, v0, v1, v2, _api_=None): 
    """glUniform3f(location, v0, v1, v2)
    
        location : GLint
        v0 : GLfloat
        v1 : GLfloat
        v2 : GLfloat
    """
    return _api_(location, v0, v1, v2)
    
@bind(None, [GLint, GLfloat, GLfloat, GLfloat, GLfloat])
def glUniform4f(location, v0, v1, v2, v3, _api_=None): 
    """glUniform4f(location, v0, v1, v2, v3)
    
        location : GLint
        v0 : GLfloat
        v1 : GLfloat
        v2 : GLfloat
        v3 : GLfloat
    """
    return _api_(location, v0, v1, v2, v3)
    
@bind(None, [GLint, GLint])
def glUniform1i(location, v0, _api_=None): 
    """glUniform1i(location, v0)
    
        location : GLint
        v0 : GLint
    """
    return _api_(location, v0)
    
@bind(None, [GLint, GLint, GLint])
def glUniform2i(location, v0, v1, _api_=None): 
    """glUniform2i(location, v0, v1)
    
        location : GLint
        v0 : GLint
        v1 : GLint
    """
    return _api_(location, v0, v1)
    
@bind(None, [GLint, GLint, GLint, GLint])
def glUniform3i(location, v0, v1, v2, _api_=None): 
    """glUniform3i(location, v0, v1, v2)
    
        location : GLint
        v0 : GLint
        v1 : GLint
        v2 : GLint
    """
    return _api_(location, v0, v1, v2)
    
@bind(None, [GLint, GLint, GLint, GLint, GLint])
def glUniform4i(location, v0, v1, v2, v3, _api_=None): 
    """glUniform4i(location, v0, v1, v2, v3)
    
        location : GLint
        v0 : GLint
        v1 : GLint
        v2 : GLint
        v3 : GLint
    """
    return _api_(location, v0, v1, v2, v3)
    
@bind(None, [GLint, GLsizei, POINTER(c_float)])
def glUniform1fv(location, count, value, _api_=None): 
    """glUniform1fv(location, count, value)
    
        location : GLint
        count : GLsizei
        value : POINTER(c_float)
    """
    return _api_(location, count, value)
    
@bind(None, [GLint, GLsizei, POINTER(c_float)])
def glUniform2fv(location, count, value, _api_=None): 
    """glUniform2fv(location, count, value)
    
        location : GLint
        count : GLsizei
        value : POINTER(c_float)
    """
    return _api_(location, count, value)
    
@bind(None, [GLint, GLsizei, POINTER(c_float)])
def glUniform3fv(location, count, value, _api_=None): 
    """glUniform3fv(location, count, value)
    
        location : GLint
        count : GLsizei
        value : POINTER(c_float)
    """
    return _api_(location, count, value)
    
@bind(None, [GLint, GLsizei, POINTER(c_float)])
def glUniform4fv(location, count, value, _api_=None): 
    """glUniform4fv(location, count, value)
    
        location : GLint
        count : GLsizei
        value : POINTER(c_float)
    """
    return _api_(location, count, value)
    
@bind(None, [GLint, GLsizei, POINTER(c_long)])
def glUniform1iv(location, count, value, _api_=None): 
    """glUniform1iv(location, count, value)
    
        location : GLint
        count : GLsizei
        value : POINTER(c_long)
    """
    return _api_(location, count, value)
    
@bind(None, [GLint, GLsizei, POINTER(c_long)])
def glUniform2iv(location, count, value, _api_=None): 
    """glUniform2iv(location, count, value)
    
        location : GLint
        count : GLsizei
        value : POINTER(c_long)
    """
    return _api_(location, count, value)
    
@bind(None, [GLint, GLsizei, POINTER(c_long)])
def glUniform3iv(location, count, value, _api_=None): 
    """glUniform3iv(location, count, value)
    
        location : GLint
        count : GLsizei
        value : POINTER(c_long)
    """
    return _api_(location, count, value)
    
@bind(None, [GLint, GLsizei, POINTER(c_long)])
def glUniform4iv(location, count, value, _api_=None): 
    """glUniform4iv(location, count, value)
    
        location : GLint
        count : GLsizei
        value : POINTER(c_long)
    """
    return _api_(location, count, value)
    
@bind(None, [GLint, GLsizei, GLboolean, POINTER(c_float)])
def glUniformMatrix2fv(location, count, transpose, value, _api_=None): 
    """glUniformMatrix2fv(location, count, transpose, value)
    
        location : GLint
        count : GLsizei
        transpose : GLboolean
        value : POINTER(c_float)
    """
    return _api_(location, count, transpose, value)
    
@bind(None, [GLint, GLsizei, GLboolean, POINTER(c_float)])
def glUniformMatrix3fv(location, count, transpose, value, _api_=None): 
    """glUniformMatrix3fv(location, count, transpose, value)
    
        location : GLint
        count : GLsizei
        transpose : GLboolean
        value : POINTER(c_float)
    """
    return _api_(location, count, transpose, value)
    
@bind(None, [GLint, GLsizei, GLboolean, POINTER(c_float)])
def glUniformMatrix4fv(location, count, transpose, value, _api_=None): 
    """glUniformMatrix4fv(location, count, transpose, value)
    
        location : GLint
        count : GLsizei
        transpose : GLboolean
        value : POINTER(c_float)
    """
    return _api_(location, count, transpose, value)
    
@bind(GLboolean, [GLuint])
def glIsShader(shader, _api_=None): 
    """glIsShader(shader)
    
        shader : GLuint
    """
    return _api_(shader)
    
@bind(GLboolean, [GLuint])
def glIsProgram(program, _api_=None): 
    """glIsProgram(program)
    
        program : GLuint
    """
    return _api_(program)
    
@bind(None, [GLuint, GLenum, POINTER(c_long)])
def glGetShaderiv(shader, pname, params, _api_=None): 
    """glGetShaderiv(shader, pname, params)
    
        shader : GLuint
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(shader, pname, params)
    
@bind(None, [GLuint, GLenum, POINTER(c_long)])
def glGetProgramiv(program, pname, params, _api_=None): 
    """glGetProgramiv(program, pname, params)
    
        program : GLuint
        pname : GLenum
        params : POINTER(c_long)
    """
    return _api_(program, pname, params)
    
@bind(None, [GLuint, GLsizei, POINTER(c_long), POINTER(c_ulong)])
def glGetAttachedShaders(program, maxCount, count, shaders, _api_=None): 
    """glGetAttachedShaders(program, maxCount, count, shaders)
    
        program : GLuint
        maxCount : GLsizei
        count : POINTER(c_long)
        shaders : POINTER(c_ulong)
    """
    return _api_(program, maxCount, count, shaders)
    
@bind(None, [GLuint, GLsizei, POINTER(c_long), c_char_p])
def glGetShaderInfoLog(shader, bufSize, length, infoLog, _api_=None): 
    """glGetShaderInfoLog(shader, bufSize, length, infoLog)
    
        shader : GLuint
        bufSize : GLsizei
        length : POINTER(c_long)
        infoLog : c_char_p
    """
    return _api_(shader, bufSize, length, infoLog)
    
@bind(None, [GLuint, GLsizei, POINTER(c_long), c_char_p])
def glGetProgramInfoLog(program, bufSize, length, infoLog, _api_=None): 
    """glGetProgramInfoLog(program, bufSize, length, infoLog)
    
        program : GLuint
        bufSize : GLsizei
        length : POINTER(c_long)
        infoLog : c_char_p
    """
    return _api_(program, bufSize, length, infoLog)
    
@bind(GLint, [GLuint, c_char_p])
def glGetUniformLocation(program, name, _api_=None): 
    """glGetUniformLocation(program, name)
    
        program : GLuint
        name : c_char_p
    """
    return _api_(program, name)
    
@bind(None, [GLuint, GLuint, GLsizei, POINTER(c_long), POINTER(c_long), POINTER(c_ulong), c_char_p])
def glGetActiveUniform(program, index, bufSize, length, size, type, name, _api_=None): 
    """glGetActiveUniform(program, index, bufSize, length, size, type, name)
    
        program : GLuint
        index : GLuint
        bufSize : GLsizei
        length : POINTER(c_long)
        size : POINTER(c_long)
        type : POINTER(c_ulong)
        name : c_char_p
    """
    return _api_(program, index, bufSize, length, size, type, name)
    
@bind(None, [GLuint, GLint, POINTER(c_float)])
def glGetUniformfv(program, location, params, _api_=None): 
    """glGetUniformfv(program, location, params)
    
        program : GLuint
        location : GLint
        params : POINTER(c_float)
    """
    return _api_(program, location, params)
    
@bind(None, [GLuint, GLint, POINTER(c_long)])
def glGetUniformiv(program, location, params, _api_=None): 
    """glGetUniformiv(program, location, params)
    
        program : GLuint
        location : GLint
        params : POINTER(c_long)
    """
    return _api_(program, location, params)
    
@bind(None, [GLuint, GLsizei, POINTER(c_long), c_char_p])
def glGetShaderSource(shader, bufSize, length, source, _api_=None): 
    """glGetShaderSource(shader, bufSize, length, source)
    
        shader : GLuint
        bufSize : GLsizei
        length : POINTER(c_long)
        source : c_char_p
    """
    return _api_(shader, bufSize, length, source)
    
@bind(None, [GLuint, GLuint, c_char_p])
def glBindAttribLocation(program, index, name, _api_=None): 
    """glBindAttribLocation(program, index, name)
    
        program : GLuint
        index : GLuint
        name : c_char_p
    """
    return _api_(program, index, name)
    
@bind(None, [GLuint, GLuint, GLsizei, POINTER(c_long), POINTER(c_long), POINTER(c_ulong), c_char_p])
def glGetActiveAttrib(program, index, bufSize, length, size, type, name, _api_=None): 
    """glGetActiveAttrib(program, index, bufSize, length, size, type, name)
    
        program : GLuint
        index : GLuint
        bufSize : GLsizei
        length : POINTER(c_long)
        size : POINTER(c_long)
        type : POINTER(c_ulong)
        name : c_char_p
    """
    return _api_(program, index, bufSize, length, size, type, name)
    
@bind(GLint, [GLuint, c_char_p])
def glGetAttribLocation(program, name, _api_=None): 
    """glGetAttribLocation(program, name)
    
        program : GLuint
        name : c_char_p
    """
    return _api_(program, name)
    
@bind(None, [GLenum, GLenum, GLint, GLuint])
def glStencilFuncSeparate(face, func, ref, mask, _api_=None): 
    """glStencilFuncSeparate(face, func, ref, mask)
    
        face : GLenum
        func : GLenum
        ref : GLint
        mask : GLuint
    """
    return _api_(face, func, ref, mask)
    
@bind(None, [GLenum, GLenum, GLenum, GLenum])
def glStencilOpSeparate(face, fail, zfail, zpass, _api_=None): 
    """glStencilOpSeparate(face, fail, zfail, zpass)
    
        face : GLenum
        fail : GLenum
        zfail : GLenum
        zpass : GLenum
    """
    return _api_(face, fail, zfail, zpass)
    
@bind(None, [GLenum, GLuint])
def glStencilMaskSeparate(face, mask, _api_=None): 
    """glStencilMaskSeparate(face, mask)
    
        face : GLenum
        mask : GLuint
    """
    return _api_(face, mask)
    


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~ End of code generated from:
#~   "inc/OpenGL/gl.h"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

