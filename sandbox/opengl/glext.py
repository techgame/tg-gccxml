#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~ Imports 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

from _ctypes_gl import *
from gl import *

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~ Code generated from:
#~   "OpenGL/glext.h"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

GL_GLEXT_VERSION = 29

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

if 1: # ifndef GL_ARB_imaging ("OpenGL/glext.h":103)
    """GL_ARB_imaging"""
    GL_CONSTANT_COLOR = 0x8001
    GL_ONE_MINUS_CONSTANT_COLOR = 0x8002
    GL_CONSTANT_ALPHA = 0x8003
    GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004
    GL_BLEND_COLOR = 0x8005
    GL_FUNC_ADD = 0x8006
    GL_MIN = 0x8007
    GL_MAX = 0x8008
    GL_BLEND_EQUATION = 0x8009
    GL_FUNC_SUBTRACT = 0x800A
    GL_FUNC_REVERSE_SUBTRACT = 0x800B
    GL_CONVOLUTION_1D = 0x8010
    GL_CONVOLUTION_2D = 0x8011
    GL_SEPARABLE_2D = 0x8012
    GL_CONVOLUTION_BORDER_MODE = 0x8013
    GL_CONVOLUTION_FILTER_SCALE = 0x8014
    GL_CONVOLUTION_FILTER_BIAS = 0x8015
    GL_REDUCE = 0x8016
    GL_CONVOLUTION_FORMAT = 0x8017
    GL_CONVOLUTION_WIDTH = 0x8018
    GL_CONVOLUTION_HEIGHT = 0x8019
    GL_MAX_CONVOLUTION_WIDTH = 0x801A
    GL_MAX_CONVOLUTION_HEIGHT = 0x801B
    GL_POST_CONVOLUTION_RED_SCALE = 0x801C
    GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D
    GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E
    GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F
    GL_POST_CONVOLUTION_RED_BIAS = 0x8020
    GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021
    GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022
    GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023
    GL_HISTOGRAM = 0x8024
    GL_PROXY_HISTOGRAM = 0x8025
    GL_HISTOGRAM_WIDTH = 0x8026
    GL_HISTOGRAM_FORMAT = 0x8027
    GL_HISTOGRAM_RED_SIZE = 0x8028
    GL_HISTOGRAM_GREEN_SIZE = 0x8029
    GL_HISTOGRAM_BLUE_SIZE = 0x802A
    GL_HISTOGRAM_ALPHA_SIZE = 0x802B
    GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C
    GL_HISTOGRAM_SINK = 0x802D
    GL_MINMAX = 0x802E
    GL_MINMAX_FORMAT = 0x802F
    GL_MINMAX_SINK = 0x8030
    GL_TABLE_TOO_LARGE = 0x8031
    GL_COLOR_MATRIX = 0x80B1
    GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2
    GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3
    GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4
    GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5
    GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6
    GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7
    GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8
    GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9
    GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA
    GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB
    GL_COLOR_TABLE = 0x80D0
    GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1
    GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2
    GL_PROXY_COLOR_TABLE = 0x80D3
    GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4
    GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5
    GL_COLOR_TABLE_SCALE = 0x80D6
    GL_COLOR_TABLE_BIAS = 0x80D7
    GL_COLOR_TABLE_FORMAT = 0x80D8
    GL_COLOR_TABLE_WIDTH = 0x80D9
    GL_COLOR_TABLE_RED_SIZE = 0x80DA
    GL_COLOR_TABLE_GREEN_SIZE = 0x80DB
    GL_COLOR_TABLE_BLUE_SIZE = 0x80DC
    GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD
    GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE
    GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF
    GL_CONSTANT_BORDER = 0x8151
    GL_REPLICATE_BORDER = 0x8153
    GL_CONVOLUTION_BORDER_COLOR = 0x8154

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

if 1: # ifndef GL_ARB_multitexture ("OpenGL/glext.h":462)
    """GL_ARB_multitexture"""
    GL_TEXTURE0_ARB = 0x84C0
    GL_TEXTURE1_ARB = 0x84C1
    GL_TEXTURE2_ARB = 0x84C2
    GL_TEXTURE3_ARB = 0x84C3
    GL_TEXTURE4_ARB = 0x84C4
    GL_TEXTURE5_ARB = 0x84C5
    GL_TEXTURE6_ARB = 0x84C6
    GL_TEXTURE7_ARB = 0x84C7
    GL_TEXTURE8_ARB = 0x84C8
    GL_TEXTURE9_ARB = 0x84C9
    GL_TEXTURE10_ARB = 0x84CA
    GL_TEXTURE11_ARB = 0x84CB
    GL_TEXTURE12_ARB = 0x84CC
    GL_TEXTURE13_ARB = 0x84CD
    GL_TEXTURE14_ARB = 0x84CE
    GL_TEXTURE15_ARB = 0x84CF
    GL_TEXTURE16_ARB = 0x84D0
    GL_TEXTURE17_ARB = 0x84D1
    GL_TEXTURE18_ARB = 0x84D2
    GL_TEXTURE19_ARB = 0x84D3
    GL_TEXTURE20_ARB = 0x84D4
    GL_TEXTURE21_ARB = 0x84D5
    GL_TEXTURE22_ARB = 0x84D6
    GL_TEXTURE23_ARB = 0x84D7
    GL_TEXTURE24_ARB = 0x84D8
    GL_TEXTURE25_ARB = 0x84D9
    GL_TEXTURE26_ARB = 0x84DA
    GL_TEXTURE27_ARB = 0x84DB
    GL_TEXTURE28_ARB = 0x84DC
    GL_TEXTURE29_ARB = 0x84DD
    GL_TEXTURE30_ARB = 0x84DE
    GL_TEXTURE31_ARB = 0x84DF
    GL_ACTIVE_TEXTURE_ARB = 0x84E0
    GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1
    GL_MAX_TEXTURE_UNITS_ARB = 0x84E2

if 1: # ifndef GL_ARB_transpose_matrix ("OpenGL/glext.h":500)
    """GL_ARB_transpose_matrix"""
    GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3
    GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4
    GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5
    GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6

if 1: # ifndef GL_ARB_multisample ("OpenGL/glext.h":507)
    """GL_ARB_multisample"""
    GL_MULTISAMPLE_ARB = 0x809D
    GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E
    GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F
    GL_SAMPLE_COVERAGE_ARB = 0x80A0
    GL_SAMPLE_BUFFERS_ARB = 0x80A8
    GL_SAMPLES_ARB = 0x80A9
    GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA
    GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB
    GL_MULTISAMPLE_BIT_ARB = 0x20000000

if 1: # ifndef GL_ARB_texture_env_add ("OpenGL/glext.h":519)
    """GL_ARB_texture_env_add"""

if 1: # ifndef GL_ARB_texture_cube_map ("OpenGL/glext.h":522)
    """GL_ARB_texture_cube_map"""
    GL_NORMAL_MAP_ARB = 0x8511
    GL_REFLECTION_MAP_ARB = 0x8512
    GL_TEXTURE_CUBE_MAP_ARB = 0x8513
    GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514
    GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515
    GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516
    GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517
    GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518
    GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519
    GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A
    GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B
    GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C

if 1: # ifndef GL_ARB_texture_compression ("OpenGL/glext.h":537)
    """GL_ARB_texture_compression"""
    GL_COMPRESSED_ALPHA_ARB = 0x84E9
    GL_COMPRESSED_LUMINANCE_ARB = 0x84EA
    GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB
    GL_COMPRESSED_INTENSITY_ARB = 0x84EC
    GL_COMPRESSED_RGB_ARB = 0x84ED
    GL_COMPRESSED_RGBA_ARB = 0x84EE
    GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF
    GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0
    GL_TEXTURE_COMPRESSED_ARB = 0x86A1
    GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2
    GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3

if 1: # ifndef GL_ARB_texture_border_clamp ("OpenGL/glext.h":551)
    """GL_ARB_texture_border_clamp"""
    GL_CLAMP_TO_BORDER_ARB = 0x812D

if 1: # ifndef GL_ARB_point_parameters ("OpenGL/glext.h":555)
    """GL_ARB_point_parameters"""
    GL_POINT_SIZE_MIN_ARB = 0x8126
    GL_POINT_SIZE_MAX_ARB = 0x8127
    GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128
    GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129

if 1: # ifndef GL_ARB_vertex_blend ("OpenGL/glext.h":562)
    """GL_ARB_vertex_blend"""
    GL_MAX_VERTEX_UNITS_ARB = 0x86A4
    GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5
    GL_WEIGHT_SUM_UNITY_ARB = 0x86A6
    GL_VERTEX_BLEND_ARB = 0x86A7
    GL_CURRENT_WEIGHT_ARB = 0x86A8
    GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9
    GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA
    GL_WEIGHT_ARRAY_SIZE_ARB = 0x86AB
    GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC
    GL_WEIGHT_ARRAY_ARB = 0x86AD
    GL_MODELVIEW0_ARB = 0x1700
    GL_MODELVIEW1_ARB = 0x850A
    GL_MODELVIEW2_ARB = 0x8722
    GL_MODELVIEW3_ARB = 0x8723
    GL_MODELVIEW4_ARB = 0x8724
    GL_MODELVIEW5_ARB = 0x8725
    GL_MODELVIEW6_ARB = 0x8726
    GL_MODELVIEW7_ARB = 0x8727
    GL_MODELVIEW8_ARB = 0x8728
    GL_MODELVIEW9_ARB = 0x8729
    GL_MODELVIEW10_ARB = 0x872A
    GL_MODELVIEW11_ARB = 0x872B
    GL_MODELVIEW12_ARB = 0x872C
    GL_MODELVIEW13_ARB = 0x872D
    GL_MODELVIEW14_ARB = 0x872E
    GL_MODELVIEW15_ARB = 0x872F
    GL_MODELVIEW16_ARB = 0x8730
    GL_MODELVIEW17_ARB = 0x8731
    GL_MODELVIEW18_ARB = 0x8732
    GL_MODELVIEW19_ARB = 0x8733
    GL_MODELVIEW20_ARB = 0x8734
    GL_MODELVIEW21_ARB = 0x8735
    GL_MODELVIEW22_ARB = 0x8736
    GL_MODELVIEW23_ARB = 0x8737
    GL_MODELVIEW24_ARB = 0x8738
    GL_MODELVIEW25_ARB = 0x8739
    GL_MODELVIEW26_ARB = 0x873A
    GL_MODELVIEW27_ARB = 0x873B
    GL_MODELVIEW28_ARB = 0x873C
    GL_MODELVIEW29_ARB = 0x873D
    GL_MODELVIEW30_ARB = 0x873E
    GL_MODELVIEW31_ARB = 0x873F

if 1: # ifndef GL_ARB_matrix_palette ("OpenGL/glext.h":607)
    """GL_ARB_matrix_palette"""
    GL_MATRIX_PALETTE_ARB = 0x8840
    GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841
    GL_MAX_PALETTE_MATRICES_ARB = 0x8842
    GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843
    GL_MATRIX_INDEX_ARRAY_ARB = 0x8844
    GL_CURRENT_MATRIX_INDEX_ARB = 0x8845
    GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846
    GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847
    GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848
    GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849

if 1: # ifndef GL_ARB_texture_env_combine ("OpenGL/glext.h":620)
    """GL_ARB_texture_env_combine"""
    GL_COMBINE_ARB = 0x8570
    GL_COMBINE_RGB_ARB = 0x8571
    GL_COMBINE_ALPHA_ARB = 0x8572
    GL_SOURCE0_RGB_ARB = 0x8580
    GL_SOURCE1_RGB_ARB = 0x8581
    GL_SOURCE2_RGB_ARB = 0x8582
    GL_SOURCE0_ALPHA_ARB = 0x8588
    GL_SOURCE1_ALPHA_ARB = 0x8589
    GL_SOURCE2_ALPHA_ARB = 0x858A
    GL_OPERAND0_RGB_ARB = 0x8590
    GL_OPERAND1_RGB_ARB = 0x8591
    GL_OPERAND2_RGB_ARB = 0x8592
    GL_OPERAND0_ALPHA_ARB = 0x8598
    GL_OPERAND1_ALPHA_ARB = 0x8599
    GL_OPERAND2_ALPHA_ARB = 0x859A
    GL_RGB_SCALE_ARB = 0x8573
    GL_ADD_SIGNED_ARB = 0x8574
    GL_INTERPOLATE_ARB = 0x8575
    GL_SUBTRACT_ARB = 0x84E7
    GL_CONSTANT_ARB = 0x8576
    GL_PRIMARY_COLOR_ARB = 0x8577
    GL_PREVIOUS_ARB = 0x8578

if 1: # ifndef GL_ARB_texture_env_crossbar ("OpenGL/glext.h":645)
    """GL_ARB_texture_env_crossbar"""

if 1: # ifndef GL_ARB_texture_env_dot3 ("OpenGL/glext.h":648)
    """GL_ARB_texture_env_dot3"""
    GL_DOT3_RGB_ARB = 0x86AE
    GL_DOT3_RGBA_ARB = 0x86AF

if 1: # ifndef GL_ARB_texture_mirrored_repeat ("OpenGL/glext.h":653)
    """GL_ARB_texture_mirrored_repeat"""
    GL_MIRRORED_REPEAT_ARB = 0x8370

if 1: # ifndef GL_ARB_depth_texture ("OpenGL/glext.h":657)
    """GL_ARB_depth_texture"""
    GL_DEPTH_COMPONENT16_ARB = 0x81A5
    GL_DEPTH_COMPONENT24_ARB = 0x81A6
    GL_DEPTH_COMPONENT32_ARB = 0x81A7
    GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A
    GL_DEPTH_TEXTURE_MODE_ARB = 0x884B

if 1: # ifndef GL_ARB_shadow ("OpenGL/glext.h":665)
    """GL_ARB_shadow"""
    GL_TEXTURE_COMPARE_MODE_ARB = 0x884C
    GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D
    GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E

if 1: # ifndef GL_ARB_shadow_ambient ("OpenGL/glext.h":671)
    """GL_ARB_shadow_ambient"""
    GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF

if 1: # ifndef GL_ARB_window_pos ("OpenGL/glext.h":675)
    """GL_ARB_window_pos"""

if 1: # ifndef GL_ARB_vertex_program ("OpenGL/glext.h":678)
    """GL_ARB_vertex_program"""
    GL_COLOR_SUM_ARB = 0x8458
    GL_VERTEX_PROGRAM_ARB = 0x8620
    GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622
    GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623
    GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624
    GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625
    GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626
    GL_PROGRAM_LENGTH_ARB = 0x8627
    GL_PROGRAM_STRING_ARB = 0x8628
    GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E
    GL_MAX_PROGRAM_MATRICES_ARB = 0x862F
    GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640
    GL_CURRENT_MATRIX_ARB = 0x8641
    GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642
    GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643
    GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645
    GL_PROGRAM_ERROR_POSITION_ARB = 0x864B
    GL_PROGRAM_BINDING_ARB = 0x8677
    GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869
    GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A
    GL_PROGRAM_ERROR_STRING_ARB = 0x8874
    GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875
    GL_PROGRAM_FORMAT_ARB = 0x8876
    GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0
    GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1
    GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2
    GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3
    GL_PROGRAM_TEMPORARIES_ARB = 0x88A4
    GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5
    GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6
    GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7
    GL_PROGRAM_PARAMETERS_ARB = 0x88A8
    GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9
    GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA
    GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB
    GL_PROGRAM_ATTRIBS_ARB = 0x88AC
    GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD
    GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE
    GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF
    GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0
    GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1
    GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2
    GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3
    GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4
    GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5
    GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6
    GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7
    GL_MATRIX0_ARB = 0x88C0
    GL_MATRIX1_ARB = 0x88C1
    GL_MATRIX2_ARB = 0x88C2
    GL_MATRIX3_ARB = 0x88C3
    GL_MATRIX4_ARB = 0x88C4
    GL_MATRIX5_ARB = 0x88C5
    GL_MATRIX6_ARB = 0x88C6
    GL_MATRIX7_ARB = 0x88C7
    GL_MATRIX8_ARB = 0x88C8
    GL_MATRIX9_ARB = 0x88C9
    GL_MATRIX10_ARB = 0x88CA
    GL_MATRIX11_ARB = 0x88CB
    GL_MATRIX12_ARB = 0x88CC
    GL_MATRIX13_ARB = 0x88CD
    GL_MATRIX14_ARB = 0x88CE
    GL_MATRIX15_ARB = 0x88CF
    GL_MATRIX16_ARB = 0x88D0
    GL_MATRIX17_ARB = 0x88D1
    GL_MATRIX18_ARB = 0x88D2
    GL_MATRIX19_ARB = 0x88D3
    GL_MATRIX20_ARB = 0x88D4
    GL_MATRIX21_ARB = 0x88D5
    GL_MATRIX22_ARB = 0x88D6
    GL_MATRIX23_ARB = 0x88D7
    GL_MATRIX24_ARB = 0x88D8
    GL_MATRIX25_ARB = 0x88D9
    GL_MATRIX26_ARB = 0x88DA
    GL_MATRIX27_ARB = 0x88DB
    GL_MATRIX28_ARB = 0x88DC
    GL_MATRIX29_ARB = 0x88DD
    GL_MATRIX30_ARB = 0x88DE
    GL_MATRIX31_ARB = 0x88DF

if 1: # ifndef GL_ARB_fragment_program ("OpenGL/glext.h":760)
    """GL_ARB_fragment_program"""
    GL_FRAGMENT_PROGRAM_ARB = 0x8804
    GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805
    GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806
    GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807
    GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808
    GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809
    GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A
    GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B
    GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C
    GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D
    GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E
    GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F
    GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810
    GL_MAX_TEXTURE_COORDS_ARB = 0x8871
    GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872

if 1: # ifndef GL_ARB_vertex_buffer_object ("OpenGL/glext.h":778)
    """GL_ARB_vertex_buffer_object"""
    GL_BUFFER_SIZE_ARB = 0x8764
    GL_BUFFER_USAGE_ARB = 0x8765
    GL_ARRAY_BUFFER_ARB = 0x8892
    GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893
    GL_ARRAY_BUFFER_BINDING_ARB = 0x8894
    GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895
    GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896
    GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897
    GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898
    GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899
    GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A
    GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B
    GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C
    GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D
    GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E
    GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F
    GL_READ_ONLY_ARB = 0x88B8
    GL_WRITE_ONLY_ARB = 0x88B9
    GL_READ_WRITE_ARB = 0x88BA
    GL_BUFFER_ACCESS_ARB = 0x88BB
    GL_BUFFER_MAPPED_ARB = 0x88BC
    GL_BUFFER_MAP_POINTER_ARB = 0x88BD
    GL_STREAM_DRAW_ARB = 0x88E0
    GL_STREAM_READ_ARB = 0x88E1
    GL_STREAM_COPY_ARB = 0x88E2
    GL_STATIC_DRAW_ARB = 0x88E4
    GL_STATIC_READ_ARB = 0x88E5
    GL_STATIC_COPY_ARB = 0x88E6
    GL_DYNAMIC_DRAW_ARB = 0x88E8
    GL_DYNAMIC_READ_ARB = 0x88E9
    GL_DYNAMIC_COPY_ARB = 0x88EA

if 1: # ifndef GL_ARB_occlusion_query ("OpenGL/glext.h":812)
    """GL_ARB_occlusion_query"""
    GL_QUERY_COUNTER_BITS_ARB = 0x8864
    GL_CURRENT_QUERY_ARB = 0x8865
    GL_QUERY_RESULT_ARB = 0x8866
    GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867
    GL_SAMPLES_PASSED_ARB = 0x8914

if 1: # ifndef GL_ARB_shader_objects ("OpenGL/glext.h":820)
    """GL_ARB_shader_objects"""
    GL_PROGRAM_OBJECT_ARB = 0x8B40
    GL_SHADER_OBJECT_ARB = 0x8B48
    GL_OBJECT_TYPE_ARB = 0x8B4E
    GL_OBJECT_SUBTYPE_ARB = 0x8B4F
    GL_FLOAT_VEC2_ARB = 0x8B50
    GL_FLOAT_VEC3_ARB = 0x8B51
    GL_FLOAT_VEC4_ARB = 0x8B52
    GL_INT_VEC2_ARB = 0x8B53
    GL_INT_VEC3_ARB = 0x8B54
    GL_INT_VEC4_ARB = 0x8B55
    GL_BOOL_ARB = 0x8B56
    GL_BOOL_VEC2_ARB = 0x8B57
    GL_BOOL_VEC3_ARB = 0x8B58
    GL_BOOL_VEC4_ARB = 0x8B59
    GL_FLOAT_MAT2_ARB = 0x8B5A
    GL_FLOAT_MAT3_ARB = 0x8B5B
    GL_FLOAT_MAT4_ARB = 0x8B5C
    GL_SAMPLER_1D_ARB = 0x8B5D
    GL_SAMPLER_2D_ARB = 0x8B5E
    GL_SAMPLER_3D_ARB = 0x8B5F
    GL_SAMPLER_CUBE_ARB = 0x8B60
    GL_SAMPLER_1D_SHADOW_ARB = 0x8B61
    GL_SAMPLER_2D_SHADOW_ARB = 0x8B62
    GL_SAMPLER_2D_RECT_ARB = 0x8B63
    GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64
    GL_OBJECT_DELETE_STATUS_ARB = 0x8B80
    GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81
    GL_OBJECT_LINK_STATUS_ARB = 0x8B82
    GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83
    GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84
    GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85
    GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86
    GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87
    GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88

if 1: # ifndef GL_ARB_vertex_shader ("OpenGL/glext.h":857)
    """GL_ARB_vertex_shader"""
    GL_VERTEX_SHADER_ARB = 0x8B31
    GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A
    GL_MAX_VARYING_FLOATS_ARB = 0x8B4B
    GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C
    GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D
    GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89
    GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A

if 1: # ifndef GL_ARB_fragment_shader ("OpenGL/glext.h":867)
    """GL_ARB_fragment_shader"""
    GL_FRAGMENT_SHADER_ARB = 0x8B30
    GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49
    GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B

if 1: # ifndef GL_ARB_shading_language_100 ("OpenGL/glext.h":873)
    """GL_ARB_shading_language_100"""
    GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C

if 1: # ifndef GL_ARB_texture_non_power_of_two ("OpenGL/glext.h":877)
    """GL_ARB_texture_non_power_of_two"""

if 1: # ifndef GL_ARB_point_sprite ("OpenGL/glext.h":880)
    """GL_ARB_point_sprite"""
    GL_POINT_SPRITE_ARB = 0x8861
    GL_COORD_REPLACE_ARB = 0x8862

if 1: # ifndef GL_ARB_fragment_program_shadow ("OpenGL/glext.h":885)
    """GL_ARB_fragment_program_shadow"""

if 1: # ifndef GL_ARB_draw_buffers ("OpenGL/glext.h":888)
    """GL_ARB_draw_buffers"""
    GL_MAX_DRAW_BUFFERS_ARB = 0x8824
    GL_DRAW_BUFFER0_ARB = 0x8825
    GL_DRAW_BUFFER1_ARB = 0x8826
    GL_DRAW_BUFFER2_ARB = 0x8827
    GL_DRAW_BUFFER3_ARB = 0x8828
    GL_DRAW_BUFFER4_ARB = 0x8829
    GL_DRAW_BUFFER5_ARB = 0x882A
    GL_DRAW_BUFFER6_ARB = 0x882B
    GL_DRAW_BUFFER7_ARB = 0x882C
    GL_DRAW_BUFFER8_ARB = 0x882D
    GL_DRAW_BUFFER9_ARB = 0x882E
    GL_DRAW_BUFFER10_ARB = 0x882F
    GL_DRAW_BUFFER11_ARB = 0x8830
    GL_DRAW_BUFFER12_ARB = 0x8831
    GL_DRAW_BUFFER13_ARB = 0x8832
    GL_DRAW_BUFFER14_ARB = 0x8833
    GL_DRAW_BUFFER15_ARB = 0x8834

if 1: # ifndef GL_ARB_texture_rectangle ("OpenGL/glext.h":908)
    """GL_ARB_texture_rectangle"""
    GL_TEXTURE_RECTANGLE_ARB = 0x84F5
    GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6
    GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7
    GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8

if 1: # ifndef GL_ARB_color_buffer_float ("OpenGL/glext.h":915)
    """GL_ARB_color_buffer_float"""
    GL_RGBA_FLOAT_MODE_ARB = 0x8820
    GL_CLAMP_VERTEX_COLOR_ARB = 0x891A
    GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B
    GL_CLAMP_READ_COLOR_ARB = 0x891C
    GL_FIXED_ONLY_ARB = 0x891D

if 1: # ifndef GL_ARB_half_float_pixel ("OpenGL/glext.h":923)
    """GL_ARB_half_float_pixel"""
    GL_HALF_FLOAT_ARB = 0x140B

if 1: # ifndef GL_ARB_texture_float ("OpenGL/glext.h":927)
    """GL_ARB_texture_float"""
    GL_TEXTURE_RED_TYPE_ARB = 0x8C10
    GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11
    GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12
    GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13
    GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14
    GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15
    GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16
    GL_UNSIGNED_NORMALIZED_ARB = 0x8C17
    GL_RGBA32F_ARB = 0x8814
    GL_RGB32F_ARB = 0x8815
    GL_ALPHA32F_ARB = 0x8816
    GL_INTENSITY32F_ARB = 0x8817
    GL_LUMINANCE32F_ARB = 0x8818
    GL_LUMINANCE_ALPHA32F_ARB = 0x8819
    GL_RGBA16F_ARB = 0x881A
    GL_RGB16F_ARB = 0x881B
    GL_ALPHA16F_ARB = 0x881C
    GL_INTENSITY16F_ARB = 0x881D
    GL_LUMINANCE16F_ARB = 0x881E
    GL_LUMINANCE_ALPHA16F_ARB = 0x881F

if 1: # ifndef GL_ARB_pixel_buffer_object ("OpenGL/glext.h":950)
    """GL_ARB_pixel_buffer_object"""
    GL_PIXEL_PACK_BUFFER_ARB = 0x88EB
    GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC
    GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED
    GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF

if 1: # ifndef GL_EXT_abgr ("OpenGL/glext.h":957)
    """GL_EXT_abgr"""
    GL_ABGR_EXT = 0x8000

if 1: # ifndef GL_EXT_blend_color ("OpenGL/glext.h":961)
    """GL_EXT_blend_color"""
    GL_CONSTANT_COLOR_EXT = 0x8001
    GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002
    GL_CONSTANT_ALPHA_EXT = 0x8003
    GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004
    GL_BLEND_COLOR_EXT = 0x8005

if 1: # ifndef GL_EXT_polygon_offset ("OpenGL/glext.h":969)
    """GL_EXT_polygon_offset"""
    GL_POLYGON_OFFSET_EXT = 0x8037
    GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038
    GL_POLYGON_OFFSET_BIAS_EXT = 0x8039

if 1: # ifndef GL_EXT_texture ("OpenGL/glext.h":975)
    """GL_EXT_texture"""
    GL_ALPHA4_EXT = 0x803B
    GL_ALPHA8_EXT = 0x803C
    GL_ALPHA12_EXT = 0x803D
    GL_ALPHA16_EXT = 0x803E
    GL_LUMINANCE4_EXT = 0x803F
    GL_LUMINANCE8_EXT = 0x8040
    GL_LUMINANCE12_EXT = 0x8041
    GL_LUMINANCE16_EXT = 0x8042
    GL_LUMINANCE4_ALPHA4_EXT = 0x8043
    GL_LUMINANCE6_ALPHA2_EXT = 0x8044
    GL_LUMINANCE8_ALPHA8_EXT = 0x8045
    GL_LUMINANCE12_ALPHA4_EXT = 0x8046
    GL_LUMINANCE12_ALPHA12_EXT = 0x8047
    GL_LUMINANCE16_ALPHA16_EXT = 0x8048
    GL_INTENSITY_EXT = 0x8049
    GL_INTENSITY4_EXT = 0x804A
    GL_INTENSITY8_EXT = 0x804B
    GL_INTENSITY12_EXT = 0x804C
    GL_INTENSITY16_EXT = 0x804D
    GL_RGB2_EXT = 0x804E
    GL_RGB4_EXT = 0x804F
    GL_RGB5_EXT = 0x8050
    GL_RGB8_EXT = 0x8051
    GL_RGB10_EXT = 0x8052
    GL_RGB12_EXT = 0x8053
    GL_RGB16_EXT = 0x8054
    GL_RGBA2_EXT = 0x8055
    GL_RGBA4_EXT = 0x8056
    GL_RGB5_A1_EXT = 0x8057
    GL_RGBA8_EXT = 0x8058
    GL_RGB10_A2_EXT = 0x8059
    GL_RGBA12_EXT = 0x805A
    GL_RGBA16_EXT = 0x805B
    GL_TEXTURE_RED_SIZE_EXT = 0x805C
    GL_TEXTURE_GREEN_SIZE_EXT = 0x805D
    GL_TEXTURE_BLUE_SIZE_EXT = 0x805E
    GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F
    GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060
    GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061
    GL_REPLACE_EXT = 0x8062
    GL_PROXY_TEXTURE_1D_EXT = 0x8063
    GL_PROXY_TEXTURE_2D_EXT = 0x8064
    GL_TEXTURE_TOO_LARGE_EXT = 0x8065

if 1: # ifndef GL_EXT_texture3D ("OpenGL/glext.h":1021)
    """GL_EXT_texture3D"""
    GL_PACK_SKIP_IMAGES_EXT = 0x806B
    GL_PACK_IMAGE_HEIGHT_EXT = 0x806C
    GL_UNPACK_SKIP_IMAGES_EXT = 0x806D
    GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E
    GL_TEXTURE_3D_EXT = 0x806F
    GL_PROXY_TEXTURE_3D_EXT = 0x8070
    GL_TEXTURE_DEPTH_EXT = 0x8071
    GL_TEXTURE_WRAP_R_EXT = 0x8072
    GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073

if 1: # ifndef GL_SGIS_texture_filter4 ("OpenGL/glext.h":1033)
    """GL_SGIS_texture_filter4"""
    GL_FILTER4_SGIS = 0x8146
    GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147

if 1: # ifndef GL_EXT_subtexture ("OpenGL/glext.h":1038)
    """GL_EXT_subtexture"""

if 1: # ifndef GL_EXT_copy_texture ("OpenGL/glext.h":1041)
    """GL_EXT_copy_texture"""

if 1: # ifndef GL_EXT_histogram ("OpenGL/glext.h":1044)
    """GL_EXT_histogram"""
    GL_HISTOGRAM_EXT = 0x8024
    GL_PROXY_HISTOGRAM_EXT = 0x8025
    GL_HISTOGRAM_WIDTH_EXT = 0x8026
    GL_HISTOGRAM_FORMAT_EXT = 0x8027
    GL_HISTOGRAM_RED_SIZE_EXT = 0x8028
    GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029
    GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A
    GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B
    GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C
    GL_HISTOGRAM_SINK_EXT = 0x802D
    GL_MINMAX_EXT = 0x802E
    GL_MINMAX_FORMAT_EXT = 0x802F
    GL_MINMAX_SINK_EXT = 0x8030
    GL_TABLE_TOO_LARGE_EXT = 0x8031

if 1: # ifndef GL_EXT_convolution ("OpenGL/glext.h":1061)
    """GL_EXT_convolution"""
    GL_CONVOLUTION_1D_EXT = 0x8010
    GL_CONVOLUTION_2D_EXT = 0x8011
    GL_SEPARABLE_2D_EXT = 0x8012
    GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013
    GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014
    GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015
    GL_REDUCE_EXT = 0x8016
    GL_CONVOLUTION_FORMAT_EXT = 0x8017
    GL_CONVOLUTION_WIDTH_EXT = 0x8018
    GL_CONVOLUTION_HEIGHT_EXT = 0x8019
    GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A
    GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B
    GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C
    GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D
    GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E
    GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F
    GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020
    GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021
    GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022
    GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023

if 1: # ifndef GL_SGI_color_matrix ("OpenGL/glext.h":1084)
    """GL_SGI_color_matrix"""
    GL_COLOR_MATRIX_SGI = 0x80B1
    GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2
    GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3
    GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4
    GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5
    GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6
    GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7
    GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8
    GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9
    GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA
    GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB

if 1: # ifndef GL_SGI_color_table ("OpenGL/glext.h":1098)
    """GL_SGI_color_table"""
    GL_COLOR_TABLE_SGI = 0x80D0
    GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1
    GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2
    GL_PROXY_COLOR_TABLE_SGI = 0x80D3
    GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4
    GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5
    GL_COLOR_TABLE_SCALE_SGI = 0x80D6
    GL_COLOR_TABLE_BIAS_SGI = 0x80D7
    GL_COLOR_TABLE_FORMAT_SGI = 0x80D8
    GL_COLOR_TABLE_WIDTH_SGI = 0x80D9
    GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DA
    GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB
    GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC
    GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD
    GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE
    GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF

if 1: # ifndef GL_SGIS_pixel_texture ("OpenGL/glext.h":1117)
    """GL_SGIS_pixel_texture"""
    GL_PIXEL_TEXTURE_SGIS = 0x8353
    GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354
    GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355
    GL_PIXEL_GROUP_COLOR_SGIS = 0x8356

if 1: # ifndef GL_SGIX_pixel_texture ("OpenGL/glext.h":1124)
    """GL_SGIX_pixel_texture"""
    GL_PIXEL_TEX_GEN_SGIX = 0x8139
    GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B

if 1: # ifndef GL_SGIS_texture4D ("OpenGL/glext.h":1129)
    """GL_SGIS_texture4D"""
    GL_PACK_SKIP_VOLUMES_SGIS = 0x8130
    GL_PACK_IMAGE_DEPTH_SGIS = 0x8131
    GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132
    GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133
    GL_TEXTURE_4D_SGIS = 0x8134
    GL_PROXY_TEXTURE_4D_SGIS = 0x8135
    GL_TEXTURE_4DSIZE_SGIS = 0x8136
    GL_TEXTURE_WRAP_Q_SGIS = 0x8137
    GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138
    GL_TEXTURE_4D_BINDING_SGIS = 0x814F

if 1: # ifndef GL_SGI_texture_color_table ("OpenGL/glext.h":1142)
    """GL_SGI_texture_color_table"""
    GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC
    GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD

if 1: # ifndef GL_EXT_cmyka ("OpenGL/glext.h":1147)
    """GL_EXT_cmyka"""
    GL_CMYK_EXT = 0x800C
    GL_CMYKA_EXT = 0x800D
    GL_PACK_CMYK_HINT_EXT = 0x800E
    GL_UNPACK_CMYK_HINT_EXT = 0x800F

if 1: # ifndef GL_EXT_texture_object ("OpenGL/glext.h":1154)
    """GL_EXT_texture_object"""
    GL_TEXTURE_PRIORITY_EXT = 0x8066
    GL_TEXTURE_RESIDENT_EXT = 0x8067
    GL_TEXTURE_1D_BINDING_EXT = 0x8068
    GL_TEXTURE_2D_BINDING_EXT = 0x8069
    GL_TEXTURE_3D_BINDING_EXT = 0x806A

if 1: # ifndef GL_SGIS_detail_texture ("OpenGL/glext.h":1162)
    """GL_SGIS_detail_texture"""
    GL_DETAIL_TEXTURE_2D_SGIS = 0x8095
    GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096
    GL_LINEAR_DETAIL_SGIS = 0x8097
    GL_LINEAR_DETAIL_ALPHA_SGIS = 0x8098
    GL_LINEAR_DETAIL_COLOR_SGIS = 0x8099
    GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A
    GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B
    GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C

if 1: # ifndef GL_SGIS_sharpen_texture ("OpenGL/glext.h":1173)
    """GL_SGIS_sharpen_texture"""
    GL_LINEAR_SHARPEN_SGIS = 0x80AD
    GL_LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE
    GL_LINEAR_SHARPEN_COLOR_SGIS = 0x80AF
    GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0

if 1: # ifndef GL_EXT_packed_pixels ("OpenGL/glext.h":1180)
    """GL_EXT_packed_pixels"""
    GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032
    GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033
    GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034
    GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035
    GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036

if 1: # ifndef GL_SGIS_texture_lod ("OpenGL/glext.h":1188)
    """GL_SGIS_texture_lod"""
    GL_TEXTURE_MIN_LOD_SGIS = 0x813A
    GL_TEXTURE_MAX_LOD_SGIS = 0x813B
    GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C
    GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D

if 1: # ifndef GL_SGIS_multisample ("OpenGL/glext.h":1195)
    """GL_SGIS_multisample"""
    GL_MULTISAMPLE_SGIS = 0x809D
    GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E
    GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F
    GL_SAMPLE_MASK_SGIS = 0x80A0
    GL_1PASS_SGIS = 0x80A1
    GL_2PASS_0_SGIS = 0x80A2
    GL_2PASS_1_SGIS = 0x80A3
    GL_4PASS_0_SGIS = 0x80A4
    GL_4PASS_1_SGIS = 0x80A5
    GL_4PASS_2_SGIS = 0x80A6
    GL_4PASS_3_SGIS = 0x80A7
    GL_SAMPLE_BUFFERS_SGIS = 0x80A8
    GL_SAMPLES_SGIS = 0x80A9
    GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA
    GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB
    GL_SAMPLE_PATTERN_SGIS = 0x80AC

if 1: # ifndef GL_EXT_rescale_normal ("OpenGL/glext.h":1214)
    """GL_EXT_rescale_normal"""
    GL_RESCALE_NORMAL_EXT = 0x803A

if 1: # ifndef GL_EXT_vertex_array ("OpenGL/glext.h":1218)
    """GL_EXT_vertex_array"""
    GL_VERTEX_ARRAY_EXT = 0x8074
    GL_NORMAL_ARRAY_EXT = 0x8075
    GL_COLOR_ARRAY_EXT = 0x8076
    GL_INDEX_ARRAY_EXT = 0x8077
    GL_TEXTURE_COORD_ARRAY_EXT = 0x8078
    GL_EDGE_FLAG_ARRAY_EXT = 0x8079
    GL_VERTEX_ARRAY_SIZE_EXT = 0x807A
    GL_VERTEX_ARRAY_TYPE_EXT = 0x807B
    GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C
    GL_VERTEX_ARRAY_COUNT_EXT = 0x807D
    GL_NORMAL_ARRAY_TYPE_EXT = 0x807E
    GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F
    GL_NORMAL_ARRAY_COUNT_EXT = 0x8080
    GL_COLOR_ARRAY_SIZE_EXT = 0x8081
    GL_COLOR_ARRAY_TYPE_EXT = 0x8082
    GL_COLOR_ARRAY_STRIDE_EXT = 0x8083
    GL_COLOR_ARRAY_COUNT_EXT = 0x8084
    GL_INDEX_ARRAY_TYPE_EXT = 0x8085
    GL_INDEX_ARRAY_STRIDE_EXT = 0x8086
    GL_INDEX_ARRAY_COUNT_EXT = 0x8087
    GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088
    GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089
    GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A
    GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B
    GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C
    GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D
    GL_VERTEX_ARRAY_POINTER_EXT = 0x808E
    GL_NORMAL_ARRAY_POINTER_EXT = 0x808F
    GL_COLOR_ARRAY_POINTER_EXT = 0x8090
    GL_INDEX_ARRAY_POINTER_EXT = 0x8091
    GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092
    GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093

if 1: # ifndef GL_EXT_misc_attribute ("OpenGL/glext.h":1253)
    """GL_EXT_misc_attribute"""

if 1: # ifndef GL_SGIS_generate_mipmap ("OpenGL/glext.h":1256)
    """GL_SGIS_generate_mipmap"""
    GL_GENERATE_MIPMAP_SGIS = 0x8191
    GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192

if 1: # ifndef GL_SGIX_clipmap ("OpenGL/glext.h":1261)
    """GL_SGIX_clipmap"""
    GL_LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170
    GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171
    GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172
    GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173
    GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174
    GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175
    GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176
    GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177
    GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178
    GL_NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D
    GL_NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E
    GL_LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F

if 1: # ifndef GL_SGIX_shadow ("OpenGL/glext.h":1276)
    """GL_SGIX_shadow"""
    GL_TEXTURE_COMPARE_SGIX = 0x819A
    GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B
    GL_TEXTURE_LEQUAL_R_SGIX = 0x819C
    GL_TEXTURE_GEQUAL_R_SGIX = 0x819D

if 1: # ifndef GL_SGIS_texture_edge_clamp ("OpenGL/glext.h":1283)
    """GL_SGIS_texture_edge_clamp"""
    GL_CLAMP_TO_EDGE_SGIS = 0x812F

if 1: # ifndef GL_SGIS_texture_border_clamp ("OpenGL/glext.h":1287)
    """GL_SGIS_texture_border_clamp"""
    GL_CLAMP_TO_BORDER_SGIS = 0x812D

if 1: # ifndef GL_EXT_blend_minmax ("OpenGL/glext.h":1291)
    """GL_EXT_blend_minmax"""
    GL_FUNC_ADD_EXT = 0x8006
    GL_MIN_EXT = 0x8007
    GL_MAX_EXT = 0x8008
    GL_BLEND_EQUATION_EXT = 0x8009

if 1: # ifndef GL_EXT_blend_subtract ("OpenGL/glext.h":1298)
    """GL_EXT_blend_subtract"""
    GL_FUNC_SUBTRACT_EXT = 0x800A
    GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B

if 1: # ifndef GL_EXT_blend_logic_op ("OpenGL/glext.h":1303)
    """GL_EXT_blend_logic_op"""

if 1: # ifndef GL_SGIX_interlace ("OpenGL/glext.h":1306)
    """GL_SGIX_interlace"""
    GL_INTERLACE_SGIX = 0x8094

if 1: # ifndef GL_SGIX_pixel_tiles ("OpenGL/glext.h":1310)
    """GL_SGIX_pixel_tiles"""
    GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E
    GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F
    GL_PIXEL_TILE_WIDTH_SGIX = 0x8140
    GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141
    GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142
    GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143
    GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144
    GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145

if 1: # ifndef GL_SGIS_texture_select ("OpenGL/glext.h":1321)
    """GL_SGIS_texture_select"""
    GL_DUAL_ALPHA4_SGIS = 0x8110
    GL_DUAL_ALPHA8_SGIS = 0x8111
    GL_DUAL_ALPHA12_SGIS = 0x8112
    GL_DUAL_ALPHA16_SGIS = 0x8113
    GL_DUAL_LUMINANCE4_SGIS = 0x8114
    GL_DUAL_LUMINANCE8_SGIS = 0x8115
    GL_DUAL_LUMINANCE12_SGIS = 0x8116
    GL_DUAL_LUMINANCE16_SGIS = 0x8117
    GL_DUAL_INTENSITY4_SGIS = 0x8118
    GL_DUAL_INTENSITY8_SGIS = 0x8119
    GL_DUAL_INTENSITY12_SGIS = 0x811A
    GL_DUAL_INTENSITY16_SGIS = 0x811B
    GL_DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C
    GL_DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D
    GL_QUAD_ALPHA4_SGIS = 0x811E
    GL_QUAD_ALPHA8_SGIS = 0x811F
    GL_QUAD_LUMINANCE4_SGIS = 0x8120
    GL_QUAD_LUMINANCE8_SGIS = 0x8121
    GL_QUAD_INTENSITY4_SGIS = 0x8122
    GL_QUAD_INTENSITY8_SGIS = 0x8123
    GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124
    GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125

if 1: # ifndef GL_SGIX_sprite ("OpenGL/glext.h":1346)
    """GL_SGIX_sprite"""
    GL_SPRITE_SGIX = 0x8148
    GL_SPRITE_MODE_SGIX = 0x8149
    GL_SPRITE_AXIS_SGIX = 0x814A
    GL_SPRITE_TRANSLATION_SGIX = 0x814B
    GL_SPRITE_AXIAL_SGIX = 0x814C
    GL_SPRITE_OBJECT_ALIGNED_SGIX = 0x814D
    GL_SPRITE_EYE_ALIGNED_SGIX = 0x814E

if 1: # ifndef GL_SGIX_texture_multi_buffer ("OpenGL/glext.h":1356)
    """GL_SGIX_texture_multi_buffer"""
    GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E

if 1: # ifndef GL_EXT_point_parameters ("OpenGL/glext.h":1360)
    """GL_EXT_point_parameters"""
    GL_POINT_SIZE_MIN_EXT = 0x8126
    GL_POINT_SIZE_MAX_EXT = 0x8127
    GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128
    GL_DISTANCE_ATTENUATION_EXT = 0x8129

if 1: # ifndef GL_SGIS_point_parameters ("OpenGL/glext.h":1367)
    """GL_SGIS_point_parameters"""
    GL_POINT_SIZE_MIN_SGIS = 0x8126
    GL_POINT_SIZE_MAX_SGIS = 0x8127
    GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128
    GL_DISTANCE_ATTENUATION_SGIS = 0x8129

if 1: # ifndef GL_SGIX_instruments ("OpenGL/glext.h":1374)
    """GL_SGIX_instruments"""
    GL_INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180
    GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181

if 1: # ifndef GL_SGIX_texture_scale_bias ("OpenGL/glext.h":1379)
    """GL_SGIX_texture_scale_bias"""
    GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179
    GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A
    GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B
    GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C

if 1: # ifndef GL_SGIX_framezoom ("OpenGL/glext.h":1386)
    """GL_SGIX_framezoom"""
    GL_FRAMEZOOM_SGIX = 0x818B
    GL_FRAMEZOOM_FACTOR_SGIX = 0x818C
    GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D

if 1: # ifndef GL_SGIX_tag_sample_buffer ("OpenGL/glext.h":1392)
    """GL_SGIX_tag_sample_buffer"""

if 1: # ifndef GL_FfdMaskSGIX ("OpenGL/glext.h":1395)
    """GL_FfdMaskSGIX"""
    GL_TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001
    GL_GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002

if 1: # ifndef GL_SGIX_polynomial_ffd ("OpenGL/glext.h":1400)
    """GL_SGIX_polynomial_ffd"""
    GL_GEOMETRY_DEFORMATION_SGIX = 0x8194
    GL_TEXTURE_DEFORMATION_SGIX = 0x8195
    GL_DEFORMATIONS_MASK_SGIX = 0x8196
    GL_MAX_DEFORMATION_ORDER_SGIX = 0x8197

if 1: # ifndef GL_SGIX_reference_plane ("OpenGL/glext.h":1407)
    """GL_SGIX_reference_plane"""
    GL_REFERENCE_PLANE_SGIX = 0x817D
    GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E

if 1: # ifndef GL_SGIX_flush_raster ("OpenGL/glext.h":1412)
    """GL_SGIX_flush_raster"""

if 1: # ifndef GL_SGIX_depth_texture ("OpenGL/glext.h":1415)
    """GL_SGIX_depth_texture"""
    GL_DEPTH_COMPONENT16_SGIX = 0x81A5
    GL_DEPTH_COMPONENT24_SGIX = 0x81A6
    GL_DEPTH_COMPONENT32_SGIX = 0x81A7

if 1: # ifndef GL_SGIS_fog_function ("OpenGL/glext.h":1421)
    """GL_SGIS_fog_function"""
    GL_FOG_FUNC_SGIS = 0x812A
    GL_FOG_FUNC_POINTS_SGIS = 0x812B
    GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C

if 1: # ifndef GL_SGIX_fog_offset ("OpenGL/glext.h":1427)
    """GL_SGIX_fog_offset"""
    GL_FOG_OFFSET_SGIX = 0x8198
    GL_FOG_OFFSET_VALUE_SGIX = 0x8199

if 1: # ifndef GL_HP_image_transform ("OpenGL/glext.h":1432)
    """GL_HP_image_transform"""
    GL_IMAGE_SCALE_X_HP = 0x8155
    GL_IMAGE_SCALE_Y_HP = 0x8156
    GL_IMAGE_TRANSLATE_X_HP = 0x8157
    GL_IMAGE_TRANSLATE_Y_HP = 0x8158
    GL_IMAGE_ROTATE_ANGLE_HP = 0x8159
    GL_IMAGE_ROTATE_ORIGIN_X_HP = 0x815A
    GL_IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B
    GL_IMAGE_MAG_FILTER_HP = 0x815C
    GL_IMAGE_MIN_FILTER_HP = 0x815D
    GL_IMAGE_CUBIC_WEIGHT_HP = 0x815E
    GL_CUBIC_HP = 0x815F
    GL_AVERAGE_HP = 0x8160
    GL_IMAGE_TRANSFORM_2D_HP = 0x8161
    GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162
    GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163

if 1: # ifndef GL_HP_convolution_border_modes ("OpenGL/glext.h":1450)
    """GL_HP_convolution_border_modes"""
    GL_IGNORE_BORDER_HP = 0x8150
    GL_CONSTANT_BORDER_HP = 0x8151
    GL_REPLICATE_BORDER_HP = 0x8153
    GL_CONVOLUTION_BORDER_COLOR_HP = 0x8154

if 1: # ifndef GL_INGR_palette_buffer ("OpenGL/glext.h":1457)
    """GL_INGR_palette_buffer"""

if 1: # ifndef GL_SGIX_texture_add_env ("OpenGL/glext.h":1460)
    """GL_SGIX_texture_add_env"""
    GL_TEXTURE_ENV_BIAS_SGIX = 0x80BE

if 1: # ifndef GL_EXT_color_subtable ("OpenGL/glext.h":1464)
    """GL_EXT_color_subtable"""

if 1: # ifndef GL_PGI_vertex_hints ("OpenGL/glext.h":1467)
    """GL_PGI_vertex_hints"""
    GL_VERTEX_DATA_HINT_PGI = 0x1A22A
    GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B
    GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C
    GL_MAX_VERTEX_HINT_PGI = 0x1A22D
    GL_COLOR3_BIT_PGI = 0x00010000
    GL_COLOR4_BIT_PGI = 0x00020000
    GL_EDGEFLAG_BIT_PGI = 0x00040000
    GL_INDEX_BIT_PGI = 0x00080000
    GL_MAT_AMBIENT_BIT_PGI = 0x00100000
    GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000
    GL_MAT_DIFFUSE_BIT_PGI = 0x00400000
    GL_MAT_EMISSION_BIT_PGI = 0x00800000
    GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000
    GL_MAT_SHININESS_BIT_PGI = 0x02000000
    GL_MAT_SPECULAR_BIT_PGI = 0x04000000
    GL_NORMAL_BIT_PGI = 0x08000000
    GL_TEXCOORD1_BIT_PGI = 0x10000000
    GL_TEXCOORD2_BIT_PGI = 0x20000000
    GL_TEXCOORD3_BIT_PGI = 0x40000000
    GL_TEXCOORD4_BIT_PGI = 0x80000000
    GL_VERTEX23_BIT_PGI = 0x00000004
    GL_VERTEX4_BIT_PGI = 0x00000008

if 1: # ifndef GL_PGI_misc_hints ("OpenGL/glext.h":1492)
    """GL_PGI_misc_hints"""
    GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8
    GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD
    GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE
    GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202
    GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203
    GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204
    GL_ALWAYS_FAST_HINT_PGI = 0x1A20C
    GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D
    GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E
    GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F
    GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210
    GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211
    GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216
    GL_STRICT_LIGHTING_HINT_PGI = 0x1A217
    GL_STRICT_SCISSOR_HINT_PGI = 0x1A218
    GL_FULL_STIPPLE_HINT_PGI = 0x1A219
    GL_CLIP_NEAR_HINT_PGI = 0x1A220
    GL_CLIP_FAR_HINT_PGI = 0x1A221
    GL_WIDE_LINE_HINT_PGI = 0x1A222
    GL_BACK_NORMALS_HINT_PGI = 0x1A223

if 1: # ifndef GL_EXT_paletted_texture ("OpenGL/glext.h":1515)
    """GL_EXT_paletted_texture"""
    GL_COLOR_INDEX1_EXT = 0x80E2
    GL_COLOR_INDEX2_EXT = 0x80E3
    GL_COLOR_INDEX4_EXT = 0x80E4
    GL_COLOR_INDEX8_EXT = 0x80E5
    GL_COLOR_INDEX12_EXT = 0x80E6
    GL_COLOR_INDEX16_EXT = 0x80E7
    GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED

if 1: # ifndef GL_EXT_clip_volume_hint ("OpenGL/glext.h":1525)
    """GL_EXT_clip_volume_hint"""
    GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0

if 1: # ifndef GL_SGIX_list_priority ("OpenGL/glext.h":1529)
    """GL_SGIX_list_priority"""
    GL_LIST_PRIORITY_SGIX = 0x8182

if 1: # ifndef GL_SGIX_ir_instrument1 ("OpenGL/glext.h":1533)
    """GL_SGIX_ir_instrument1"""
    GL_IR_INSTRUMENT1_SGIX = 0x817F

if 1: # ifndef GL_SGIX_calligraphic_fragment ("OpenGL/glext.h":1537)
    """GL_SGIX_calligraphic_fragment"""
    GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183

if 1: # ifndef GL_SGIX_texture_lod_bias ("OpenGL/glext.h":1541)
    """GL_SGIX_texture_lod_bias"""
    GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E
    GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F
    GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190

if 1: # ifndef GL_SGIX_shadow_ambient ("OpenGL/glext.h":1547)
    """GL_SGIX_shadow_ambient"""
    GL_SHADOW_AMBIENT_SGIX = 0x80BF

if 1: # ifndef GL_EXT_index_texture ("OpenGL/glext.h":1551)
    """GL_EXT_index_texture"""

if 1: # ifndef GL_EXT_index_material ("OpenGL/glext.h":1554)
    """GL_EXT_index_material"""
    GL_INDEX_MATERIAL_EXT = 0x81B8
    GL_INDEX_MATERIAL_PARAMETER_EXT = 0x81B9
    GL_INDEX_MATERIAL_FACE_EXT = 0x81BA

if 1: # ifndef GL_EXT_index_func ("OpenGL/glext.h":1560)
    """GL_EXT_index_func"""
    GL_INDEX_TEST_EXT = 0x81B5
    GL_INDEX_TEST_FUNC_EXT = 0x81B6
    GL_INDEX_TEST_REF_EXT = 0x81B7

if 1: # ifndef GL_EXT_index_array_formats ("OpenGL/glext.h":1566)
    """GL_EXT_index_array_formats"""
    GL_IUI_V2F_EXT = 0x81AD
    GL_IUI_V3F_EXT = 0x81AE
    GL_IUI_N3F_V2F_EXT = 0x81AF
    GL_IUI_N3F_V3F_EXT = 0x81B0
    GL_T2F_IUI_V2F_EXT = 0x81B1
    GL_T2F_IUI_V3F_EXT = 0x81B2
    GL_T2F_IUI_N3F_V2F_EXT = 0x81B3
    GL_T2F_IUI_N3F_V3F_EXT = 0x81B4

if 1: # ifndef GL_EXT_compiled_vertex_array ("OpenGL/glext.h":1577)
    """GL_EXT_compiled_vertex_array"""
    GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8
    GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9

if 1: # ifndef GL_EXT_cull_vertex ("OpenGL/glext.h":1582)
    """GL_EXT_cull_vertex"""
    GL_CULL_VERTEX_EXT = 0x81AA
    GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB
    GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC

if 1: # ifndef GL_SGIX_ycrcb ("OpenGL/glext.h":1588)
    """GL_SGIX_ycrcb"""
    GL_YCRCB_422_SGIX = 0x81BB
    GL_YCRCB_444_SGIX = 0x81BC

if 1: # ifndef GL_SGIX_fragment_lighting ("OpenGL/glext.h":1593)
    """GL_SGIX_fragment_lighting"""
    GL_FRAGMENT_LIGHTING_SGIX = 0x8400
    GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401
    GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402
    GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403
    GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404
    GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405
    GL_CURRENT_RASTER_NORMAL_SGIX = 0x8406
    GL_LIGHT_ENV_MODE_SGIX = 0x8407
    GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408
    GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409
    GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A
    GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B
    GL_FRAGMENT_LIGHT0_SGIX = 0x840C
    GL_FRAGMENT_LIGHT1_SGIX = 0x840D
    GL_FRAGMENT_LIGHT2_SGIX = 0x840E
    GL_FRAGMENT_LIGHT3_SGIX = 0x840F
    GL_FRAGMENT_LIGHT4_SGIX = 0x8410
    GL_FRAGMENT_LIGHT5_SGIX = 0x8411
    GL_FRAGMENT_LIGHT6_SGIX = 0x8412
    GL_FRAGMENT_LIGHT7_SGIX = 0x8413

if 1: # ifndef GL_IBM_rasterpos_clip ("OpenGL/glext.h":1616)
    """GL_IBM_rasterpos_clip"""
    GL_RASTER_POSITION_UNCLIPPED_IBM = 0x19262

if 1: # ifndef GL_HP_texture_lighting ("OpenGL/glext.h":1620)
    """GL_HP_texture_lighting"""
    GL_TEXTURE_LIGHTING_MODE_HP = 0x8167
    GL_TEXTURE_POST_SPECULAR_HP = 0x8168
    GL_TEXTURE_PRE_SPECULAR_HP = 0x8169

if 1: # ifndef GL_EXT_draw_range_elements ("OpenGL/glext.h":1626)
    """GL_EXT_draw_range_elements"""
    GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8
    GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9

if 1: # ifndef GL_WIN_phong_shading ("OpenGL/glext.h":1631)
    """GL_WIN_phong_shading"""
    GL_PHONG_WIN = 0x80EA
    GL_PHONG_HINT_WIN = 0x80EB

if 1: # ifndef GL_WIN_specular_fog ("OpenGL/glext.h":1636)
    """GL_WIN_specular_fog"""
    GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC

if 1: # ifndef GL_EXT_light_texture ("OpenGL/glext.h":1640)
    """GL_EXT_light_texture"""
    GL_FRAGMENT_MATERIAL_EXT = 0x8349
    GL_FRAGMENT_NORMAL_EXT = 0x834A
    GL_FRAGMENT_COLOR_EXT = 0x834C
    GL_ATTENUATION_EXT = 0x834D
    GL_SHADOW_ATTENUATION_EXT = 0x834E
    GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F
    GL_TEXTURE_LIGHT_EXT = 0x8350
    GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351
    GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352
    

if 1: # ifndef GL_SGIX_blend_alpha_minmax ("OpenGL/glext.h":1653)
    """GL_SGIX_blend_alpha_minmax"""
    GL_ALPHA_MIN_SGIX = 0x8320
    GL_ALPHA_MAX_SGIX = 0x8321

if 1: # ifndef GL_SGIX_impact_pixel_texture ("OpenGL/glext.h":1658)
    """GL_SGIX_impact_pixel_texture"""
    GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = 0x8184
    GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = 0x8185
    GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = 0x8186
    GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = 0x8187
    GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = 0x8188
    GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = 0x8189
    GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = 0x818A

if 1: # ifndef GL_EXT_bgra ("OpenGL/glext.h":1668)
    """GL_EXT_bgra"""
    GL_BGR_EXT = 0x80E0
    GL_BGRA_EXT = 0x80E1

if 1: # ifndef GL_SGIX_async ("OpenGL/glext.h":1673)
    """GL_SGIX_async"""
    GL_ASYNC_MARKER_SGIX = 0x8329

if 1: # ifndef GL_SGIX_async_pixel ("OpenGL/glext.h":1677)
    """GL_SGIX_async_pixel"""
    GL_ASYNC_TEX_IMAGE_SGIX = 0x835C
    GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D
    GL_ASYNC_READ_PIXELS_SGIX = 0x835E
    GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F
    GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360
    GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361

if 1: # ifndef GL_SGIX_async_histogram ("OpenGL/glext.h":1686)
    """GL_SGIX_async_histogram"""
    GL_ASYNC_HISTOGRAM_SGIX = 0x832C
    GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D

if 1: # ifndef GL_INTEL_texture_scissor ("OpenGL/glext.h":1691)
    """GL_INTEL_texture_scissor"""

if 1: # ifndef GL_INTEL_parallel_arrays ("OpenGL/glext.h":1694)
    """GL_INTEL_parallel_arrays"""
    GL_PARALLEL_ARRAYS_INTEL = 0x83F4
    GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5
    GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6
    GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7
    GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8

if 1: # ifndef GL_HP_occlusion_test ("OpenGL/glext.h":1702)
    """GL_HP_occlusion_test"""
    GL_OCCLUSION_TEST_HP = 0x8165
    GL_OCCLUSION_TEST_RESULT_HP = 0x8166

if 1: # ifndef GL_EXT_pixel_transform ("OpenGL/glext.h":1707)
    """GL_EXT_pixel_transform"""
    GL_PIXEL_TRANSFORM_2D_EXT = 0x8330
    GL_PIXEL_MAG_FILTER_EXT = 0x8331
    GL_PIXEL_MIN_FILTER_EXT = 0x8332
    GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333
    GL_CUBIC_EXT = 0x8334
    GL_AVERAGE_EXT = 0x8335
    GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336
    GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337
    GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338

if 1: # ifndef GL_EXT_pixel_transform_color_table ("OpenGL/glext.h":1719)
    """GL_EXT_pixel_transform_color_table"""

if 1: # ifndef GL_EXT_shared_texture_palette ("OpenGL/glext.h":1722)
    """GL_EXT_shared_texture_palette"""
    GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB

if 1: # ifndef GL_EXT_separate_specular_color ("OpenGL/glext.h":1726)
    """GL_EXT_separate_specular_color"""
    GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8
    GL_SINGLE_COLOR_EXT = 0x81F9
    GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA

if 1: # ifndef GL_EXT_secondary_color ("OpenGL/glext.h":1732)
    """GL_EXT_secondary_color"""
    GL_COLOR_SUM_EXT = 0x8458
    GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459
    GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A
    GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B
    GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C
    GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D
    GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E

if 1: # ifndef GL_EXT_texture_perturb_normal ("OpenGL/glext.h":1742)
    """GL_EXT_texture_perturb_normal"""
    GL_PERTURB_EXT = 0x85AE
    GL_TEXTURE_NORMAL_EXT = 0x85AF

if 1: # ifndef GL_EXT_multi_draw_arrays ("OpenGL/glext.h":1747)
    """GL_EXT_multi_draw_arrays"""

if 1: # ifndef GL_EXT_fog_coord ("OpenGL/glext.h":1750)
    """GL_EXT_fog_coord"""
    GL_FOG_COORDINATE_SOURCE_EXT = 0x8450
    GL_FOG_COORDINATE_EXT = 0x8451
    GL_FRAGMENT_DEPTH_EXT = 0x8452
    GL_CURRENT_FOG_COORDINATE_EXT = 0x8453
    GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454
    GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455
    GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456
    GL_FOG_COORDINATE_ARRAY_EXT = 0x8457

if 1: # ifndef GL_REND_screen_coordinates ("OpenGL/glext.h":1761)
    """GL_REND_screen_coordinates"""
    GL_SCREEN_COORDINATES_REND = 0x8490
    GL_INVERTED_SCREEN_W_REND = 0x8491

if 1: # ifndef GL_EXT_coordinate_frame ("OpenGL/glext.h":1766)
    """GL_EXT_coordinate_frame"""
    GL_TANGENT_ARRAY_EXT = 0x8439
    GL_BINORMAL_ARRAY_EXT = 0x843A
    GL_CURRENT_TANGENT_EXT = 0x843B
    GL_CURRENT_BINORMAL_EXT = 0x843C
    GL_TANGENT_ARRAY_TYPE_EXT = 0x843E
    GL_TANGENT_ARRAY_STRIDE_EXT = 0x843F
    GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440
    GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441
    GL_TANGENT_ARRAY_POINTER_EXT = 0x8442
    GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443
    GL_MAP1_TANGENT_EXT = 0x8444
    GL_MAP2_TANGENT_EXT = 0x8445
    GL_MAP1_BINORMAL_EXT = 0x8446
    GL_MAP2_BINORMAL_EXT = 0x8447

if 1: # ifndef GL_EXT_texture_env_combine ("OpenGL/glext.h":1783)
    """GL_EXT_texture_env_combine"""
    GL_COMBINE_EXT = 0x8570
    GL_COMBINE_RGB_EXT = 0x8571
    GL_COMBINE_ALPHA_EXT = 0x8572
    GL_RGB_SCALE_EXT = 0x8573
    GL_ADD_SIGNED_EXT = 0x8574
    GL_INTERPOLATE_EXT = 0x8575
    GL_CONSTANT_EXT = 0x8576
    GL_PRIMARY_COLOR_EXT = 0x8577
    GL_PREVIOUS_EXT = 0x8578
    GL_SOURCE0_RGB_EXT = 0x8580
    GL_SOURCE1_RGB_EXT = 0x8581
    GL_SOURCE2_RGB_EXT = 0x8582
    GL_SOURCE0_ALPHA_EXT = 0x8588
    GL_SOURCE1_ALPHA_EXT = 0x8589
    GL_SOURCE2_ALPHA_EXT = 0x858A
    GL_OPERAND0_RGB_EXT = 0x8590
    GL_OPERAND1_RGB_EXT = 0x8591
    GL_OPERAND2_RGB_EXT = 0x8592
    GL_OPERAND0_ALPHA_EXT = 0x8598
    GL_OPERAND1_ALPHA_EXT = 0x8599
    GL_OPERAND2_ALPHA_EXT = 0x859A

if 1: # ifndef GL_APPLE_specular_vector ("OpenGL/glext.h":1807)
    """GL_APPLE_specular_vector"""
    GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0

if 1: # ifndef GL_APPLE_transform_hint ("OpenGL/glext.h":1811)
    """GL_APPLE_transform_hint"""
    GL_TRANSFORM_HINT_APPLE = 0x85B1

if 1: # ifndef GL_SGIX_fog_scale ("OpenGL/glext.h":1815)
    """GL_SGIX_fog_scale"""
    GL_FOG_SCALE_SGIX = 0x81FC
    GL_FOG_SCALE_VALUE_SGIX = 0x81FD

if 1: # ifndef GL_SUNX_constant_data ("OpenGL/glext.h":1820)
    """GL_SUNX_constant_data"""
    GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5
    GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6

if 1: # ifndef GL_SUN_global_alpha ("OpenGL/glext.h":1825)
    """GL_SUN_global_alpha"""
    GL_GLOBAL_ALPHA_SUN = 0x81D9
    GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA

if 1: # ifndef GL_SUN_triangle_list ("OpenGL/glext.h":1830)
    """GL_SUN_triangle_list"""
    GL_RESTART_SUN = 0x0001
    GL_REPLACE_MIDDLE_SUN = 0x0002
    GL_REPLACE_OLDEST_SUN = 0x0003
    GL_TRIANGLE_LIST_SUN = 0x81D7
    GL_REPLACEMENT_CODE_SUN = 0x81D8
    GL_REPLACEMENT_CODE_ARRAY_SUN = 0x85C0
    GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1
    GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2
    GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3
    GL_R1UI_V3F_SUN = 0x85C4
    GL_R1UI_C4UB_V3F_SUN = 0x85C5
    GL_R1UI_C3F_V3F_SUN = 0x85C6
    GL_R1UI_N3F_V3F_SUN = 0x85C7
    GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8
    GL_R1UI_T2F_V3F_SUN = 0x85C9
    GL_R1UI_T2F_N3F_V3F_SUN = 0x85CA
    GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB

if 1: # ifndef GL_SUN_vertex ("OpenGL/glext.h":1850)
    """GL_SUN_vertex"""

if 1: # ifndef GL_EXT_blend_func_separate ("OpenGL/glext.h":1853)
    """GL_EXT_blend_func_separate"""
    GL_BLEND_DST_RGB_EXT = 0x80C8
    GL_BLEND_SRC_RGB_EXT = 0x80C9
    GL_BLEND_DST_ALPHA_EXT = 0x80CA
    GL_BLEND_SRC_ALPHA_EXT = 0x80CB

if 1: # ifndef GL_INGR_color_clamp ("OpenGL/glext.h":1860)
    """GL_INGR_color_clamp"""
    GL_RED_MIN_CLAMP_INGR = 0x8560
    GL_GREEN_MIN_CLAMP_INGR = 0x8561
    GL_BLUE_MIN_CLAMP_INGR = 0x8562
    GL_ALPHA_MIN_CLAMP_INGR = 0x8563
    GL_RED_MAX_CLAMP_INGR = 0x8564
    GL_GREEN_MAX_CLAMP_INGR = 0x8565
    GL_BLUE_MAX_CLAMP_INGR = 0x8566
    GL_ALPHA_MAX_CLAMP_INGR = 0x8567

if 1: # ifndef GL_INGR_interlace_read ("OpenGL/glext.h":1871)
    """GL_INGR_interlace_read"""
    GL_INTERLACE_READ_INGR = 0x8568

if 1: # ifndef GL_EXT_stencil_wrap ("OpenGL/glext.h":1875)
    """GL_EXT_stencil_wrap"""
    GL_INCR_WRAP_EXT = 0x8507
    GL_DECR_WRAP_EXT = 0x8508

if 1: # ifndef GL_EXT_422_pixels ("OpenGL/glext.h":1880)
    """GL_EXT_422_pixels"""
    GL_422_EXT = 0x80CC
    GL_422_REV_EXT = 0x80CD
    GL_422_AVERAGE_EXT = 0x80CE
    GL_422_REV_AVERAGE_EXT = 0x80CF

if 1: # ifndef GL_NV_texgen_reflection ("OpenGL/glext.h":1887)
    """GL_NV_texgen_reflection"""
    GL_NORMAL_MAP_NV = 0x8511
    GL_REFLECTION_MAP_NV = 0x8512

if 1: # ifndef GL_EXT_texture_cube_map ("OpenGL/glext.h":1892)
    """GL_EXT_texture_cube_map"""
    GL_NORMAL_MAP_EXT = 0x8511
    GL_REFLECTION_MAP_EXT = 0x8512
    GL_TEXTURE_CUBE_MAP_EXT = 0x8513
    GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514
    GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515
    GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516
    GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517
    GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518
    GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519
    GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A
    GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B
    GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C

if 1: # ifndef GL_SUN_convolution_border_modes ("OpenGL/glext.h":1907)
    """GL_SUN_convolution_border_modes"""
    GL_WRAP_BORDER_SUN = 0x81D4

if 1: # ifndef GL_EXT_texture_env_add ("OpenGL/glext.h":1911)
    """GL_EXT_texture_env_add"""

if 1: # ifndef GL_EXT_texture_lod_bias ("OpenGL/glext.h":1914)
    """GL_EXT_texture_lod_bias"""
    GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD
    GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500
    GL_TEXTURE_LOD_BIAS_EXT = 0x8501

if 1: # ifndef GL_EXT_texture_filter_anisotropic ("OpenGL/glext.h":1920)
    """GL_EXT_texture_filter_anisotropic"""
    GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE
    GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF

if 1: # ifndef GL_EXT_vertex_weighting ("OpenGL/glext.h":1925)
    """GL_EXT_vertex_weighting"""
    GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3 # = GL_MODELVIEW_STACK_DEPTH
    GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502
    GL_MODELVIEW0_MATRIX_EXT = 0x0BA6 # = GL_MODELVIEW_MATRIX
    GL_MODELVIEW1_MATRIX_EXT = 0x8506
    GL_VERTEX_WEIGHTING_EXT = 0x8509
    GL_MODELVIEW0_EXT = 0x1700 # = GL_MODELVIEW
    GL_MODELVIEW1_EXT = 0x850A
    GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B
    GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C
    GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D
    GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E
    GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F
    GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510

if 1: # ifndef GL_NV_light_max_exponent ("OpenGL/glext.h":1941)
    """GL_NV_light_max_exponent"""
    GL_MAX_SHININESS_NV = 0x8504
    GL_MAX_SPOT_EXPONENT_NV = 0x8505

if 1: # ifndef GL_NV_vertex_array_range ("OpenGL/glext.h":1946)
    """GL_NV_vertex_array_range"""
    GL_VERTEX_ARRAY_RANGE_NV = 0x851D
    GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E
    GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F
    GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520
    GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521

if 1: # ifndef GL_NV_register_combiners ("OpenGL/glext.h":1954)
    """GL_NV_register_combiners"""
    GL_REGISTER_COMBINERS_NV = 0x8522
    GL_VARIABLE_A_NV = 0x8523
    GL_VARIABLE_B_NV = 0x8524
    GL_VARIABLE_C_NV = 0x8525
    GL_VARIABLE_D_NV = 0x8526
    GL_VARIABLE_E_NV = 0x8527
    GL_VARIABLE_F_NV = 0x8528
    GL_VARIABLE_G_NV = 0x8529
    GL_CONSTANT_COLOR0_NV = 0x852A
    GL_CONSTANT_COLOR1_NV = 0x852B
    GL_PRIMARY_COLOR_NV = 0x852C
    GL_SECONDARY_COLOR_NV = 0x852D
    GL_SPARE0_NV = 0x852E
    GL_SPARE1_NV = 0x852F
    GL_DISCARD_NV = 0x8530
    GL_E_TIMES_F_NV = 0x8531
    GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532
    GL_UNSIGNED_IDENTITY_NV = 0x8536
    GL_UNSIGNED_INVERT_NV = 0x8537
    GL_EXPAND_NORMAL_NV = 0x8538
    GL_EXPAND_NEGATE_NV = 0x8539
    GL_HALF_BIAS_NORMAL_NV = 0x853A
    GL_HALF_BIAS_NEGATE_NV = 0x853B
    GL_SIGNED_IDENTITY_NV = 0x853C
    GL_SIGNED_NEGATE_NV = 0x853D
    GL_SCALE_BY_TWO_NV = 0x853E
    GL_SCALE_BY_FOUR_NV = 0x853F
    GL_SCALE_BY_ONE_HALF_NV = 0x8540
    GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541
    GL_COMBINER_INPUT_NV = 0x8542
    GL_COMBINER_MAPPING_NV = 0x8543
    GL_COMBINER_COMPONENT_USAGE_NV = 0x8544
    GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545
    GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546
    GL_COMBINER_MUX_SUM_NV = 0x8547
    GL_COMBINER_SCALE_NV = 0x8548
    GL_COMBINER_BIAS_NV = 0x8549
    GL_COMBINER_AB_OUTPUT_NV = 0x854A
    GL_COMBINER_CD_OUTPUT_NV = 0x854B
    GL_COMBINER_SUM_OUTPUT_NV = 0x854C
    GL_MAX_GENERAL_COMBINERS_NV = 0x854D
    GL_NUM_GENERAL_COMBINERS_NV = 0x854E
    GL_COLOR_SUM_CLAMP_NV = 0x854F
    GL_COMBINER0_NV = 0x8550
    GL_COMBINER1_NV = 0x8551
    GL_COMBINER2_NV = 0x8552
    GL_COMBINER3_NV = 0x8553
    GL_COMBINER4_NV = 0x8554
    GL_COMBINER5_NV = 0x8555
    GL_COMBINER6_NV = 0x8556
    GL_COMBINER7_NV = 0x8557
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_NV_fog_distance ("OpenGL/glext.h":2013)
    """GL_NV_fog_distance"""
    GL_FOG_DISTANCE_MODE_NV = 0x855A
    GL_EYE_RADIAL_NV = 0x855B
    GL_EYE_PLANE_ABSOLUTE_NV = 0x855C
    

if 1: # ifndef GL_NV_texgen_emboss ("OpenGL/glext.h":2020)
    """GL_NV_texgen_emboss"""
    GL_EMBOSS_LIGHT_NV = 0x855D
    GL_EMBOSS_CONSTANT_NV = 0x855E
    GL_EMBOSS_MAP_NV = 0x855F

if 1: # ifndef GL_NV_blend_square ("OpenGL/glext.h":2026)
    """GL_NV_blend_square"""

if 1: # ifndef GL_NV_texture_env_combine4 ("OpenGL/glext.h":2029)
    """GL_NV_texture_env_combine4"""
    GL_COMBINE4_NV = 0x8503
    GL_SOURCE3_RGB_NV = 0x8583
    GL_SOURCE3_ALPHA_NV = 0x858B
    GL_OPERAND3_RGB_NV = 0x8593
    GL_OPERAND3_ALPHA_NV = 0x859B

if 1: # ifndef GL_MESA_resize_buffers ("OpenGL/glext.h":2037)
    """GL_MESA_resize_buffers"""

if 1: # ifndef GL_MESA_window_pos ("OpenGL/glext.h":2040)
    """GL_MESA_window_pos"""

if 1: # ifndef GL_EXT_texture_compression_s3tc ("OpenGL/glext.h":2043)
    """GL_EXT_texture_compression_s3tc"""
    GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0
    GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1
    GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2
    GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3

if 1: # ifndef GL_IBM_cull_vertex ("OpenGL/glext.h":2050)
    """GL_IBM_cull_vertex"""
    GL_CULL_VERTEX_IBM = 103050

if 1: # ifndef GL_IBM_multimode_draw_arrays ("OpenGL/glext.h":2054)
    """GL_IBM_multimode_draw_arrays"""

if 1: # ifndef GL_IBM_vertex_array_lists ("OpenGL/glext.h":2057)
    """GL_IBM_vertex_array_lists"""
    GL_VERTEX_ARRAY_LIST_IBM = 103070
    GL_NORMAL_ARRAY_LIST_IBM = 103071
    GL_COLOR_ARRAY_LIST_IBM = 103072
    GL_INDEX_ARRAY_LIST_IBM = 103073
    GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074
    GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075
    GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076
    GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077
    GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080
    GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081
    GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082
    GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083
    GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084
    GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085
    GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086
    GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087

if 1: # ifndef GL_SGIX_subsample ("OpenGL/glext.h":2076)
    """GL_SGIX_subsample"""
    GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0
    GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1
    GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2
    GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3
    GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4

if 1: # ifndef GL_SGIX_ycrcb_subsample ("OpenGL/glext.h":2084)
    """GL_SGIX_ycrcb_subsample"""

if 1: # ifndef GL_SGIX_ycrcba ("OpenGL/glext.h":2087)
    """GL_SGIX_ycrcba"""
    GL_YCRCB_SGIX = 0x8318
    GL_YCRCBA_SGIX = 0x8319

if 1: # ifndef GL_SGI_depth_pass_instrument ("OpenGL/glext.h":2092)
    """GL_SGI_depth_pass_instrument"""
    GL_DEPTH_PASS_INSTRUMENT_SGIX = 0x8310
    GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = 0x8311
    GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = 0x8312

if 1: # ifndef GL_3DFX_texture_compression_FXT1 ("OpenGL/glext.h":2098)
    """GL_3DFX_texture_compression_FXT1"""
    GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0
    GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1

if 1: # ifndef GL_3DFX_multisample ("OpenGL/glext.h":2103)
    """GL_3DFX_multisample"""
    GL_MULTISAMPLE_3DFX = 0x86B2
    GL_SAMPLE_BUFFERS_3DFX = 0x86B3
    GL_SAMPLES_3DFX = 0x86B4
    GL_MULTISAMPLE_BIT_3DFX = 0x20000000

if 1: # ifndef GL_3DFX_tbuffer ("OpenGL/glext.h":2110)
    """GL_3DFX_tbuffer"""

if 1: # ifndef GL_EXT_multisample ("OpenGL/glext.h":2113)
    """GL_EXT_multisample"""
    GL_MULTISAMPLE_EXT = 0x809D
    GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E
    GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F
    GL_SAMPLE_MASK_EXT = 0x80A0
    GL_1PASS_EXT = 0x80A1
    GL_2PASS_0_EXT = 0x80A2
    GL_2PASS_1_EXT = 0x80A3
    GL_4PASS_0_EXT = 0x80A4
    GL_4PASS_1_EXT = 0x80A5
    GL_4PASS_2_EXT = 0x80A6
    GL_4PASS_3_EXT = 0x80A7
    GL_SAMPLE_BUFFERS_EXT = 0x80A8
    GL_SAMPLES_EXT = 0x80A9
    GL_SAMPLE_MASK_VALUE_EXT = 0x80AA
    GL_SAMPLE_MASK_INVERT_EXT = 0x80AB
    GL_SAMPLE_PATTERN_EXT = 0x80AC
    GL_MULTISAMPLE_BIT_EXT = 0x20000000

if 1: # ifndef GL_SGIX_vertex_preclip ("OpenGL/glext.h":2133)
    """GL_SGIX_vertex_preclip"""
    GL_VERTEX_PRECLIP_SGIX = 0x83EE
    GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF

if 1: # ifndef GL_SGIX_convolution_accuracy ("OpenGL/glext.h":2138)
    """GL_SGIX_convolution_accuracy"""
    GL_CONVOLUTION_HINT_SGIX = 0x8316

if 1: # ifndef GL_SGIX_resample ("OpenGL/glext.h":2142)
    """GL_SGIX_resample"""
    GL_PACK_RESAMPLE_SGIX = 0x842C
    GL_UNPACK_RESAMPLE_SGIX = 0x842D
    GL_RESAMPLE_REPLICATE_SGIX = 0x842E
    GL_RESAMPLE_ZERO_FILL_SGIX = 0x842F
    GL_RESAMPLE_DECIMATE_SGIX = 0x8430

if 1: # ifndef GL_SGIS_point_line_texgen ("OpenGL/glext.h":2150)
    """GL_SGIS_point_line_texgen"""
    GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0
    GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1
    GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2
    GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3
    GL_EYE_POINT_SGIS = 0x81F4
    GL_OBJECT_POINT_SGIS = 0x81F5
    GL_EYE_LINE_SGIS = 0x81F6
    GL_OBJECT_LINE_SGIS = 0x81F7

if 1: # ifndef GL_SGIS_texture_color_mask ("OpenGL/glext.h":2161)
    """GL_SGIS_texture_color_mask"""
    GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF

if 1: # ifndef GL_EXT_texture_env_dot3 ("OpenGL/glext.h":2165)
    """GL_EXT_texture_env_dot3"""
    GL_DOT3_RGB_EXT = 0x8740
    GL_DOT3_RGBA_EXT = 0x8741

if 1: # ifndef GL_ATI_texture_mirror_once ("OpenGL/glext.h":2170)
    """GL_ATI_texture_mirror_once"""
    GL_MIRROR_CLAMP_ATI = 0x8742
    GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743

if 1: # ifndef GL_NV_fence ("OpenGL/glext.h":2175)
    """GL_NV_fence"""
    GL_ALL_COMPLETED_NV = 0x84F2
    GL_FENCE_STATUS_NV = 0x84F3
    GL_FENCE_CONDITION_NV = 0x84F4

if 1: # ifndef GL_IBM_texture_mirrored_repeat ("OpenGL/glext.h":2181)
    """GL_IBM_texture_mirrored_repeat"""
    GL_MIRRORED_REPEAT_IBM = 0x8370

if 1: # ifndef GL_NV_evaluators ("OpenGL/glext.h":2185)
    """GL_NV_evaluators"""
    GL_EVAL_2D_NV = 0x86C0
    GL_EVAL_TRIANGULAR_2D_NV = 0x86C1
    GL_MAP_TESSELLATION_NV = 0x86C2
    GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3
    GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4
    GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5
    GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6
    GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7
    GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8
    GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9
    GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA
    GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB
    GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC
    GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD
    GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE
    GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF
    GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0
    GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1
    GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2
    GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3
    GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4
    GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5
    GL_MAX_MAP_TESSELLATION_NV = 0x86D6
    GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7

if 1: # ifndef GL_NV_packed_depth_stencil ("OpenGL/glext.h":2212)
    """GL_NV_packed_depth_stencil"""
    GL_DEPTH_STENCIL_NV = 0x84F9
    GL_UNSIGNED_INT_24_8_NV = 0x84FA

if 1: # ifndef GL_NV_register_combiners2 ("OpenGL/glext.h":2217)
    """GL_NV_register_combiners2"""
    GL_PER_STAGE_CONSTANTS_NV = 0x8535

if 1: # ifndef GL_NV_texture_compression_vtc ("OpenGL/glext.h":2221)
    """GL_NV_texture_compression_vtc"""

if 1: # ifndef GL_NV_texture_rectangle ("OpenGL/glext.h":2224)
    """GL_NV_texture_rectangle"""
    GL_TEXTURE_RECTANGLE_NV = 0x84F5
    GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6
    GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7
    GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8

if 1: # ifndef GL_NV_texture_shader ("OpenGL/glext.h":2231)
    """GL_NV_texture_shader"""
    GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C
    GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D
    GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E
    GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9
    GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA
    GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB
    GL_DSDT_MAG_INTENSITY_NV = 0x86DC
    GL_SHADER_CONSISTENT_NV = 0x86DD
    GL_TEXTURE_SHADER_NV = 0x86DE
    GL_SHADER_OPERATION_NV = 0x86DF
    GL_CULL_MODES_NV = 0x86E0
    GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1
    GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2
    GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3
    GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1 # = GL_OFFSET_TEXTURE_MATRIX_NV
    GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2 # = GL_OFFSET_TEXTURE_SCALE_NV
    GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3 # = GL_OFFSET_TEXTURE_BIAS_NV
    GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4
    GL_CONST_EYE_NV = 0x86E5
    GL_PASS_THROUGH_NV = 0x86E6
    GL_CULL_FRAGMENT_NV = 0x86E7
    GL_OFFSET_TEXTURE_2D_NV = 0x86E8
    GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9
    GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA
    GL_DOT_PRODUCT_NV = 0x86EC
    GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED
    GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE
    GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0
    GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1
    GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2
    GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3
    GL_HILO_NV = 0x86F4
    GL_DSDT_NV = 0x86F5
    GL_DSDT_MAG_NV = 0x86F6
    GL_DSDT_MAG_VIB_NV = 0x86F7
    GL_HILO16_NV = 0x86F8
    GL_SIGNED_HILO_NV = 0x86F9
    GL_SIGNED_HILO16_NV = 0x86FA
    GL_SIGNED_RGBA_NV = 0x86FB
    GL_SIGNED_RGBA8_NV = 0x86FC
    GL_SIGNED_RGB_NV = 0x86FE
    GL_SIGNED_RGB8_NV = 0x86FF
    GL_SIGNED_LUMINANCE_NV = 0x8701
    GL_SIGNED_LUMINANCE8_NV = 0x8702
    GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703
    GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704
    GL_SIGNED_ALPHA_NV = 0x8705
    GL_SIGNED_ALPHA8_NV = 0x8706
    GL_SIGNED_INTENSITY_NV = 0x8707
    GL_SIGNED_INTENSITY8_NV = 0x8708
    GL_DSDT8_NV = 0x8709
    GL_DSDT8_MAG8_NV = 0x870A
    GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B
    GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C
    GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D
    GL_HI_SCALE_NV = 0x870E
    GL_LO_SCALE_NV = 0x870F
    GL_DS_SCALE_NV = 0x8710
    GL_DT_SCALE_NV = 0x8711
    GL_MAGNITUDE_SCALE_NV = 0x8712
    GL_VIBRANCE_SCALE_NV = 0x8713
    GL_HI_BIAS_NV = 0x8714
    GL_LO_BIAS_NV = 0x8715
    GL_DS_BIAS_NV = 0x8716
    GL_DT_BIAS_NV = 0x8717
    GL_MAGNITUDE_BIAS_NV = 0x8718
    GL_VIBRANCE_BIAS_NV = 0x8719
    GL_TEXTURE_BORDER_VALUES_NV = 0x871A
    GL_TEXTURE_HI_SIZE_NV = 0x871B
    GL_TEXTURE_LO_SIZE_NV = 0x871C
    GL_TEXTURE_DS_SIZE_NV = 0x871D
    GL_TEXTURE_DT_SIZE_NV = 0x871E
    GL_TEXTURE_MAG_SIZE_NV = 0x871F

if 1: # ifndef GL_NV_texture_shader2 ("OpenGL/glext.h":2307)
    """GL_NV_texture_shader2"""
    GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF

if 1: # ifndef GL_NV_vertex_array_range2 ("OpenGL/glext.h":2311)
    """GL_NV_vertex_array_range2"""
    GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533

if 1: # ifndef GL_NV_vertex_program ("OpenGL/glext.h":2315)
    """GL_NV_vertex_program"""
    GL_VERTEX_PROGRAM_NV = 0x8620
    GL_VERTEX_STATE_PROGRAM_NV = 0x8621
    GL_ATTRIB_ARRAY_SIZE_NV = 0x8623
    GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624
    GL_ATTRIB_ARRAY_TYPE_NV = 0x8625
    GL_CURRENT_ATTRIB_NV = 0x8626
    GL_PROGRAM_LENGTH_NV = 0x8627
    GL_PROGRAM_STRING_NV = 0x8628
    GL_MODELVIEW_PROJECTION_NV = 0x8629
    GL_IDENTITY_NV = 0x862A
    GL_INVERSE_NV = 0x862B
    GL_TRANSPOSE_NV = 0x862C
    GL_INVERSE_TRANSPOSE_NV = 0x862D
    GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E
    GL_MAX_TRACK_MATRICES_NV = 0x862F
    GL_MATRIX0_NV = 0x8630
    GL_MATRIX1_NV = 0x8631
    GL_MATRIX2_NV = 0x8632
    GL_MATRIX3_NV = 0x8633
    GL_MATRIX4_NV = 0x8634
    GL_MATRIX5_NV = 0x8635
    GL_MATRIX6_NV = 0x8636
    GL_MATRIX7_NV = 0x8637
    GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640
    GL_CURRENT_MATRIX_NV = 0x8641
    GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642
    GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643
    GL_PROGRAM_PARAMETER_NV = 0x8644
    GL_ATTRIB_ARRAY_POINTER_NV = 0x8645
    GL_PROGRAM_TARGET_NV = 0x8646
    GL_PROGRAM_RESIDENT_NV = 0x8647
    GL_TRACK_MATRIX_NV = 0x8648
    GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649
    GL_VERTEX_PROGRAM_BINDING_NV = 0x864A
    GL_PROGRAM_ERROR_POSITION_NV = 0x864B
    GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650
    GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651
    GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652
    GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653
    GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654
    GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655
    GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656
    GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657
    GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658
    GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659
    GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A
    GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B
    GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C
    GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D
    GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E
    GL_VERTEX_ATTRIB_ARRAY15_NV = 0x865F
    GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660
    GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661
    GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662
    GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663
    GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664
    GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665
    GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666
    GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667
    GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668
    GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669
    GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A
    GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B
    GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C
    GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D
    GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E
    GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F
    GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670
    GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671
    GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672
    GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673
    GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674
    GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675
    GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676
    GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677
    GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678
    GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679
    GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A
    GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B
    GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C
    GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D
    GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E
    GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F

if 1: # ifndef GL_SGIX_texture_coordinate_clamp ("OpenGL/glext.h":2401)
    """GL_SGIX_texture_coordinate_clamp"""
    GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369
    GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A
    GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B

if 1: # ifndef GL_SGIX_scalebias_hint ("OpenGL/glext.h":2407)
    """GL_SGIX_scalebias_hint"""
    GL_SCALEBIAS_HINT_SGIX = 0x8322

if 1: # ifndef GL_OML_interlace ("OpenGL/glext.h":2411)
    """GL_OML_interlace"""
    GL_INTERLACE_OML = 0x8980
    GL_INTERLACE_READ_OML = 0x8981

if 1: # ifndef GL_OML_subsample ("OpenGL/glext.h":2416)
    """GL_OML_subsample"""
    GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982
    GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983

if 1: # ifndef GL_OML_resample ("OpenGL/glext.h":2421)
    """GL_OML_resample"""
    GL_PACK_RESAMPLE_OML = 0x8984
    GL_UNPACK_RESAMPLE_OML = 0x8985
    GL_RESAMPLE_REPLICATE_OML = 0x8986
    GL_RESAMPLE_ZERO_FILL_OML = 0x8987
    GL_RESAMPLE_AVERAGE_OML = 0x8988
    GL_RESAMPLE_DECIMATE_OML = 0x8989

if 1: # ifndef GL_NV_copy_depth_to_color ("OpenGL/glext.h":2430)
    """GL_NV_copy_depth_to_color"""
    GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E
    GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F

if 1: # ifndef GL_ATI_envmap_bumpmap ("OpenGL/glext.h":2435)
    """GL_ATI_envmap_bumpmap"""
    GL_BUMP_ROT_MATRIX_ATI = 0x8775
    GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776
    GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777
    GL_BUMP_TEX_UNITS_ATI = 0x8778
    GL_DUDV_ATI = 0x8779
    GL_DU8DV8_ATI = 0x877A
    GL_BUMP_ENVMAP_ATI = 0x877B
    GL_BUMP_TARGET_ATI = 0x877C

if 1: # ifndef GL_ATI_fragment_shader ("OpenGL/glext.h":2446)
    """GL_ATI_fragment_shader"""
    GL_FRAGMENT_SHADER_ATI = 0x8920
    GL_REG_0_ATI = 0x8921
    GL_REG_1_ATI = 0x8922
    GL_REG_2_ATI = 0x8923
    GL_REG_3_ATI = 0x8924
    GL_REG_4_ATI = 0x8925
    GL_REG_5_ATI = 0x8926
    GL_REG_6_ATI = 0x8927
    GL_REG_7_ATI = 0x8928
    GL_REG_8_ATI = 0x8929
    GL_REG_9_ATI = 0x892A
    GL_REG_10_ATI = 0x892B
    GL_REG_11_ATI = 0x892C
    GL_REG_12_ATI = 0x892D
    GL_REG_13_ATI = 0x892E
    GL_REG_14_ATI = 0x892F
    GL_REG_15_ATI = 0x8930
    GL_REG_16_ATI = 0x8931
    GL_REG_17_ATI = 0x8932
    GL_REG_18_ATI = 0x8933
    GL_REG_19_ATI = 0x8934
    GL_REG_20_ATI = 0x8935
    GL_REG_21_ATI = 0x8936
    GL_REG_22_ATI = 0x8937
    GL_REG_23_ATI = 0x8938
    GL_REG_24_ATI = 0x8939
    GL_REG_25_ATI = 0x893A
    GL_REG_26_ATI = 0x893B
    GL_REG_27_ATI = 0x893C
    GL_REG_28_ATI = 0x893D
    GL_REG_29_ATI = 0x893E
    GL_REG_30_ATI = 0x893F
    GL_REG_31_ATI = 0x8940
    GL_CON_0_ATI = 0x8941
    GL_CON_1_ATI = 0x8942
    GL_CON_2_ATI = 0x8943
    GL_CON_3_ATI = 0x8944
    GL_CON_4_ATI = 0x8945
    GL_CON_5_ATI = 0x8946
    GL_CON_6_ATI = 0x8947
    GL_CON_7_ATI = 0x8948
    GL_CON_8_ATI = 0x8949
    GL_CON_9_ATI = 0x894A
    GL_CON_10_ATI = 0x894B
    GL_CON_11_ATI = 0x894C
    GL_CON_12_ATI = 0x894D
    GL_CON_13_ATI = 0x894E
    GL_CON_14_ATI = 0x894F
    GL_CON_15_ATI = 0x8950
    GL_CON_16_ATI = 0x8951
    GL_CON_17_ATI = 0x8952
    GL_CON_18_ATI = 0x8953
    GL_CON_19_ATI = 0x8954
    GL_CON_20_ATI = 0x8955
    GL_CON_21_ATI = 0x8956
    GL_CON_22_ATI = 0x8957
    GL_CON_23_ATI = 0x8958
    GL_CON_24_ATI = 0x8959
    GL_CON_25_ATI = 0x895A
    GL_CON_26_ATI = 0x895B
    GL_CON_27_ATI = 0x895C
    GL_CON_28_ATI = 0x895D
    GL_CON_29_ATI = 0x895E
    GL_CON_30_ATI = 0x895F
    GL_CON_31_ATI = 0x8960
    GL_MOV_ATI = 0x8961
    GL_ADD_ATI = 0x8963
    GL_MUL_ATI = 0x8964
    GL_SUB_ATI = 0x8965
    GL_DOT3_ATI = 0x8966
    GL_DOT4_ATI = 0x8967
    GL_MAD_ATI = 0x8968
    GL_LERP_ATI = 0x8969
    GL_CND_ATI = 0x896A
    GL_CND0_ATI = 0x896B
    GL_DOT2_ADD_ATI = 0x896C
    GL_SECONDARY_INTERPOLATOR_ATI = 0x896D
    GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896E
    GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896F
    GL_NUM_PASSES_ATI = 0x8970
    GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971
    GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972
    GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973
    GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974
    GL_COLOR_ALPHA_PAIRING_ATI = 0x8975
    GL_SWIZZLE_STR_ATI = 0x8976
    GL_SWIZZLE_STQ_ATI = 0x8977
    GL_SWIZZLE_STR_DR_ATI = 0x8978
    GL_SWIZZLE_STQ_DQ_ATI = 0x8979
    GL_SWIZZLE_STRQ_ATI = 0x897A
    GL_SWIZZLE_STRQ_DQ_ATI = 0x897B
    GL_RED_BIT_ATI = 0x00000001
    GL_GREEN_BIT_ATI = 0x00000002
    GL_BLUE_BIT_ATI = 0x00000004
    GL_2X_BIT_ATI = 0x00000001
    GL_4X_BIT_ATI = 0x00000002
    GL_8X_BIT_ATI = 0x00000004
    GL_HALF_BIT_ATI = 0x00000008
    GL_QUARTER_BIT_ATI = 0x00000010
    GL_EIGHTH_BIT_ATI = 0x00000020
    GL_SATURATE_BIT_ATI = 0x00000040
    GL_COMP_BIT_ATI = 0x00000002
    GL_NEGATE_BIT_ATI = 0x00000004
    GL_BIAS_BIT_ATI = 0x00000008

if 1: # ifndef GL_ATI_pn_triangles ("OpenGL/glext.h":2553)
    """GL_ATI_pn_triangles"""
    GL_PN_TRIANGLES_ATI = 0x87F0
    GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1
    GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2
    GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3
    GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4
    GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5
    GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6
    GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7
    GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8

if 1: # ifndef GL_ATI_vertex_array_object ("OpenGL/glext.h":2565)
    """GL_ATI_vertex_array_object"""
    GL_STATIC_ATI = 0x8760
    GL_DYNAMIC_ATI = 0x8761
    GL_PRESERVE_ATI = 0x8762
    GL_DISCARD_ATI = 0x8763
    GL_OBJECT_BUFFER_SIZE_ATI = 0x8764
    GL_OBJECT_BUFFER_USAGE_ATI = 0x8765
    GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766
    GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767

if 1: # ifndef GL_EXT_vertex_shader ("OpenGL/glext.h":2576)
    """GL_EXT_vertex_shader"""
    GL_VERTEX_SHADER_EXT = 0x8780
    GL_VERTEX_SHADER_BINDING_EXT = 0x8781
    GL_OP_INDEX_EXT = 0x8782
    GL_OP_NEGATE_EXT = 0x8783
    GL_OP_DOT3_EXT = 0x8784
    GL_OP_DOT4_EXT = 0x8785
    GL_OP_MUL_EXT = 0x8786
    GL_OP_ADD_EXT = 0x8787
    GL_OP_MADD_EXT = 0x8788
    GL_OP_FRAC_EXT = 0x8789
    GL_OP_MAX_EXT = 0x878A
    GL_OP_MIN_EXT = 0x878B
    GL_OP_SET_GE_EXT = 0x878C
    GL_OP_SET_LT_EXT = 0x878D
    GL_OP_CLAMP_EXT = 0x878E
    GL_OP_FLOOR_EXT = 0x878F
    GL_OP_ROUND_EXT = 0x8790
    GL_OP_EXP_BASE_2_EXT = 0x8791
    GL_OP_LOG_BASE_2_EXT = 0x8792
    GL_OP_POWER_EXT = 0x8793
    GL_OP_RECIP_EXT = 0x8794
    GL_OP_RECIP_SQRT_EXT = 0x8795
    GL_OP_SUB_EXT = 0x8796
    GL_OP_CROSS_PRODUCT_EXT = 0x8797
    GL_OP_MULTIPLY_MATRIX_EXT = 0x8798
    GL_OP_MOV_EXT = 0x8799
    GL_OUTPUT_VERTEX_EXT = 0x879A
    GL_OUTPUT_COLOR0_EXT = 0x879B
    GL_OUTPUT_COLOR1_EXT = 0x879C
    GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D
    GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E
    GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F
    GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0
    GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1
    GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2
    GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3
    GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4
    GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5
    GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6
    GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7
    GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8
    GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9
    GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA
    GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB
    GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC
    GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD
    GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE
    GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF
    GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0
    GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1
    GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2
    GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3
    GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4
    GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5
    GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6
    GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7
    GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8
    GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9
    GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA
    GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB
    GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC
    GL_OUTPUT_FOG_EXT = 0x87BD
    GL_SCALAR_EXT = 0x87BE
    GL_VECTOR_EXT = 0x87BF
    GL_MATRIX_EXT = 0x87C0
    GL_VARIANT_EXT = 0x87C1
    GL_INVARIANT_EXT = 0x87C2
    GL_LOCAL_CONSTANT_EXT = 0x87C3
    GL_LOCAL_EXT = 0x87C4
    GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5
    GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6
    GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7
    GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8
    GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9
    GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA
    GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB
    GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC
    GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD
    GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE
    GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF
    GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0
    GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1
    GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2
    GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3
    GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4
    GL_X_EXT = 0x87D5
    GL_Y_EXT = 0x87D6
    GL_Z_EXT = 0x87D7
    GL_W_EXT = 0x87D8
    GL_NEGATIVE_X_EXT = 0x87D9
    GL_NEGATIVE_Y_EXT = 0x87DA
    GL_NEGATIVE_Z_EXT = 0x87DB
    GL_NEGATIVE_W_EXT = 0x87DC
    GL_ZERO_EXT = 0x87DD
    GL_ONE_EXT = 0x87DE
    GL_NEGATIVE_ONE_EXT = 0x87DF
    GL_NORMALIZED_RANGE_EXT = 0x87E0
    GL_FULL_RANGE_EXT = 0x87E1
    GL_CURRENT_VERTEX_EXT = 0x87E2
    GL_MVP_MATRIX_EXT = 0x87E3
    GL_VARIANT_VALUE_EXT = 0x87E4
    GL_VARIANT_DATATYPE_EXT = 0x87E5
    GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6
    GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7
    GL_VARIANT_ARRAY_EXT = 0x87E8
    GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9
    GL_INVARIANT_VALUE_EXT = 0x87EA
    GL_INVARIANT_DATATYPE_EXT = 0x87EB
    GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC
    GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED

if 1: # ifndef GL_ATI_vertex_streams ("OpenGL/glext.h":2689)
    """GL_ATI_vertex_streams"""
    GL_MAX_VERTEX_STREAMS_ATI = 0x876B
    GL_VERTEX_STREAM0_ATI = 0x876C
    GL_VERTEX_STREAM1_ATI = 0x876D
    GL_VERTEX_STREAM2_ATI = 0x876E
    GL_VERTEX_STREAM3_ATI = 0x876F
    GL_VERTEX_STREAM4_ATI = 0x8770
    GL_VERTEX_STREAM5_ATI = 0x8771
    GL_VERTEX_STREAM6_ATI = 0x8772
    GL_VERTEX_STREAM7_ATI = 0x8773
    GL_VERTEX_SOURCE_ATI = 0x8774

if 1: # ifndef GL_ATI_element_array ("OpenGL/glext.h":2702)
    """GL_ATI_element_array"""
    GL_ELEMENT_ARRAY_ATI = 0x8768
    GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769
    GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A

if 1: # ifndef GL_SUN_mesh_array ("OpenGL/glext.h":2708)
    """GL_SUN_mesh_array"""
    GL_QUAD_MESH_SUN = 0x8614
    GL_TRIANGLE_MESH_SUN = 0x8615

if 1: # ifndef GL_SUN_slice_accum ("OpenGL/glext.h":2713)
    """GL_SUN_slice_accum"""
    GL_SLICE_ACCUM_SUN = 0x85CC

if 1: # ifndef GL_NV_multisample_filter_hint ("OpenGL/glext.h":2717)
    """GL_NV_multisample_filter_hint"""
    GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534

if 1: # ifndef GL_NV_depth_clamp ("OpenGL/glext.h":2721)
    """GL_NV_depth_clamp"""
    GL_DEPTH_CLAMP_NV = 0x864F

if 1: # ifndef GL_NV_occlusion_query ("OpenGL/glext.h":2725)
    """GL_NV_occlusion_query"""
    GL_PIXEL_COUNTER_BITS_NV = 0x8864
    GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865
    GL_PIXEL_COUNT_NV = 0x8866
    GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867

if 1: # ifndef GL_NV_point_sprite ("OpenGL/glext.h":2732)
    """GL_NV_point_sprite"""
    GL_POINT_SPRITE_NV = 0x8861
    GL_COORD_REPLACE_NV = 0x8862
    GL_POINT_SPRITE_R_MODE_NV = 0x8863

if 1: # ifndef GL_NV_texture_shader3 ("OpenGL/glext.h":2738)
    """GL_NV_texture_shader3"""
    GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850
    GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851
    GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852
    GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853
    GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854
    GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855
    GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856
    GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857
    GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858
    GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859
    GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A
    GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B
    GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C
    GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D
    GL_HILO8_NV = 0x885E
    GL_SIGNED_HILO8_NV = 0x885F
    GL_FORCE_BLUE_TO_ONE_NV = 0x8860

if 1: # ifndef GL_NV_vertex_program1_1 ("OpenGL/glext.h":2758)
    """GL_NV_vertex_program1_1"""

if 1: # ifndef GL_EXT_shadow_funcs ("OpenGL/glext.h":2761)
    """GL_EXT_shadow_funcs"""

if 1: # ifndef GL_EXT_stencil_two_side ("OpenGL/glext.h":2764)
    """GL_EXT_stencil_two_side"""
    GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910
    GL_ACTIVE_STENCIL_FACE_EXT = 0x8911

if 1: # ifndef GL_ATI_text_fragment_shader ("OpenGL/glext.h":2769)
    """GL_ATI_text_fragment_shader"""
    GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200

if 1: # ifndef GL_APPLE_client_storage ("OpenGL/glext.h":2773)
    """GL_APPLE_client_storage"""
    GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2

if 1: # ifndef GL_APPLE_element_array ("OpenGL/glext.h":2777)
    """GL_APPLE_element_array"""
    GL_ELEMENT_ARRAY_APPLE = 0x8768
    GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8769
    GL_ELEMENT_ARRAY_POINTER_APPLE = 0x876A

if 1: # ifndef GL_APPLE_fence ("OpenGL/glext.h":2783)
    """GL_APPLE_fence"""
    GL_DRAW_PIXELS_APPLE = 0x8A0A
    GL_FENCE_APPLE = 0x8A0B

if 1: # ifndef GL_APPLE_vertex_array_object ("OpenGL/glext.h":2788)
    """GL_APPLE_vertex_array_object"""
    GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5

if 1: # ifndef GL_APPLE_vertex_array_range ("OpenGL/glext.h":2792)
    """GL_APPLE_vertex_array_range"""
    GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D
    GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E
    GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F
    GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521
    GL_STORAGE_CACHED_APPLE = 0x85BE
    GL_STORAGE_SHARED_APPLE = 0x85BF

if 1: # ifndef GL_APPLE_ycbcr_422 ("OpenGL/glext.h":2801)
    """GL_APPLE_ycbcr_422"""
    GL_YCBCR_422_APPLE = 0x85B9
    GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA
    GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB

if 1: # ifndef GL_S3_s3tc ("OpenGL/glext.h":2807)
    """GL_S3_s3tc"""
    GL_RGB_S3TC = 0x83A0
    GL_RGB4_S3TC = 0x83A1
    GL_RGBA_S3TC = 0x83A2
    GL_RGBA4_S3TC = 0x83A3

if 1: # ifndef GL_ATI_draw_buffers ("OpenGL/glext.h":2814)
    """GL_ATI_draw_buffers"""
    GL_MAX_DRAW_BUFFERS_ATI = 0x8824
    GL_DRAW_BUFFER0_ATI = 0x8825
    GL_DRAW_BUFFER1_ATI = 0x8826
    GL_DRAW_BUFFER2_ATI = 0x8827
    GL_DRAW_BUFFER3_ATI = 0x8828
    GL_DRAW_BUFFER4_ATI = 0x8829
    GL_DRAW_BUFFER5_ATI = 0x882A
    GL_DRAW_BUFFER6_ATI = 0x882B
    GL_DRAW_BUFFER7_ATI = 0x882C
    GL_DRAW_BUFFER8_ATI = 0x882D
    GL_DRAW_BUFFER9_ATI = 0x882E
    GL_DRAW_BUFFER10_ATI = 0x882F
    GL_DRAW_BUFFER11_ATI = 0x8830
    GL_DRAW_BUFFER12_ATI = 0x8831
    GL_DRAW_BUFFER13_ATI = 0x8832
    GL_DRAW_BUFFER14_ATI = 0x8833
    GL_DRAW_BUFFER15_ATI = 0x8834

if 1: # ifndef GL_ATI_pixel_format_float ("OpenGL/glext.h":2834)
    """GL_ATI_pixel_format_float"""
    GL_TYPE_RGBA_FLOAT_ATI = 0x8820
    GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835

if 1: # ifndef GL_ATI_texture_env_combine3 ("OpenGL/glext.h":2839)
    """GL_ATI_texture_env_combine3"""
    GL_MODULATE_ADD_ATI = 0x8744
    GL_MODULATE_SIGNED_ADD_ATI = 0x8745
    GL_MODULATE_SUBTRACT_ATI = 0x8746

if 1: # ifndef GL_ATI_texture_float ("OpenGL/glext.h":2845)
    """GL_ATI_texture_float"""
    GL_RGBA_FLOAT32_ATI = 0x8814
    GL_RGB_FLOAT32_ATI = 0x8815
    GL_ALPHA_FLOAT32_ATI = 0x8816
    GL_INTENSITY_FLOAT32_ATI = 0x8817
    GL_LUMINANCE_FLOAT32_ATI = 0x8818
    GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819
    GL_RGBA_FLOAT16_ATI = 0x881A
    GL_RGB_FLOAT16_ATI = 0x881B
    GL_ALPHA_FLOAT16_ATI = 0x881C
    GL_INTENSITY_FLOAT16_ATI = 0x881D
    GL_LUMINANCE_FLOAT16_ATI = 0x881E
    GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F

if 1: # ifndef GL_NV_float_buffer ("OpenGL/glext.h":2860)
    """GL_NV_float_buffer"""
    GL_FLOAT_R_NV = 0x8880
    GL_FLOAT_RG_NV = 0x8881
    GL_FLOAT_RGB_NV = 0x8882
    GL_FLOAT_RGBA_NV = 0x8883
    GL_FLOAT_R16_NV = 0x8884
    GL_FLOAT_R32_NV = 0x8885
    GL_FLOAT_RG16_NV = 0x8886
    GL_FLOAT_RG32_NV = 0x8887
    GL_FLOAT_RGB16_NV = 0x8888
    GL_FLOAT_RGB32_NV = 0x8889
    GL_FLOAT_RGBA16_NV = 0x888A
    GL_FLOAT_RGBA32_NV = 0x888B
    GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C
    GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D
    GL_FLOAT_RGBA_MODE_NV = 0x888E

if 1: # ifndef GL_NV_fragment_program ("OpenGL/glext.h":2878)
    """GL_NV_fragment_program"""
    GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868
    GL_FRAGMENT_PROGRAM_NV = 0x8870
    GL_MAX_TEXTURE_COORDS_NV = 0x8871
    GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872
    GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873
    GL_PROGRAM_ERROR_STRING_NV = 0x8874

if 1: # ifndef GL_NV_half_float ("OpenGL/glext.h":2887)
    """GL_NV_half_float"""
    GL_HALF_FLOAT_NV = 0x140B

if 1: # ifndef GL_NV_pixel_data_range ("OpenGL/glext.h":2891)
    """GL_NV_pixel_data_range"""
    GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878
    GL_READ_PIXEL_DATA_RANGE_NV = 0x8879
    GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A
    GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B
    GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C
    GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D

if 1: # ifndef GL_NV_primitive_restart ("OpenGL/glext.h":2900)
    """GL_NV_primitive_restart"""
    GL_PRIMITIVE_RESTART_NV = 0x8558
    GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559

if 1: # ifndef GL_NV_texture_expand_normal ("OpenGL/glext.h":2905)
    """GL_NV_texture_expand_normal"""
    GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F

if 1: # ifndef GL_NV_vertex_program2 ("OpenGL/glext.h":2909)
    """GL_NV_vertex_program2"""

if 1: # ifndef GL_ATI_map_object_buffer ("OpenGL/glext.h":2912)
    """GL_ATI_map_object_buffer"""

if 1: # ifndef GL_ATI_separate_stencil ("OpenGL/glext.h":2915)
    """GL_ATI_separate_stencil"""
    GL_STENCIL_BACK_FUNC_ATI = 0x8800
    GL_STENCIL_BACK_FAIL_ATI = 0x8801
    GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802
    GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803

if 1: # ifndef GL_ATI_vertex_attrib_array_object ("OpenGL/glext.h":2922)
    """GL_ATI_vertex_attrib_array_object"""

if 1: # ifndef GL_OES_read_format ("OpenGL/glext.h":2925)
    """GL_OES_read_format"""
    GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A
    GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B

if 1: # ifndef GL_EXT_depth_bounds_test ("OpenGL/glext.h":2930)
    """GL_EXT_depth_bounds_test"""
    GL_DEPTH_BOUNDS_TEST_EXT = 0x8890
    GL_DEPTH_BOUNDS_EXT = 0x8891

if 1: # ifndef GL_EXT_texture_mirror_clamp ("OpenGL/glext.h":2935)
    """GL_EXT_texture_mirror_clamp"""
    GL_MIRROR_CLAMP_EXT = 0x8742
    GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743
    GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912

if 1: # ifndef GL_EXT_blend_equation_separate ("OpenGL/glext.h":2941)
    """GL_EXT_blend_equation_separate"""
    GL_BLEND_EQUATION_RGB_EXT = 0x8009 # = GL_BLEND_EQUATION
    GL_BLEND_EQUATION_ALPHA_EXT = 0x883D

if 1: # ifndef GL_MESA_pack_invert ("OpenGL/glext.h":2946)
    """GL_MESA_pack_invert"""
    GL_PACK_INVERT_MESA = 0x8758

if 1: # ifndef GL_MESA_ycbcr_texture ("OpenGL/glext.h":2950)
    """GL_MESA_ycbcr_texture"""
    GL_UNSIGNED_SHORT_8_8_MESA = 0x85BA
    GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB
    GL_YCBCR_MESA = 0x8757

if 1: # ifndef GL_EXT_pixel_buffer_object ("OpenGL/glext.h":2956)
    """GL_EXT_pixel_buffer_object"""
    GL_PIXEL_PACK_BUFFER_EXT = 0x88EB
    GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC
    GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED
    GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF

if 1: # ifndef GL_NV_fragment_program_option ("OpenGL/glext.h":2963)
    """GL_NV_fragment_program_option"""

if 1: # ifndef GL_NV_fragment_program2 ("OpenGL/glext.h":2966)
    """GL_NV_fragment_program2"""
    GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4
    GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5
    GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6
    GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7
    GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8

if 1: # ifndef GL_NV_vertex_program2_option ("OpenGL/glext.h":2974)
    """GL_NV_vertex_program2_option"""
    

if 1: # ifndef GL_NV_vertex_program3 ("OpenGL/glext.h":2979)
    """GL_NV_vertex_program3"""
    

if 1: # ifndef GL_EXT_framebuffer_object ("OpenGL/glext.h":2983)
    """GL_EXT_framebuffer_object"""
    GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506
    GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8
    GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6
    GL_RENDERBUFFER_BINDING_EXT = 0x8CA7
    GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0
    GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4
    GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5
    GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6
    GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7
    GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT = 0x8CD8
    GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9
    GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA
    GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB
    GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC
    GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD
    GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF
    GL_COLOR_ATTACHMENT0_EXT = 0x8CE0
    GL_COLOR_ATTACHMENT1_EXT = 0x8CE1
    GL_COLOR_ATTACHMENT2_EXT = 0x8CE2
    GL_COLOR_ATTACHMENT3_EXT = 0x8CE3
    GL_COLOR_ATTACHMENT4_EXT = 0x8CE4
    GL_COLOR_ATTACHMENT5_EXT = 0x8CE5
    GL_COLOR_ATTACHMENT6_EXT = 0x8CE6
    GL_COLOR_ATTACHMENT7_EXT = 0x8CE7
    GL_COLOR_ATTACHMENT8_EXT = 0x8CE8
    GL_COLOR_ATTACHMENT9_EXT = 0x8CE9
    GL_COLOR_ATTACHMENT10_EXT = 0x8CEA
    GL_COLOR_ATTACHMENT11_EXT = 0x8CEB
    GL_COLOR_ATTACHMENT12_EXT = 0x8CEC
    GL_COLOR_ATTACHMENT13_EXT = 0x8CED
    GL_COLOR_ATTACHMENT14_EXT = 0x8CEE
    GL_COLOR_ATTACHMENT15_EXT = 0x8CEF
    GL_DEPTH_ATTACHMENT_EXT = 0x8D00
    GL_STENCIL_ATTACHMENT_EXT = 0x8D20
    GL_FRAMEBUFFER_EXT = 0x8D40
    GL_RENDERBUFFER_EXT = 0x8D41
    GL_RENDERBUFFER_WIDTH_EXT = 0x8D42
    GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43
    GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44
    GL_STENCIL_INDEX1_EXT = 0x8D46
    GL_STENCIL_INDEX4_EXT = 0x8D47
    GL_STENCIL_INDEX8_EXT = 0x8D48
    GL_STENCIL_INDEX16_EXT = 0x8D49
    GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50
    GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51
    GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52
    GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53
    GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54
    GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55

if 1: # ifndef GL_GREMEDY_string_marker ("OpenGL/glext.h":3038)
    """GL_GREMEDY_string_marker"""

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

if 1: # ifndef GL_ARB_vertex_buffer_object ("OpenGL/glext.h":3056)
    """GL_ARB_vertex_buffer_object"""
    
    class GLintptrARB(c_int):
        """typedef GLintptrARB as c_int for absent ptrdiff_t"""
    class GLsizeiptrARB(GLintptrARB):
        """typedef GLsizeiptrARB as GLintptrARB for absent ptrdiff_t"""

if 1: # ifndef GL_ARB_shader_objects ("OpenGL/glext.h":3062)
    """GL_ARB_shader_objects"""
    
    class GLcharARB(GLchar):
        """typedef GLcharARB"""
    class GLhandleARB(c_uint):
        """typedef GLhandleARB"""

if 1: # ifndef GL_ARB_half_float_pixel ("OpenGL/glext.h":3069)
    """GL_ARB_half_float_pixel"""
    

if 1: # ifndef GL_NV_half_float ("OpenGL/glext.h":3073)
    """GL_NV_half_float"""
    class GLhalfNV(GLushort):
        """typedef GLhalfNV"""

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

if 1: # ifndef GL_ARB_multitexture ("OpenGL/glext.h":3589)
    """GL_ARB_multitexture"""
    GL_ARB_multitexture = 1
    
    @bind(GLvoid, [GLenum])
    def glActiveTextureARB(arg_0): pass
    
    @bind(GLvoid, [GLenum])
    def glClientActiveTextureARB(arg_0): pass
    
    @bind(GLvoid, [GLenum, GLdouble])
    def glMultiTexCoord1dARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLdouble)])
    def glMultiTexCoord1dvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLfloat])
    def glMultiTexCoord1fARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glMultiTexCoord1fvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLint])
    def glMultiTexCoord1iARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLint)])
    def glMultiTexCoord1ivARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLshort])
    def glMultiTexCoord1sARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLshort)])
    def glMultiTexCoord1svARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLdouble, GLdouble])
    def glMultiTexCoord2dARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLdouble)])
    def glMultiTexCoord2dvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLfloat, GLfloat])
    def glMultiTexCoord2fARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glMultiTexCoord2fvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLint, GLint])
    def glMultiTexCoord2iARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLint)])
    def glMultiTexCoord2ivARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLshort, GLshort])
    def glMultiTexCoord2sARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLshort)])
    def glMultiTexCoord2svARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLdouble, GLdouble, GLdouble])
    def glMultiTexCoord3dARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLdouble)])
    def glMultiTexCoord3dvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLfloat, GLfloat, GLfloat])
    def glMultiTexCoord3fARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glMultiTexCoord3fvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLint, GLint, GLint])
    def glMultiTexCoord3iARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLint)])
    def glMultiTexCoord3ivARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLshort, GLshort, GLshort])
    def glMultiTexCoord3sARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLshort)])
    def glMultiTexCoord3svARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLdouble, GLdouble, GLdouble, GLdouble])
    def glMultiTexCoord4dARB(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLdouble)])
    def glMultiTexCoord4dvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLfloat, GLfloat, GLfloat, GLfloat])
    def glMultiTexCoord4fARB(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glMultiTexCoord4fvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLint, GLint, GLint, GLint])
    def glMultiTexCoord4iARB(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLint)])
    def glMultiTexCoord4ivARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLshort, GLshort, GLshort, GLshort])
    def glMultiTexCoord4sARB(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLshort)])
    def glMultiTexCoord4svARB(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ARB_transpose_matrix ("OpenGL/glext.h":3663)
    """GL_ARB_transpose_matrix"""
    GL_ARB_transpose_matrix = 1
    
    @bind(GLvoid, [POINTER(GLfloat)])
    def glLoadTransposeMatrixfARB(arg_0): pass
    
    @bind(GLvoid, [POINTER(GLdouble)])
    def glLoadTransposeMatrixdARB(arg_0): pass
    
    @bind(GLvoid, [POINTER(GLfloat)])
    def glMultTransposeMatrixfARB(arg_0): pass
    
    @bind(GLvoid, [POINTER(GLdouble)])
    def glMultTransposeMatrixdARB(arg_0): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ARB_multisample ("OpenGL/glext.h":3677)
    """GL_ARB_multisample"""
    GL_ARB_multisample = 1
    
    @bind(GLvoid, [GLclampf, GLboolean])
    def glSampleCoverageARB(arg_0, arg_1): pass
    
    

if 1: # ifndef GL_ARB_texture_env_add ("OpenGL/glext.h":3685)
    """GL_ARB_texture_env_add"""
    GL_ARB_texture_env_add = 1

if 1: # ifndef GL_ARB_texture_cube_map ("OpenGL/glext.h":3689)
    """GL_ARB_texture_cube_map"""
    GL_ARB_texture_cube_map = 1

if 1: # ifndef GL_ARB_texture_compression ("OpenGL/glext.h":3693)
    """GL_ARB_texture_compression"""
    GL_ARB_texture_compression = 1
    
    @bind(GLvoid, [GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, POINTER(GLvoid)])
    def glCompressedTexImage3DARB(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8): pass
    
    @bind(GLvoid, [GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, POINTER(GLvoid)])
    def glCompressedTexImage2DARB(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7): pass
    
    @bind(GLvoid, [GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, POINTER(GLvoid)])
    def glCompressedTexImage1DARB(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6): pass
    
    @bind(GLvoid, [GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, POINTER(GLvoid)])
    def glCompressedTexSubImage3DARB(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8, arg_9, arg_10): pass
    
    @bind(GLvoid, [GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, POINTER(GLvoid)])
    def glCompressedTexSubImage2DARB(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8): pass
    
    @bind(GLvoid, [GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, POINTER(GLvoid)])
    def glCompressedTexSubImage1DARB(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6): pass
    
    @bind(GLvoid, [GLenum, GLint, POINTER(GLvoid)])
    def glGetCompressedTexImageARB(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ARB_texture_border_clamp ("OpenGL/glext.h":3713)
    """GL_ARB_texture_border_clamp"""
    GL_ARB_texture_border_clamp = 1

if 1: # ifndef GL_ARB_point_parameters ("OpenGL/glext.h":3717)
    """GL_ARB_point_parameters"""
    GL_ARB_point_parameters = 1
    
    @bind(GLvoid, [GLenum, GLfloat])
    def glPointParameterfARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glPointParameterfvARB(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ARB_vertex_blend ("OpenGL/glext.h":3727)
    """GL_ARB_vertex_blend"""
    GL_ARB_vertex_blend = 1
    
    @bind(GLvoid, [GLint, POINTER(GLbyte)])
    def glWeightbvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLint, POINTER(GLshort)])
    def glWeightsvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLint, POINTER(GLint)])
    def glWeightivARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLint, POINTER(GLfloat)])
    def glWeightfvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLint, POINTER(GLdouble)])
    def glWeightdvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLint, POINTER(GLubyte)])
    def glWeightubvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLint, POINTER(GLushort)])
    def glWeightusvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLint, POINTER(GLuint)])
    def glWeightuivARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLint, GLenum, GLsizei, POINTER(GLvoid)])
    def glWeightPointerARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLint])
    def glVertexBlendARB(arg_0): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ARB_matrix_palette ("OpenGL/glext.h":3753)
    """GL_ARB_matrix_palette"""
    GL_ARB_matrix_palette = 1
    
    @bind(GLvoid, [GLint])
    def glCurrentPaletteMatrixARB(arg_0): pass
    
    @bind(GLvoid, [GLint, POINTER(GLubyte)])
    def glMatrixIndexubvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLint, POINTER(GLushort)])
    def glMatrixIndexusvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLint, POINTER(GLuint)])
    def glMatrixIndexuivARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLint, GLenum, GLsizei, POINTER(GLvoid)])
    def glMatrixIndexPointerARB(arg_0, arg_1, arg_2, arg_3): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ARB_texture_env_combine ("OpenGL/glext.h":3769)
    """GL_ARB_texture_env_combine"""
    GL_ARB_texture_env_combine = 1

if 1: # ifndef GL_ARB_texture_env_crossbar ("OpenGL/glext.h":3773)
    """GL_ARB_texture_env_crossbar"""
    GL_ARB_texture_env_crossbar = 1

if 1: # ifndef GL_ARB_texture_env_dot3 ("OpenGL/glext.h":3777)
    """GL_ARB_texture_env_dot3"""
    GL_ARB_texture_env_dot3 = 1

if 1: # ifndef GL_ARB_texture_mirrored_repeat ("OpenGL/glext.h":3781)
    """GL_ARB_texture_mirrored_repeat"""
    GL_ARB_texture_mirrored_repeat = 1

if 1: # ifndef GL_ARB_depth_texture ("OpenGL/glext.h":3785)
    """GL_ARB_depth_texture"""
    GL_ARB_depth_texture = 1

if 1: # ifndef GL_ARB_shadow ("OpenGL/glext.h":3789)
    """GL_ARB_shadow"""
    GL_ARB_shadow = 1

if 1: # ifndef GL_ARB_shadow_ambient ("OpenGL/glext.h":3793)
    """GL_ARB_shadow_ambient"""
    GL_ARB_shadow_ambient = 1

if 1: # ifndef GL_ARB_window_pos ("OpenGL/glext.h":3797)
    """GL_ARB_window_pos"""
    GL_ARB_window_pos = 1
    
    @bind(GLvoid, [GLdouble, GLdouble])
    def glWindowPos2dARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [POINTER(GLdouble)])
    def glWindowPos2dvARB(arg_0): pass
    
    @bind(GLvoid, [GLfloat, GLfloat])
    def glWindowPos2fARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [POINTER(GLfloat)])
    def glWindowPos2fvARB(arg_0): pass
    
    @bind(GLvoid, [GLint, GLint])
    def glWindowPos2iARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [POINTER(GLint)])
    def glWindowPos2ivARB(arg_0): pass
    
    @bind(GLvoid, [GLshort, GLshort])
    def glWindowPos2sARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [POINTER(GLshort)])
    def glWindowPos2svARB(arg_0): pass
    
    @bind(GLvoid, [GLdouble, GLdouble, GLdouble])
    def glWindowPos3dARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLdouble)])
    def glWindowPos3dvARB(arg_0): pass
    
    @bind(GLvoid, [GLfloat, GLfloat, GLfloat])
    def glWindowPos3fARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLfloat)])
    def glWindowPos3fvARB(arg_0): pass
    
    @bind(GLvoid, [GLint, GLint, GLint])
    def glWindowPos3iARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLint)])
    def glWindowPos3ivARB(arg_0): pass
    
    @bind(GLvoid, [GLshort, GLshort, GLshort])
    def glWindowPos3sARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLshort)])
    def glWindowPos3svARB(arg_0): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ARB_vertex_program ("OpenGL/glext.h":3835)
    """GL_ARB_vertex_program"""
    GL_ARB_vertex_program = 1
    
    @bind(GLvoid, [GLuint, GLdouble])
    def glVertexAttrib1dARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLdouble)])
    def glVertexAttrib1dvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLfloat])
    def glVertexAttrib1fARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLfloat)])
    def glVertexAttrib1fvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLshort])
    def glVertexAttrib1sARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLshort)])
    def glVertexAttrib1svARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLdouble, GLdouble])
    def glVertexAttrib2dARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLdouble)])
    def glVertexAttrib2dvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLfloat, GLfloat])
    def glVertexAttrib2fARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLfloat)])
    def glVertexAttrib2fvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLshort, GLshort])
    def glVertexAttrib2sARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLshort)])
    def glVertexAttrib2svARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLdouble, GLdouble, GLdouble])
    def glVertexAttrib3dARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLdouble)])
    def glVertexAttrib3dvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLfloat, GLfloat, GLfloat])
    def glVertexAttrib3fARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLfloat)])
    def glVertexAttrib3fvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLshort, GLshort, GLshort])
    def glVertexAttrib3sARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLshort)])
    def glVertexAttrib3svARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLbyte)])
    def glVertexAttrib4NbvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLint)])
    def glVertexAttrib4NivARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLshort)])
    def glVertexAttrib4NsvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLubyte, GLubyte, GLubyte, GLubyte])
    def glVertexAttrib4NubARB(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLubyte)])
    def glVertexAttrib4NubvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLuint)])
    def glVertexAttrib4NuivARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLushort)])
    def glVertexAttrib4NusvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLbyte)])
    def glVertexAttrib4bvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLdouble, GLdouble, GLdouble, GLdouble])
    def glVertexAttrib4dARB(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLdouble)])
    def glVertexAttrib4dvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLfloat, GLfloat, GLfloat, GLfloat])
    def glVertexAttrib4fARB(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLfloat)])
    def glVertexAttrib4fvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLint)])
    def glVertexAttrib4ivARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLshort, GLshort, GLshort, GLshort])
    def glVertexAttrib4sARB(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLshort)])
    def glVertexAttrib4svARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLubyte)])
    def glVertexAttrib4ubvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLuint)])
    def glVertexAttrib4uivARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLushort)])
    def glVertexAttrib4usvARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLint, GLenum, GLboolean, GLsizei, POINTER(GLvoid)])
    def glVertexAttribPointerARB(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLuint])
    def glEnableVertexAttribArrayARB(arg_0): pass
    
    @bind(GLvoid, [GLuint])
    def glDisableVertexAttribArrayARB(arg_0): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLsizei, POINTER(GLvoid)])
    def glProgramStringARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLuint])
    def glBindProgramARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glDeleteProgramsARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glGenProgramsARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble])
    def glProgramEnvParameter4dARB(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLenum, GLuint, POINTER(GLdouble)])
    def glProgramEnvParameter4dvARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat])
    def glProgramEnvParameter4fARB(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLenum, GLuint, POINTER(GLfloat)])
    def glProgramEnvParameter4fvARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble])
    def glProgramLocalParameter4dARB(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLenum, GLuint, POINTER(GLdouble)])
    def glProgramLocalParameter4dvARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat])
    def glProgramLocalParameter4fARB(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLenum, GLuint, POINTER(GLfloat)])
    def glProgramLocalParameter4fvARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLuint, POINTER(GLdouble)])
    def glGetProgramEnvParameterdvARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLuint, POINTER(GLfloat)])
    def glGetProgramEnvParameterfvARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLuint, POINTER(GLdouble)])
    def glGetProgramLocalParameterdvARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLuint, POINTER(GLfloat)])
    def glGetProgramLocalParameterfvARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glGetProgramivARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLvoid)])
    def glGetProgramStringARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLdouble)])
    def glGetVertexAttribdvARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLfloat)])
    def glGetVertexAttribfvARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLint)])
    def glGetVertexAttribivARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(POINTER(GLvoid))])
    def glGetVertexAttribPointervARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLboolean, [GLuint])
    def glIsProgramARB(arg_0): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ARB_fragment_program ("OpenGL/glext.h":3965)
    """GL_ARB_fragment_program"""
    GL_ARB_fragment_program = 1
    

if 1: # ifndef GL_ARB_vertex_buffer_object ("OpenGL/glext.h":3970)
    """GL_ARB_vertex_buffer_object"""
    GL_ARB_vertex_buffer_object = 1
    
    @bind(GLvoid, [GLenum, GLuint])
    def glBindBufferARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glDeleteBuffersARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glGenBuffersARB(arg_0, arg_1): pass
    
    @bind(GLboolean, [GLuint])
    def glIsBufferARB(arg_0): pass
    
    @bind(GLvoid, [GLenum, GLsizeiptrARB, POINTER(GLvoid), GLenum])
    def glBufferDataARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLintptrARB, GLsizeiptrARB, POINTER(GLvoid)])
    def glBufferSubDataARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLintptrARB, GLsizeiptrARB, POINTER(GLvoid)])
    def glGetBufferSubDataARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(POINTER(GLvoid), [GLenum, GLenum])
    def glMapBufferARB(arg_0, arg_1): pass
    
    @bind(GLboolean, [GLenum])
    def glUnmapBufferARB(arg_0): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glGetBufferParameterivARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(POINTER(GLvoid))])
    def glGetBufferPointervARB(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ARB_occlusion_query ("OpenGL/glext.h":3998)
    """GL_ARB_occlusion_query"""
    GL_ARB_occlusion_query = 1
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glGenQueriesARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glDeleteQueriesARB(arg_0, arg_1): pass
    
    @bind(GLboolean, [GLuint])
    def glIsQueryARB(arg_0): pass
    
    @bind(GLvoid, [GLenum, GLuint])
    def glBeginQueryARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum])
    def glEndQueryARB(arg_0): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glGetQueryivARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLint)])
    def glGetQueryObjectivARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLuint)])
    def glGetQueryObjectuivARB(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ARB_shader_objects ("OpenGL/glext.h":4020)
    """GL_ARB_shader_objects"""
    GL_ARB_shader_objects = 1
    
    @bind(GLvoid, [GLhandleARB])
    def glDeleteObjectARB(arg_0): pass
    
    @bind(GLhandleARB, [GLenum])
    def glGetHandleARB(arg_0): pass
    
    @bind(GLvoid, [GLhandleARB, GLhandleARB])
    def glDetachObjectARB(arg_0, arg_1): pass
    
    @bind(GLhandleARB, [GLenum])
    def glCreateShaderObjectARB(arg_0): pass
    
    @bind(GLvoid, [GLhandleARB, GLsizei, POINTER(POINTER(GLcharARB)), POINTER(GLint)])
    def glShaderSourceARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLhandleARB])
    def glCompileShaderARB(arg_0): pass
    
    @bind(GLhandleARB, [])
    def glCreateProgramObjectARB(): pass
    
    @bind(GLvoid, [GLhandleARB, GLhandleARB])
    def glAttachObjectARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLhandleARB])
    def glLinkProgramARB(arg_0): pass
    
    @bind(GLvoid, [GLhandleARB])
    def glUseProgramObjectARB(arg_0): pass
    
    @bind(GLvoid, [GLhandleARB])
    def glValidateProgramARB(arg_0): pass
    
    @bind(GLvoid, [GLint, GLfloat])
    def glUniform1fARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLint, GLfloat, GLfloat])
    def glUniform2fARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLint, GLfloat, GLfloat, GLfloat])
    def glUniform3fARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLint, GLfloat, GLfloat, GLfloat, GLfloat])
    def glUniform4fARB(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLint, GLint])
    def glUniform1iARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLint, GLint, GLint])
    def glUniform2iARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLint, GLint, GLint, GLint])
    def glUniform3iARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLint, GLint, GLint, GLint, GLint])
    def glUniform4iARB(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLint, GLsizei, POINTER(GLfloat)])
    def glUniform1fvARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLint, GLsizei, POINTER(GLfloat)])
    def glUniform2fvARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLint, GLsizei, POINTER(GLfloat)])
    def glUniform3fvARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLint, GLsizei, POINTER(GLfloat)])
    def glUniform4fvARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLint, GLsizei, POINTER(GLint)])
    def glUniform1ivARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLint, GLsizei, POINTER(GLint)])
    def glUniform2ivARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLint, GLsizei, POINTER(GLint)])
    def glUniform3ivARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLint, GLsizei, POINTER(GLint)])
    def glUniform4ivARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLint, GLsizei, GLboolean, POINTER(GLfloat)])
    def glUniformMatrix2fvARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLint, GLsizei, GLboolean, POINTER(GLfloat)])
    def glUniformMatrix3fvARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLint, GLsizei, GLboolean, POINTER(GLfloat)])
    def glUniformMatrix4fvARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLhandleARB, GLenum, POINTER(GLfloat)])
    def glGetObjectParameterfvARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLhandleARB, GLenum, POINTER(GLint)])
    def glGetObjectParameterivARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLhandleARB, GLsizei, POINTER(GLsizei), POINTER(GLcharARB)])
    def glGetInfoLogARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLhandleARB, GLsizei, POINTER(GLsizei), POINTER(GLhandleARB)])
    def glGetAttachedObjectsARB(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLint, [GLhandleARB, POINTER(GLcharARB)])
    def glGetUniformLocationARB(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLhandleARB, GLuint, GLsizei, POINTER(GLsizei), POINTER(GLint), POINTER(GLenum), POINTER(GLcharARB)])
    def glGetActiveUniformARB(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6): pass
    
    @bind(GLvoid, [GLhandleARB, GLint, POINTER(GLfloat)])
    def glGetUniformfvARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLhandleARB, GLint, POINTER(GLint)])
    def glGetUniformivARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLhandleARB, GLsizei, POINTER(GLsizei), POINTER(GLcharARB)])
    def glGetShaderSourceARB(arg_0, arg_1, arg_2, arg_3): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ARB_vertex_shader ("OpenGL/glext.h":4104)
    """GL_ARB_vertex_shader"""
    GL_ARB_vertex_shader = 1
    
    @bind(GLvoid, [GLhandleARB, GLuint, POINTER(GLcharARB)])
    def glBindAttribLocationARB(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLhandleARB, GLuint, GLsizei, POINTER(GLsizei), POINTER(GLint), POINTER(GLenum), POINTER(GLcharARB)])
    def glGetActiveAttribARB(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6): pass
    
    @bind(GLint, [GLhandleARB, POINTER(GLcharARB)])
    def glGetAttribLocationARB(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ARB_fragment_shader ("OpenGL/glext.h":4116)
    """GL_ARB_fragment_shader"""
    GL_ARB_fragment_shader = 1

if 1: # ifndef GL_ARB_shading_language_100 ("OpenGL/glext.h":4120)
    """GL_ARB_shading_language_100"""
    GL_ARB_shading_language_100 = 1

if 1: # ifndef GL_ARB_texture_non_power_of_two ("OpenGL/glext.h":4124)
    """GL_ARB_texture_non_power_of_two"""
    GL_ARB_texture_non_power_of_two = 1

if 1: # ifndef GL_ARB_point_sprite ("OpenGL/glext.h":4128)
    """GL_ARB_point_sprite"""
    GL_ARB_point_sprite = 1

if 1: # ifndef GL_ARB_fragment_program_shadow ("OpenGL/glext.h":4132)
    """GL_ARB_fragment_program_shadow"""
    GL_ARB_fragment_program_shadow = 1

if 1: # ifndef GL_ARB_draw_buffers ("OpenGL/glext.h":4136)
    """GL_ARB_draw_buffers"""
    GL_ARB_draw_buffers = 1
    
    @bind(GLvoid, [GLsizei, POINTER(GLenum)])
    def glDrawBuffersARB(arg_0, arg_1): pass
    
    

if 1: # ifndef GL_ARB_texture_rectangle ("OpenGL/glext.h":4144)
    """GL_ARB_texture_rectangle"""
    GL_ARB_texture_rectangle = 1

if 1: # ifndef GL_ARB_color_buffer_float ("OpenGL/glext.h":4148)
    """GL_ARB_color_buffer_float"""
    GL_ARB_color_buffer_float = 1
    
    @bind(GLvoid, [GLenum, GLenum])
    def glClampColorARB(arg_0, arg_1): pass
    
    

if 1: # ifndef GL_ARB_half_float_pixel ("OpenGL/glext.h":4156)
    """GL_ARB_half_float_pixel"""
    GL_ARB_half_float_pixel = 1

if 1: # ifndef GL_ARB_texture_float ("OpenGL/glext.h":4160)
    """GL_ARB_texture_float"""
    GL_ARB_texture_float = 1

if 1: # ifndef GL_ARB_pixel_buffer_object ("OpenGL/glext.h":4164)
    """GL_ARB_pixel_buffer_object"""
    GL_ARB_pixel_buffer_object = 1

if 1: # ifndef GL_EXT_abgr ("OpenGL/glext.h":4168)
    """GL_EXT_abgr"""
    GL_EXT_abgr = 1

if 1: # ifndef GL_EXT_blend_color ("OpenGL/glext.h":4172)
    """GL_EXT_blend_color"""
    GL_EXT_blend_color = 1
    
    @bind(GLvoid, [GLclampf, GLclampf, GLclampf, GLclampf])
    def glBlendColorEXT(arg_0, arg_1, arg_2, arg_3): pass
    
    

if 1: # ifndef GL_EXT_polygon_offset ("OpenGL/glext.h":4180)
    """GL_EXT_polygon_offset"""
    GL_EXT_polygon_offset = 1
    
    @bind(GLvoid, [GLfloat, GLfloat])
    def glPolygonOffsetEXT(arg_0, arg_1): pass
    
    

if 1: # ifndef GL_EXT_texture ("OpenGL/glext.h":4188)
    """GL_EXT_texture"""
    GL_EXT_texture = 1

if 1: # ifndef GL_EXT_texture3D ("OpenGL/glext.h":4192)
    """GL_EXT_texture3D"""
    GL_EXT_texture3D = 1
    
    @bind(GLvoid, [GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, POINTER(GLvoid)])
    def glTexImage3DEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8, arg_9): pass
    
    @bind(GLvoid, [GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, POINTER(GLvoid)])
    def glTexSubImage3DEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8, arg_9, arg_10): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SGIS_texture_filter4 ("OpenGL/glext.h":4202)
    """GL_SGIS_texture_filter4"""
    GL_SGIS_texture_filter4 = 1
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glGetTexFilterFuncSGIS(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLsizei, POINTER(GLfloat)])
    def glTexFilterFuncSGIS(arg_0, arg_1, arg_2, arg_3): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_EXT_subtexture ("OpenGL/glext.h":4212)
    """GL_EXT_subtexture"""
    GL_EXT_subtexture = 1
    
    @bind(GLvoid, [GLenum, GLint, GLint, GLsizei, GLenum, GLenum, POINTER(GLvoid)])
    def glTexSubImage1DEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6): pass
    
    @bind(GLvoid, [GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, POINTER(GLvoid)])
    def glTexSubImage2DEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_EXT_copy_texture ("OpenGL/glext.h":4222)
    """GL_EXT_copy_texture"""
    GL_EXT_copy_texture = 1
    
    @bind(GLvoid, [GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint])
    def glCopyTexImage1DEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6): pass
    
    @bind(GLvoid, [GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint])
    def glCopyTexImage2DEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7): pass
    
    @bind(GLvoid, [GLenum, GLint, GLint, GLint, GLint, GLsizei])
    def glCopyTexSubImage1DEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei])
    def glCopyTexSubImage2DEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7): pass
    
    @bind(GLvoid, [GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei])
    def glCopyTexSubImage3DEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_EXT_histogram ("OpenGL/glext.h":4238)
    """GL_EXT_histogram"""
    GL_EXT_histogram = 1
    
    @bind(GLvoid, [GLenum, GLboolean, GLenum, GLenum, POINTER(GLvoid)])
    def glGetHistogramEXT(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glGetHistogramParameterfvEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glGetHistogramParameterivEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLboolean, GLenum, GLenum, POINTER(GLvoid)])
    def glGetMinmaxEXT(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glGetMinmaxParameterfvEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glGetMinmaxParameterivEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLsizei, GLenum, GLboolean])
    def glHistogramEXT(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLboolean])
    def glMinmaxEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum])
    def glResetHistogramEXT(arg_0): pass
    
    @bind(GLvoid, [GLenum])
    def glResetMinmaxEXT(arg_0): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_EXT_convolution ("OpenGL/glext.h":4264)
    """GL_EXT_convolution"""
    GL_EXT_convolution = 1
    
    @bind(GLvoid, [GLenum, GLenum, GLsizei, GLenum, GLenum, POINTER(GLvoid)])
    def glConvolutionFilter1DEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, POINTER(GLvoid)])
    def glConvolutionFilter2DEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLfloat])
    def glConvolutionParameterfEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glConvolutionParameterfvEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLint])
    def glConvolutionParameteriEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glConvolutionParameterivEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLint, GLint, GLsizei])
    def glCopyConvolutionFilter1DEXT(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLint, GLint, GLsizei, GLsizei])
    def glCopyConvolutionFilter2DEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLenum, POINTER(GLvoid)])
    def glGetConvolutionFilterEXT(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glGetConvolutionParameterfvEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glGetConvolutionParameterivEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLenum, POINTER(GLvoid), POINTER(GLvoid), POINTER(GLvoid)])
    def glGetSeparableFilterEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, POINTER(GLvoid), POINTER(GLvoid)])
    def glSeparableFilter2DEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_EXT_color_matrix ("OpenGL/glext.h":4296)
    """GL_EXT_color_matrix"""
    GL_EXT_color_matrix = 1

if 1: # ifndef GL_SGI_color_table ("OpenGL/glext.h":4300)
    """GL_SGI_color_table"""
    GL_SGI_color_table = 1
    
    @bind(GLvoid, [GLenum, GLenum, GLsizei, GLenum, GLenum, POINTER(GLvoid)])
    def glColorTableSGI(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glColorTableParameterfvSGI(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glColorTableParameterivSGI(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLint, GLint, GLsizei])
    def glCopyColorTableSGI(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLenum, POINTER(GLvoid)])
    def glGetColorTableSGI(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glGetColorTableParameterfvSGI(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glGetColorTableParameterivSGI(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SGIX_pixel_texture ("OpenGL/glext.h":4320)
    """GL_SGIX_pixel_texture"""
    GL_SGIX_pixel_texture = 1
    
    @bind(GLvoid, [GLenum])
    def glPixelTexGenSGIX(arg_0): pass
    
    

if 1: # ifndef GL_SGIS_pixel_texture ("OpenGL/glext.h":4328)
    """GL_SGIS_pixel_texture"""
    GL_SGIS_pixel_texture = 1
    
    @bind(GLvoid, [GLenum, GLint])
    def glPixelTexGenParameteriSGIS(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLint)])
    def glPixelTexGenParameterivSGIS(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLfloat])
    def glPixelTexGenParameterfSGIS(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glPixelTexGenParameterfvSGIS(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLint)])
    def glGetPixelTexGenParameterivSGIS(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glGetPixelTexGenParameterfvSGIS(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SGIS_texture4D ("OpenGL/glext.h":4346)
    """GL_SGIS_texture4D"""
    GL_SGIS_texture4D = 1
    
    @bind(GLvoid, [GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, POINTER(GLvoid)])
    def glTexImage4DSGIS(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8, arg_9, arg_10): pass
    
    @bind(GLvoid, [GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, POINTER(GLvoid)])
    def glTexSubImage4DSGIS(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8, arg_9, arg_10, arg_11, arg_12): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SGI_texture_color_table ("OpenGL/glext.h":4356)
    """GL_SGI_texture_color_table"""
    GL_SGI_texture_color_table = 1

if 1: # ifndef GL_EXT_cmyka ("OpenGL/glext.h":4360)
    """GL_EXT_cmyka"""
    GL_EXT_cmyka = 1

if 1: # ifndef GL_EXT_texture_object ("OpenGL/glext.h":4364)
    """GL_EXT_texture_object"""
    GL_EXT_texture_object = 1
    
    @bind(GLboolean, [GLsizei, POINTER(GLuint), POINTER(GLboolean)])
    def glAreTexturesResidentEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLuint])
    def glBindTextureEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glDeleteTexturesEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glGenTexturesEXT(arg_0, arg_1): pass
    
    @bind(GLboolean, [GLuint])
    def glIsTextureEXT(arg_0): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint), POINTER(GLclampf)])
    def glPrioritizeTexturesEXT(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SGIS_detail_texture ("OpenGL/glext.h":4382)
    """GL_SGIS_detail_texture"""
    GL_SGIS_detail_texture = 1
    
    @bind(GLvoid, [GLenum, GLsizei, POINTER(GLfloat)])
    def glDetailTexFuncSGIS(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glGetDetailTexFuncSGIS(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SGIS_sharpen_texture ("OpenGL/glext.h":4392)
    """GL_SGIS_sharpen_texture"""
    GL_SGIS_sharpen_texture = 1
    
    @bind(GLvoid, [GLenum, GLsizei, POINTER(GLfloat)])
    def glSharpenTexFuncSGIS(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glGetSharpenTexFuncSGIS(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_EXT_packed_pixels ("OpenGL/glext.h":4402)
    """GL_EXT_packed_pixels"""
    GL_EXT_packed_pixels = 1

if 1: # ifndef GL_SGIS_texture_lod ("OpenGL/glext.h":4406)
    """GL_SGIS_texture_lod"""
    GL_SGIS_texture_lod = 1

if 1: # ifndef GL_SGIS_multisample ("OpenGL/glext.h":4410)
    """GL_SGIS_multisample"""
    GL_SGIS_multisample = 1
    
    @bind(GLvoid, [GLclampf, GLboolean])
    def glSampleMaskSGIS(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum])
    def glSamplePatternSGIS(arg_0): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_EXT_rescale_normal ("OpenGL/glext.h":4420)
    """GL_EXT_rescale_normal"""
    GL_EXT_rescale_normal = 1

if 1: # ifndef GL_EXT_vertex_array ("OpenGL/glext.h":4424)
    """GL_EXT_vertex_array"""
    GL_EXT_vertex_array = 1
    
    @bind(GLvoid, [GLint])
    def glArrayElementEXT(arg_0): pass
    
    @bind(GLvoid, [GLint, GLenum, GLsizei, GLsizei, POINTER(GLvoid)])
    def glColorPointerEXT(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLenum, GLint, GLsizei])
    def glDrawArraysEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLsizei, GLsizei, POINTER(GLboolean)])
    def glEdgeFlagPointerEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, POINTER(POINTER(GLvoid))])
    def glGetPointervEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLsizei, GLsizei, POINTER(GLvoid)])
    def glIndexPointerEXT(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLsizei, GLsizei, POINTER(GLvoid)])
    def glNormalPointerEXT(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLint, GLenum, GLsizei, GLsizei, POINTER(GLvoid)])
    def glTexCoordPointerEXT(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLint, GLenum, GLsizei, GLsizei, POINTER(GLvoid)])
    def glVertexPointerEXT(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_EXT_misc_attribute ("OpenGL/glext.h":4448)
    """GL_EXT_misc_attribute"""
    GL_EXT_misc_attribute = 1

if 1: # ifndef GL_SGIS_generate_mipmap ("OpenGL/glext.h":4452)
    """GL_SGIS_generate_mipmap"""
    GL_SGIS_generate_mipmap = 1

if 1: # ifndef GL_SGIX_clipmap ("OpenGL/glext.h":4456)
    """GL_SGIX_clipmap"""
    GL_SGIX_clipmap = 1

if 1: # ifndef GL_SGIX_shadow ("OpenGL/glext.h":4460)
    """GL_SGIX_shadow"""
    GL_SGIX_shadow = 1

if 1: # ifndef GL_SGIS_texture_edge_clamp ("OpenGL/glext.h":4464)
    """GL_SGIS_texture_edge_clamp"""
    GL_SGIS_texture_edge_clamp = 1

if 1: # ifndef GL_SGIS_texture_border_clamp ("OpenGL/glext.h":4468)
    """GL_SGIS_texture_border_clamp"""
    GL_SGIS_texture_border_clamp = 1

if 1: # ifndef GL_EXT_blend_minmax ("OpenGL/glext.h":4472)
    """GL_EXT_blend_minmax"""
    GL_EXT_blend_minmax = 1
    
    @bind(GLvoid, [GLenum])
    def glBlendEquationEXT(arg_0): pass
    
    

if 1: # ifndef GL_EXT_blend_subtract ("OpenGL/glext.h":4480)
    """GL_EXT_blend_subtract"""
    GL_EXT_blend_subtract = 1

if 1: # ifndef GL_EXT_blend_logic_op ("OpenGL/glext.h":4484)
    """GL_EXT_blend_logic_op"""
    GL_EXT_blend_logic_op = 1

if 1: # ifndef GL_SGIX_interlace ("OpenGL/glext.h":4488)
    """GL_SGIX_interlace"""
    GL_SGIX_interlace = 1

if 1: # ifndef GL_SGIX_pixel_tiles ("OpenGL/glext.h":4492)
    """GL_SGIX_pixel_tiles"""
    GL_SGIX_pixel_tiles = 1

if 1: # ifndef GL_SGIX_texture_select ("OpenGL/glext.h":4496)
    """GL_SGIX_texture_select"""
    GL_SGIX_texture_select = 1

if 1: # ifndef GL_SGIX_sprite ("OpenGL/glext.h":4500)
    """GL_SGIX_sprite"""
    GL_SGIX_sprite = 1
    
    @bind(GLvoid, [GLenum, GLfloat])
    def glSpriteParameterfSGIX(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glSpriteParameterfvSGIX(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLint])
    def glSpriteParameteriSGIX(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLint)])
    def glSpriteParameterivSGIX(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SGIX_texture_multi_buffer ("OpenGL/glext.h":4514)
    """GL_SGIX_texture_multi_buffer"""
    GL_SGIX_texture_multi_buffer = 1

if 1: # ifndef GL_EXT_point_parameters ("OpenGL/glext.h":4518)
    """GL_EXT_point_parameters"""
    GL_EXT_point_parameters = 1
    
    @bind(GLvoid, [GLenum, GLfloat])
    def glPointParameterfEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glPointParameterfvEXT(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SGIS_point_parameters ("OpenGL/glext.h":4528)
    """GL_SGIS_point_parameters"""
    GL_SGIS_point_parameters = 1
    
    @bind(GLvoid, [GLenum, GLfloat])
    def glPointParameterfSGIS(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glPointParameterfvSGIS(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SGIX_instruments ("OpenGL/glext.h":4538)
    """GL_SGIX_instruments"""
    GL_SGIX_instruments = 1
    
    @bind(GLint, [])
    def glGetInstrumentsSGIX(): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLint)])
    def glInstrumentsBufferSGIX(arg_0, arg_1): pass
    
    @bind(GLint, [POINTER(GLint)])
    def glPollInstrumentsSGIX(arg_0): pass
    
    @bind(GLvoid, [GLint])
    def glReadInstrumentsSGIX(arg_0): pass
    
    @bind(GLvoid, [])
    def glStartInstrumentsSGIX(): pass
    
    @bind(GLvoid, [GLint])
    def glStopInstrumentsSGIX(arg_0): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SGIX_texture_scale_bias ("OpenGL/glext.h":4556)
    """GL_SGIX_texture_scale_bias"""
    GL_SGIX_texture_scale_bias = 1

if 1: # ifndef GL_SGIX_framezoom ("OpenGL/glext.h":4560)
    """GL_SGIX_framezoom"""
    GL_SGIX_framezoom = 1
    
    @bind(GLvoid, [GLint])
    def glFrameZoomSGIX(arg_0): pass
    
    

if 1: # ifndef GL_SGIX_tag_sample_buffer ("OpenGL/glext.h":4568)
    """GL_SGIX_tag_sample_buffer"""
    GL_SGIX_tag_sample_buffer = 1
    
    @bind(GLvoid, [])
    def glTagSampleBufferSGIX(): pass
    
    

if 1: # ifndef GL_SGIX_polynomial_ffd ("OpenGL/glext.h":4576)
    """GL_SGIX_polynomial_ffd"""
    GL_SGIX_polynomial_ffd = 1
    
    @bind(GLvoid, [GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, POINTER(GLdouble)])
    def glDeformationMap3dSGIX(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8, arg_9, arg_10, arg_11, arg_12, arg_13): pass
    
    @bind(GLvoid, [GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, POINTER(GLfloat)])
    def glDeformationMap3fSGIX(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8, arg_9, arg_10, arg_11, arg_12, arg_13): pass
    
    @bind(GLvoid, [GLbitfield])
    def glDeformSGIX(arg_0): pass
    
    @bind(GLvoid, [GLbitfield])
    def glLoadIdentityDeformationMapSGIX(arg_0): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SGIX_reference_plane ("OpenGL/glext.h":4590)
    """GL_SGIX_reference_plane"""
    GL_SGIX_reference_plane = 1
    
    @bind(GLvoid, [POINTER(GLdouble)])
    def glReferencePlaneSGIX(arg_0): pass
    
    

if 1: # ifndef GL_SGIX_flush_raster ("OpenGL/glext.h":4598)
    """GL_SGIX_flush_raster"""
    GL_SGIX_flush_raster = 1
    
    @bind(GLvoid, [])
    def glFlushRasterSGIX(): pass
    
    

if 1: # ifndef GL_SGIX_depth_texture ("OpenGL/glext.h":4606)
    """GL_SGIX_depth_texture"""
    GL_SGIX_depth_texture = 1

if 1: # ifndef GL_SGIS_fog_function ("OpenGL/glext.h":4610)
    """GL_SGIS_fog_function"""
    GL_SGIS_fog_function = 1
    
    @bind(GLvoid, [GLsizei, POINTER(GLfloat)])
    def glFogFuncSGIS(arg_0, arg_1): pass
    
    @bind(GLvoid, [POINTER(GLfloat)])
    def glGetFogFuncSGIS(arg_0): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SGIX_fog_offset ("OpenGL/glext.h":4620)
    """GL_SGIX_fog_offset"""
    GL_SGIX_fog_offset = 1

if 1: # ifndef GL_HP_image_transform ("OpenGL/glext.h":4624)
    """GL_HP_image_transform"""
    GL_HP_image_transform = 1
    
    @bind(GLvoid, [GLenum, GLenum, GLint])
    def glImageTransformParameteriHP(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLfloat])
    def glImageTransformParameterfHP(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glImageTransformParameterivHP(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glImageTransformParameterfvHP(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glGetImageTransformParameterivHP(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glGetImageTransformParameterfvHP(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_HP_convolution_border_modes ("OpenGL/glext.h":4642)
    """GL_HP_convolution_border_modes"""
    GL_HP_convolution_border_modes = 1

if 1: # ifndef GL_SGIX_texture_add_env ("OpenGL/glext.h":4646)
    """GL_SGIX_texture_add_env"""
    GL_SGIX_texture_add_env = 1

if 1: # ifndef GL_EXT_color_subtable ("OpenGL/glext.h":4650)
    """GL_EXT_color_subtable"""
    GL_EXT_color_subtable = 1
    
    @bind(GLvoid, [GLenum, GLsizei, GLsizei, GLenum, GLenum, POINTER(GLvoid)])
    def glColorSubTableEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLenum, GLsizei, GLint, GLint, GLsizei])
    def glCopyColorSubTableEXT(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_PGI_vertex_hints ("OpenGL/glext.h":4660)
    """GL_PGI_vertex_hints"""
    GL_PGI_vertex_hints = 1

if 1: # ifndef GL_PGI_misc_hints ("OpenGL/glext.h":4664)
    """GL_PGI_misc_hints"""
    GL_PGI_misc_hints = 1
    
    @bind(GLvoid, [GLenum, GLint])
    def glHintPGI(arg_0, arg_1): pass
    
    

if 1: # ifndef GL_EXT_paletted_texture ("OpenGL/glext.h":4672)
    """GL_EXT_paletted_texture"""
    GL_EXT_paletted_texture = 1
    
    @bind(GLvoid, [GLenum, GLenum, GLsizei, GLenum, GLenum, POINTER(GLvoid)])
    def glColorTableEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLenum, POINTER(GLvoid)])
    def glGetColorTableEXT(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glGetColorTableParameterivEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glGetColorTableParameterfvEXT(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_EXT_clip_volume_hint ("OpenGL/glext.h":4686)
    """GL_EXT_clip_volume_hint"""
    GL_EXT_clip_volume_hint = 1

if 1: # ifndef GL_SGIX_list_priority ("OpenGL/glext.h":4690)
    """GL_SGIX_list_priority"""
    GL_SGIX_list_priority = 1
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLfloat)])
    def glGetListParameterfvSGIX(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLint)])
    def glGetListParameterivSGIX(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, GLfloat])
    def glListParameterfSGIX(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLfloat)])
    def glListParameterfvSGIX(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, GLint])
    def glListParameteriSGIX(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLint)])
    def glListParameterivSGIX(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SGIX_ir_instrument1 ("OpenGL/glext.h":4708)
    """GL_SGIX_ir_instrument1"""
    GL_SGIX_ir_instrument1 = 1

if 1: # ifndef GL_SGIX_calligraphic_fragment ("OpenGL/glext.h":4712)
    """GL_SGIX_calligraphic_fragment"""
    GL_SGIX_calligraphic_fragment = 1

if 1: # ifndef GL_SGIX_texture_lod_bias ("OpenGL/glext.h":4716)
    """GL_SGIX_texture_lod_bias"""
    GL_SGIX_texture_lod_bias = 1

if 1: # ifndef GL_SGIX_shadow_ambient ("OpenGL/glext.h":4720)
    """GL_SGIX_shadow_ambient"""
    GL_SGIX_shadow_ambient = 1

if 1: # ifndef GL_EXT_index_texture ("OpenGL/glext.h":4724)
    """GL_EXT_index_texture"""
    GL_EXT_index_texture = 1

if 1: # ifndef GL_EXT_index_material ("OpenGL/glext.h":4728)
    """GL_EXT_index_material"""
    GL_EXT_index_material = 1
    
    @bind(GLvoid, [GLenum, GLenum])
    def glIndexMaterialEXT(arg_0, arg_1): pass
    
    

if 1: # ifndef GL_EXT_index_func ("OpenGL/glext.h":4736)
    """GL_EXT_index_func"""
    GL_EXT_index_func = 1
    
    @bind(GLvoid, [GLenum, GLclampf])
    def glIndexFuncEXT(arg_0, arg_1): pass
    
    

if 1: # ifndef GL_EXT_index_array_formats ("OpenGL/glext.h":4744)
    """GL_EXT_index_array_formats"""
    GL_EXT_index_array_formats = 1

if 1: # ifndef GL_EXT_compiled_vertex_array ("OpenGL/glext.h":4748)
    """GL_EXT_compiled_vertex_array"""
    GL_EXT_compiled_vertex_array = 1
    
    @bind(GLvoid, [GLint, GLsizei])
    def glLockArraysEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [])
    def glUnlockArraysEXT(): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_EXT_cull_vertex ("OpenGL/glext.h":4758)
    """GL_EXT_cull_vertex"""
    GL_EXT_cull_vertex = 1
    
    @bind(GLvoid, [GLenum, POINTER(GLdouble)])
    def glCullParameterdvEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glCullParameterfvEXT(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SGIX_ycrcb ("OpenGL/glext.h":4768)
    """GL_SGIX_ycrcb"""
    GL_SGIX_ycrcb = 1

if 1: # ifndef GL_SGIX_fragment_lighting ("OpenGL/glext.h":4772)
    """GL_SGIX_fragment_lighting"""
    GL_SGIX_fragment_lighting = 1
    
    @bind(GLvoid, [GLenum, GLenum])
    def glFragmentColorMaterialSGIX(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLfloat])
    def glFragmentLightfSGIX(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glFragmentLightfvSGIX(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLint])
    def glFragmentLightiSGIX(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glFragmentLightivSGIX(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLfloat])
    def glFragmentLightModelfSGIX(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glFragmentLightModelfvSGIX(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLint])
    def glFragmentLightModeliSGIX(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLint)])
    def glFragmentLightModelivSGIX(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLfloat])
    def glFragmentMaterialfSGIX(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glFragmentMaterialfvSGIX(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLint])
    def glFragmentMaterialiSGIX(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glFragmentMaterialivSGIX(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glGetFragmentLightfvSGIX(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glGetFragmentLightivSGIX(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glGetFragmentMaterialfvSGIX(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glGetFragmentMaterialivSGIX(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLint])
    def glLightEnviSGIX(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_IBM_rasterpos_clip ("OpenGL/glext.h":4814)
    """GL_IBM_rasterpos_clip"""
    GL_IBM_rasterpos_clip = 1

if 1: # ifndef GL_HP_texture_lighting ("OpenGL/glext.h":4818)
    """GL_HP_texture_lighting"""
    GL_HP_texture_lighting = 1

if 1: # ifndef GL_EXT_draw_range_elements ("OpenGL/glext.h":4822)
    """GL_EXT_draw_range_elements"""
    GL_EXT_draw_range_elements = 1
    
    @bind(GLvoid, [GLenum, GLuint, GLuint, GLsizei, GLenum, POINTER(GLvoid)])
    def glDrawRangeElementsEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    

if 1: # ifndef GL_WIN_phong_shading ("OpenGL/glext.h":4830)
    """GL_WIN_phong_shading"""
    GL_WIN_phong_shading = 1

if 1: # ifndef GL_WIN_specular_fog ("OpenGL/glext.h":4834)
    """GL_WIN_specular_fog"""
    GL_WIN_specular_fog = 1

if 1: # ifndef GL_EXT_light_texture ("OpenGL/glext.h":4838)
    """GL_EXT_light_texture"""
    GL_EXT_light_texture = 1
    
    @bind(GLvoid, [GLenum])
    def glApplyTextureEXT(arg_0): pass
    
    @bind(GLvoid, [GLenum])
    def glTextureLightEXT(arg_0): pass
    
    @bind(GLvoid, [GLenum, GLenum])
    def glTextureMaterialEXT(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SGIX_blend_alpha_minmax ("OpenGL/glext.h":4850)
    """GL_SGIX_blend_alpha_minmax"""
    GL_SGIX_blend_alpha_minmax = 1

if 1: # ifndef GL_EXT_bgra ("OpenGL/glext.h":4854)
    """GL_EXT_bgra"""
    GL_EXT_bgra = 1

if 1: # ifndef GL_SGIX_async ("OpenGL/glext.h":4858)
    """GL_SGIX_async"""
    GL_SGIX_async = 1
    
    @bind(GLvoid, [GLuint])
    def glAsyncMarkerSGIX(arg_0): pass
    
    @bind(GLint, [POINTER(GLuint)])
    def glFinishAsyncSGIX(arg_0): pass
    
    @bind(GLint, [POINTER(GLuint)])
    def glPollAsyncSGIX(arg_0): pass
    
    @bind(GLuint, [GLsizei])
    def glGenAsyncMarkersSGIX(arg_0): pass
    
    @bind(GLvoid, [GLuint, GLsizei])
    def glDeleteAsyncMarkersSGIX(arg_0, arg_1): pass
    
    @bind(GLboolean, [GLuint])
    def glIsAsyncMarkerSGIX(arg_0): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SGIX_async_pixel ("OpenGL/glext.h":4876)
    """GL_SGIX_async_pixel"""
    GL_SGIX_async_pixel = 1

if 1: # ifndef GL_SGIX_async_histogram ("OpenGL/glext.h":4880)
    """GL_SGIX_async_histogram"""
    GL_SGIX_async_histogram = 1

if 1: # ifndef GL_INTEL_parallel_arrays ("OpenGL/glext.h":4884)
    """GL_INTEL_parallel_arrays"""
    GL_INTEL_parallel_arrays = 1
    
    @bind(GLvoid, [GLint, GLenum, POINTER(POINTER(GLvoid))])
    def glVertexPointervINTEL(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, POINTER(POINTER(GLvoid))])
    def glNormalPointervINTEL(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLint, GLenum, POINTER(POINTER(GLvoid))])
    def glColorPointervINTEL(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLint, GLenum, POINTER(POINTER(GLvoid))])
    def glTexCoordPointervINTEL(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_HP_occlusion_test ("OpenGL/glext.h":4898)
    """GL_HP_occlusion_test"""
    GL_HP_occlusion_test = 1

if 1: # ifndef GL_EXT_pixel_transform ("OpenGL/glext.h":4902)
    """GL_EXT_pixel_transform"""
    GL_EXT_pixel_transform = 1
    
    @bind(GLvoid, [GLenum, GLenum, GLint])
    def glPixelTransformParameteriEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLfloat])
    def glPixelTransformParameterfEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glPixelTransformParameterivEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glPixelTransformParameterfvEXT(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_EXT_pixel_transform_color_table ("OpenGL/glext.h":4916)
    """GL_EXT_pixel_transform_color_table"""
    GL_EXT_pixel_transform_color_table = 1

if 1: # ifndef GL_EXT_shared_texture_palette ("OpenGL/glext.h":4920)
    """GL_EXT_shared_texture_palette"""
    GL_EXT_shared_texture_palette = 1

if 1: # ifndef GL_EXT_separate_specular_color ("OpenGL/glext.h":4924)
    """GL_EXT_separate_specular_color"""
    GL_EXT_separate_specular_color = 1

if 1: # ifndef GL_EXT_secondary_color ("OpenGL/glext.h":4928)
    """GL_EXT_secondary_color"""
    GL_EXT_secondary_color = 1
    
    @bind(GLvoid, [GLbyte, GLbyte, GLbyte])
    def glSecondaryColor3bEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLbyte)])
    def glSecondaryColor3bvEXT(arg_0): pass
    
    @bind(GLvoid, [GLdouble, GLdouble, GLdouble])
    def glSecondaryColor3dEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLdouble)])
    def glSecondaryColor3dvEXT(arg_0): pass
    
    @bind(GLvoid, [GLfloat, GLfloat, GLfloat])
    def glSecondaryColor3fEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLfloat)])
    def glSecondaryColor3fvEXT(arg_0): pass
    
    @bind(GLvoid, [GLint, GLint, GLint])
    def glSecondaryColor3iEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLint)])
    def glSecondaryColor3ivEXT(arg_0): pass
    
    @bind(GLvoid, [GLshort, GLshort, GLshort])
    def glSecondaryColor3sEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLshort)])
    def glSecondaryColor3svEXT(arg_0): pass
    
    @bind(GLvoid, [GLubyte, GLubyte, GLubyte])
    def glSecondaryColor3ubEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLubyte)])
    def glSecondaryColor3ubvEXT(arg_0): pass
    
    @bind(GLvoid, [GLuint, GLuint, GLuint])
    def glSecondaryColor3uiEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLuint)])
    def glSecondaryColor3uivEXT(arg_0): pass
    
    @bind(GLvoid, [GLushort, GLushort, GLushort])
    def glSecondaryColor3usEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLushort)])
    def glSecondaryColor3usvEXT(arg_0): pass
    
    @bind(GLvoid, [GLint, GLenum, GLsizei, POINTER(GLvoid)])
    def glSecondaryColorPointerEXT(arg_0, arg_1, arg_2, arg_3): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_EXT_texture_perturb_normal ("OpenGL/glext.h":4968)
    """GL_EXT_texture_perturb_normal"""
    GL_EXT_texture_perturb_normal = 1
    
    @bind(GLvoid, [GLenum])
    def glTextureNormalEXT(arg_0): pass
    
    

if 1: # ifndef GL_EXT_multi_draw_arrays ("OpenGL/glext.h":4976)
    """GL_EXT_multi_draw_arrays"""
    GL_EXT_multi_draw_arrays = 1
    
    @bind(GLvoid, [GLenum, POINTER(GLint), POINTER(GLsizei), GLsizei])
    def glMultiDrawArraysEXT(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLsizei), GLenum, POINTER(POINTER(GLvoid)), GLsizei])
    def glMultiDrawElementsEXT(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_EXT_fog_coord ("OpenGL/glext.h":4986)
    """GL_EXT_fog_coord"""
    GL_EXT_fog_coord = 1
    
    @bind(GLvoid, [GLfloat])
    def glFogCoordfEXT(arg_0): pass
    
    @bind(GLvoid, [POINTER(GLfloat)])
    def glFogCoordfvEXT(arg_0): pass
    
    @bind(GLvoid, [GLdouble])
    def glFogCoorddEXT(arg_0): pass
    
    @bind(GLvoid, [POINTER(GLdouble)])
    def glFogCoorddvEXT(arg_0): pass
    
    @bind(GLvoid, [GLenum, GLsizei, POINTER(GLvoid)])
    def glFogCoordPointerEXT(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_REND_screen_coordinates ("OpenGL/glext.h":5002)
    """GL_REND_screen_coordinates"""
    GL_REND_screen_coordinates = 1

if 1: # ifndef GL_EXT_coordinate_frame ("OpenGL/glext.h":5006)
    """GL_EXT_coordinate_frame"""
    GL_EXT_coordinate_frame = 1
    
    @bind(GLvoid, [GLbyte, GLbyte, GLbyte])
    def glTangent3bEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLbyte)])
    def glTangent3bvEXT(arg_0): pass
    
    @bind(GLvoid, [GLdouble, GLdouble, GLdouble])
    def glTangent3dEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLdouble)])
    def glTangent3dvEXT(arg_0): pass
    
    @bind(GLvoid, [GLfloat, GLfloat, GLfloat])
    def glTangent3fEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLfloat)])
    def glTangent3fvEXT(arg_0): pass
    
    @bind(GLvoid, [GLint, GLint, GLint])
    def glTangent3iEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLint)])
    def glTangent3ivEXT(arg_0): pass
    
    @bind(GLvoid, [GLshort, GLshort, GLshort])
    def glTangent3sEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLshort)])
    def glTangent3svEXT(arg_0): pass
    
    @bind(GLvoid, [GLbyte, GLbyte, GLbyte])
    def glBinormal3bEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLbyte)])
    def glBinormal3bvEXT(arg_0): pass
    
    @bind(GLvoid, [GLdouble, GLdouble, GLdouble])
    def glBinormal3dEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLdouble)])
    def glBinormal3dvEXT(arg_0): pass
    
    @bind(GLvoid, [GLfloat, GLfloat, GLfloat])
    def glBinormal3fEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLfloat)])
    def glBinormal3fvEXT(arg_0): pass
    
    @bind(GLvoid, [GLint, GLint, GLint])
    def glBinormal3iEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLint)])
    def glBinormal3ivEXT(arg_0): pass
    
    @bind(GLvoid, [GLshort, GLshort, GLshort])
    def glBinormal3sEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLshort)])
    def glBinormal3svEXT(arg_0): pass
    
    @bind(GLvoid, [GLenum, GLsizei, POINTER(GLvoid)])
    def glTangentPointerEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLsizei, POINTER(GLvoid)])
    def glBinormalPointerEXT(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_EXT_texture_env_combine ("OpenGL/glext.h":5056)
    """GL_EXT_texture_env_combine"""
    GL_EXT_texture_env_combine = 1

if 1: # ifndef GL_APPLE_specular_vector ("OpenGL/glext.h":5060)
    """GL_APPLE_specular_vector"""
    GL_APPLE_specular_vector = 1

if 1: # ifndef GL_APPLE_transform_hint ("OpenGL/glext.h":5064)
    """GL_APPLE_transform_hint"""
    GL_APPLE_transform_hint = 1

if 1: # ifndef GL_SGIX_fog_scale ("OpenGL/glext.h":5068)
    """GL_SGIX_fog_scale"""
    GL_SGIX_fog_scale = 1

if 1: # ifndef GL_SUNX_constant_data ("OpenGL/glext.h":5072)
    """GL_SUNX_constant_data"""
    GL_SUNX_constant_data = 1
    
    @bind(GLvoid, [])
    def glFinishTextureSUNX(): pass
    
    

if 1: # ifndef GL_SUN_global_alpha ("OpenGL/glext.h":5080)
    """GL_SUN_global_alpha"""
    GL_SUN_global_alpha = 1
    
    @bind(GLvoid, [GLbyte])
    def glGlobalAlphaFactorbSUN(arg_0): pass
    
    @bind(GLvoid, [GLshort])
    def glGlobalAlphaFactorsSUN(arg_0): pass
    
    @bind(GLvoid, [GLint])
    def glGlobalAlphaFactoriSUN(arg_0): pass
    
    @bind(GLvoid, [GLfloat])
    def glGlobalAlphaFactorfSUN(arg_0): pass
    
    @bind(GLvoid, [GLdouble])
    def glGlobalAlphaFactordSUN(arg_0): pass
    
    @bind(GLvoid, [GLubyte])
    def glGlobalAlphaFactorubSUN(arg_0): pass
    
    @bind(GLvoid, [GLushort])
    def glGlobalAlphaFactorusSUN(arg_0): pass
    
    @bind(GLvoid, [GLuint])
    def glGlobalAlphaFactoruiSUN(arg_0): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SUN_triangle_list ("OpenGL/glext.h":5102)
    """GL_SUN_triangle_list"""
    GL_SUN_triangle_list = 1
    
    @bind(GLvoid, [GLuint])
    def glReplacementCodeuiSUN(arg_0): pass
    
    @bind(GLvoid, [GLushort])
    def glReplacementCodeusSUN(arg_0): pass
    
    @bind(GLvoid, [GLubyte])
    def glReplacementCodeubSUN(arg_0): pass
    
    @bind(GLvoid, [POINTER(GLuint)])
    def glReplacementCodeuivSUN(arg_0): pass
    
    @bind(GLvoid, [POINTER(GLushort)])
    def glReplacementCodeusvSUN(arg_0): pass
    
    @bind(GLvoid, [POINTER(GLubyte)])
    def glReplacementCodeubvSUN(arg_0): pass
    
    @bind(GLvoid, [GLenum, GLsizei, POINTER(POINTER(GLvoid))])
    def glReplacementCodePointerSUN(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SUN_vertex ("OpenGL/glext.h":5122)
    """GL_SUN_vertex"""
    GL_SUN_vertex = 1
    
    @bind(GLvoid, [GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat])
    def glColor4ubVertex2fSUN(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [POINTER(GLubyte), POINTER(GLfloat)])
    def glColor4ubVertex2fvSUN(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat])
    def glColor4ubVertex3fSUN(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6): pass
    
    @bind(GLvoid, [POINTER(GLubyte), POINTER(GLfloat)])
    def glColor4ubVertex3fvSUN(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat])
    def glColor3fVertex3fSUN(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [POINTER(GLfloat), POINTER(GLfloat)])
    def glColor3fVertex3fvSUN(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat])
    def glNormal3fVertex3fSUN(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [POINTER(GLfloat), POINTER(GLfloat)])
    def glNormal3fVertex3fvSUN(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat])
    def glColor4fNormal3fVertex3fSUN(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8, arg_9): pass
    
    @bind(GLvoid, [POINTER(GLfloat), POINTER(GLfloat), POINTER(GLfloat)])
    def glColor4fNormal3fVertex3fvSUN(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLfloat, GLfloat, GLfloat, GLfloat, GLfloat])
    def glTexCoord2fVertex3fSUN(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [POINTER(GLfloat), POINTER(GLfloat)])
    def glTexCoord2fVertex3fvSUN(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat])
    def glTexCoord4fVertex4fSUN(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7): pass
    
    @bind(GLvoid, [POINTER(GLfloat), POINTER(GLfloat)])
    def glTexCoord4fVertex4fvSUN(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat])
    def glTexCoord2fColor4ubVertex3fSUN(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8): pass
    
    @bind(GLvoid, [POINTER(GLfloat), POINTER(GLubyte), POINTER(GLfloat)])
    def glTexCoord2fColor4ubVertex3fvSUN(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat])
    def glTexCoord2fColor3fVertex3fSUN(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7): pass
    
    @bind(GLvoid, [POINTER(GLfloat), POINTER(GLfloat), POINTER(GLfloat)])
    def glTexCoord2fColor3fVertex3fvSUN(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat])
    def glTexCoord2fNormal3fVertex3fSUN(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7): pass
    
    @bind(GLvoid, [POINTER(GLfloat), POINTER(GLfloat), POINTER(GLfloat)])
    def glTexCoord2fNormal3fVertex3fvSUN(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat])
    def glTexCoord2fColor4fNormal3fVertex3fSUN(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8, arg_9, arg_10, arg_11): pass
    
    @bind(GLvoid, [POINTER(GLfloat), POINTER(GLfloat), POINTER(GLfloat), POINTER(GLfloat)])
    def glTexCoord2fColor4fNormal3fVertex3fvSUN(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat])
    def glTexCoord4fColor4fNormal3fVertex4fSUN(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8, arg_9, arg_10, arg_11, arg_12, arg_13, arg_14): pass
    
    @bind(GLvoid, [POINTER(GLfloat), POINTER(GLfloat), POINTER(GLfloat), POINTER(GLfloat)])
    def glTexCoord4fColor4fNormal3fVertex4fvSUN(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLuint, GLfloat, GLfloat, GLfloat])
    def glReplacementCodeuiVertex3fSUN(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [POINTER(GLuint), POINTER(GLfloat)])
    def glReplacementCodeuiVertex3fvSUN(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat])
    def glReplacementCodeuiColor4ubVertex3fSUN(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7): pass
    
    @bind(GLvoid, [POINTER(GLuint), POINTER(GLubyte), POINTER(GLfloat)])
    def glReplacementCodeuiColor4ubVertex3fvSUN(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat])
    def glReplacementCodeuiColor3fVertex3fSUN(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6): pass
    
    @bind(GLvoid, [POINTER(GLuint), POINTER(GLfloat), POINTER(GLfloat)])
    def glReplacementCodeuiColor3fVertex3fvSUN(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat])
    def glReplacementCodeuiNormal3fVertex3fSUN(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6): pass
    
    @bind(GLvoid, [POINTER(GLuint), POINTER(GLfloat), POINTER(GLfloat)])
    def glReplacementCodeuiNormal3fVertex3fvSUN(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat])
    def glReplacementCodeuiColor4fNormal3fVertex3fSUN(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8, arg_9, arg_10): pass
    
    @bind(GLvoid, [POINTER(GLuint), POINTER(GLfloat), POINTER(GLfloat), POINTER(GLfloat)])
    def glReplacementCodeuiColor4fNormal3fVertex3fvSUN(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat])
    def glReplacementCodeuiTexCoord2fVertex3fSUN(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [POINTER(GLuint), POINTER(GLfloat), POINTER(GLfloat)])
    def glReplacementCodeuiTexCoord2fVertex3fvSUN(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat])
    def glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8): pass
    
    @bind(GLvoid, [POINTER(GLuint), POINTER(GLfloat), POINTER(GLfloat), POINTER(GLfloat)])
    def glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat])
    def glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8, arg_9, arg_10, arg_11, arg_12): pass
    
    @bind(GLvoid, [POINTER(GLuint), POINTER(GLfloat), POINTER(GLfloat), POINTER(GLfloat), POINTER(GLfloat)])
    def glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_EXT_blend_func_separate ("OpenGL/glext.h":5208)
    """GL_EXT_blend_func_separate"""
    GL_EXT_blend_func_separate = 1
    
    @bind(GLvoid, [GLenum, GLenum, GLenum, GLenum])
    def glBlendFuncSeparateEXT(arg_0, arg_1, arg_2, arg_3): pass
    
    

if 1: # ifndef GL_INGR_blend_func_separate ("OpenGL/glext.h":5216)
    """GL_INGR_blend_func_separate"""
    GL_INGR_blend_func_separate = 1
    
    @bind(GLvoid, [GLenum, GLenum, GLenum, GLenum])
    def glBlendFuncSeparateINGR(arg_0, arg_1, arg_2, arg_3): pass
    
    

if 1: # ifndef GL_INGR_color_clamp ("OpenGL/glext.h":5224)
    """GL_INGR_color_clamp"""
    GL_INGR_color_clamp = 1

if 1: # ifndef GL_INGR_interlace_read ("OpenGL/glext.h":5228)
    """GL_INGR_interlace_read"""
    GL_INGR_interlace_read = 1

if 1: # ifndef GL_EXT_stencil_wrap ("OpenGL/glext.h":5232)
    """GL_EXT_stencil_wrap"""
    GL_EXT_stencil_wrap = 1

if 1: # ifndef GL_EXT_422_pixels ("OpenGL/glext.h":5236)
    """GL_EXT_422_pixels"""
    GL_EXT_422_pixels = 1

if 1: # ifndef GL_NV_texgen_reflection ("OpenGL/glext.h":5240)
    """GL_NV_texgen_reflection"""
    GL_NV_texgen_reflection = 1

if 1: # ifndef GL_SUN_convolution_border_modes ("OpenGL/glext.h":5244)
    """GL_SUN_convolution_border_modes"""
    GL_SUN_convolution_border_modes = 1

if 1: # ifndef GL_EXT_texture_env_add ("OpenGL/glext.h":5248)
    """GL_EXT_texture_env_add"""
    GL_EXT_texture_env_add = 1

if 1: # ifndef GL_EXT_texture_lod_bias ("OpenGL/glext.h":5252)
    """GL_EXT_texture_lod_bias"""
    GL_EXT_texture_lod_bias = 1

if 1: # ifndef GL_EXT_texture_filter_anisotropic ("OpenGL/glext.h":5256)
    """GL_EXT_texture_filter_anisotropic"""
    GL_EXT_texture_filter_anisotropic = 1

if 1: # ifndef GL_EXT_vertex_weighting ("OpenGL/glext.h":5260)
    """GL_EXT_vertex_weighting"""
    GL_EXT_vertex_weighting = 1
    
    @bind(GLvoid, [GLfloat])
    def glVertexWeightfEXT(arg_0): pass
    
    @bind(GLvoid, [POINTER(GLfloat)])
    def glVertexWeightfvEXT(arg_0): pass
    
    @bind(GLvoid, [GLsizei, GLenum, GLsizei, POINTER(GLvoid)])
    def glVertexWeightPointerEXT(arg_0, arg_1, arg_2, arg_3): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_NV_light_max_exponent ("OpenGL/glext.h":5272)
    """GL_NV_light_max_exponent"""
    GL_NV_light_max_exponent = 1

if 1: # ifndef GL_NV_vertex_array_range ("OpenGL/glext.h":5276)
    """GL_NV_vertex_array_range"""
    GL_NV_vertex_array_range = 1
    
    @bind(GLvoid, [])
    def glFlushVertexArrayRangeNV(): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLvoid)])
    def glVertexArrayRangeNV(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_NV_register_combiners ("OpenGL/glext.h":5286)
    """GL_NV_register_combiners"""
    GL_NV_register_combiners = 1
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glCombinerParameterfvNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLfloat])
    def glCombinerParameterfNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLint)])
    def glCombinerParameterivNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLint])
    def glCombinerParameteriNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLenum, GLenum, GLenum, GLenum])
    def glCombinerInputNV(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean])
    def glCombinerOutputNV(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8, arg_9): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLenum, GLenum])
    def glFinalCombinerInputNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLenum, GLenum, POINTER(GLfloat)])
    def glGetCombinerInputParameterfvNV(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLenum, GLenum, POINTER(GLint)])
    def glGetCombinerInputParameterivNV(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLenum, POINTER(GLfloat)])
    def glGetCombinerOutputParameterfvNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLenum, POINTER(GLint)])
    def glGetCombinerOutputParameterivNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glGetFinalCombinerInputParameterfvNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glGetFinalCombinerInputParameterivNV(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_NV_fog_distance ("OpenGL/glext.h":5318)
    """GL_NV_fog_distance"""
    GL_NV_fog_distance = 1

if 1: # ifndef GL_NV_texgen_emboss ("OpenGL/glext.h":5322)
    """GL_NV_texgen_emboss"""
    GL_NV_texgen_emboss = 1

if 1: # ifndef GL_NV_blend_square ("OpenGL/glext.h":5326)
    """GL_NV_blend_square"""
    GL_NV_blend_square = 1

if 1: # ifndef GL_NV_texture_env_combine4 ("OpenGL/glext.h":5330)
    """GL_NV_texture_env_combine4"""
    GL_NV_texture_env_combine4 = 1

if 1: # ifndef GL_MESA_resize_buffers ("OpenGL/glext.h":5334)
    """GL_MESA_resize_buffers"""
    GL_MESA_resize_buffers = 1
    
    @bind(GLvoid, [])
    def glResizeBuffersMESA(): pass
    
    

if 1: # ifndef GL_MESA_window_pos ("OpenGL/glext.h":5342)
    """GL_MESA_window_pos"""
    GL_MESA_window_pos = 1
    
    @bind(GLvoid, [GLdouble, GLdouble])
    def glWindowPos2dMESA(arg_0, arg_1): pass
    
    @bind(GLvoid, [POINTER(GLdouble)])
    def glWindowPos2dvMESA(arg_0): pass
    
    @bind(GLvoid, [GLfloat, GLfloat])
    def glWindowPos2fMESA(arg_0, arg_1): pass
    
    @bind(GLvoid, [POINTER(GLfloat)])
    def glWindowPos2fvMESA(arg_0): pass
    
    @bind(GLvoid, [GLint, GLint])
    def glWindowPos2iMESA(arg_0, arg_1): pass
    
    @bind(GLvoid, [POINTER(GLint)])
    def glWindowPos2ivMESA(arg_0): pass
    
    @bind(GLvoid, [GLshort, GLshort])
    def glWindowPos2sMESA(arg_0, arg_1): pass
    
    @bind(GLvoid, [POINTER(GLshort)])
    def glWindowPos2svMESA(arg_0): pass
    
    @bind(GLvoid, [GLdouble, GLdouble, GLdouble])
    def glWindowPos3dMESA(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLdouble)])
    def glWindowPos3dvMESA(arg_0): pass
    
    @bind(GLvoid, [GLfloat, GLfloat, GLfloat])
    def glWindowPos3fMESA(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLfloat)])
    def glWindowPos3fvMESA(arg_0): pass
    
    @bind(GLvoid, [GLint, GLint, GLint])
    def glWindowPos3iMESA(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLint)])
    def glWindowPos3ivMESA(arg_0): pass
    
    @bind(GLvoid, [GLshort, GLshort, GLshort])
    def glWindowPos3sMESA(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLshort)])
    def glWindowPos3svMESA(arg_0): pass
    
    @bind(GLvoid, [GLdouble, GLdouble, GLdouble, GLdouble])
    def glWindowPos4dMESA(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [POINTER(GLdouble)])
    def glWindowPos4dvMESA(arg_0): pass
    
    @bind(GLvoid, [GLfloat, GLfloat, GLfloat, GLfloat])
    def glWindowPos4fMESA(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [POINTER(GLfloat)])
    def glWindowPos4fvMESA(arg_0): pass
    
    @bind(GLvoid, [GLint, GLint, GLint, GLint])
    def glWindowPos4iMESA(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [POINTER(GLint)])
    def glWindowPos4ivMESA(arg_0): pass
    
    @bind(GLvoid, [GLshort, GLshort, GLshort, GLshort])
    def glWindowPos4sMESA(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [POINTER(GLshort)])
    def glWindowPos4svMESA(arg_0): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_IBM_cull_vertex ("OpenGL/glext.h":5396)
    """GL_IBM_cull_vertex"""
    GL_IBM_cull_vertex = 1

if 1: # ifndef GL_IBM_multimode_draw_arrays ("OpenGL/glext.h":5400)
    """GL_IBM_multimode_draw_arrays"""
    GL_IBM_multimode_draw_arrays = 1
    
    @bind(GLvoid, [POINTER(GLenum), POINTER(GLint), POINTER(GLsizei), GLsizei, GLint])
    def glMultiModeDrawArraysIBM(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [POINTER(GLenum), POINTER(GLsizei), GLenum, POINTER(POINTER(GLvoid)), GLsizei, GLint])
    def glMultiModeDrawElementsIBM(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_IBM_vertex_array_lists ("OpenGL/glext.h":5410)
    """GL_IBM_vertex_array_lists"""
    GL_IBM_vertex_array_lists = 1
    
    @bind(GLvoid, [GLint, GLenum, GLint, POINTER(POINTER(GLvoid)), GLint])
    def glColorPointerListIBM(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLint, GLenum, GLint, POINTER(POINTER(GLvoid)), GLint])
    def glSecondaryColorPointerListIBM(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLint, POINTER(POINTER(GLboolean)), GLint])
    def glEdgeFlagPointerListIBM(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLint, POINTER(POINTER(GLvoid)), GLint])
    def glFogCoordPointerListIBM(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLint, POINTER(POINTER(GLvoid)), GLint])
    def glIndexPointerListIBM(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLint, POINTER(POINTER(GLvoid)), GLint])
    def glNormalPointerListIBM(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLint, GLenum, GLint, POINTER(POINTER(GLvoid)), GLint])
    def glTexCoordPointerListIBM(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLint, GLenum, GLint, POINTER(POINTER(GLvoid)), GLint])
    def glVertexPointerListIBM(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SGIX_subsample ("OpenGL/glext.h":5432)
    """GL_SGIX_subsample"""
    GL_SGIX_subsample = 1

if 1: # ifndef GL_SGIX_ycrcba ("OpenGL/glext.h":5436)
    """GL_SGIX_ycrcba"""
    GL_SGIX_ycrcba = 1

if 1: # ifndef GL_SGIX_ycrcb_subsample ("OpenGL/glext.h":5440)
    """GL_SGIX_ycrcb_subsample"""
    GL_SGIX_ycrcb_subsample = 1

if 1: # ifndef GL_SGIX_depth_pass_instrument ("OpenGL/glext.h":5444)
    """GL_SGIX_depth_pass_instrument"""
    GL_SGIX_depth_pass_instrument = 1

if 1: # ifndef GL_3DFX_texture_compression_FXT1 ("OpenGL/glext.h":5448)
    """GL_3DFX_texture_compression_FXT1"""
    GL_3DFX_texture_compression_FXT1 = 1

if 1: # ifndef GL_3DFX_multisample ("OpenGL/glext.h":5452)
    """GL_3DFX_multisample"""
    GL_3DFX_multisample = 1

if 1: # ifndef GL_3DFX_tbuffer ("OpenGL/glext.h":5456)
    """GL_3DFX_tbuffer"""
    GL_3DFX_tbuffer = 1
    
    @bind(GLvoid, [GLuint])
    def glTbufferMask3DFX(arg_0): pass
    
    

if 1: # ifndef GL_EXT_multisample ("OpenGL/glext.h":5464)
    """GL_EXT_multisample"""
    GL_EXT_multisample = 1
    
    @bind(GLvoid, [GLclampf, GLboolean])
    def glSampleMaskEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum])
    def glSamplePatternEXT(arg_0): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SGIX_vertex_preclip ("OpenGL/glext.h":5474)
    """GL_SGIX_vertex_preclip"""
    GL_SGIX_vertex_preclip = 1

if 1: # ifndef GL_SGIX_convolution_accuracy ("OpenGL/glext.h":5478)
    """GL_SGIX_convolution_accuracy"""
    GL_SGIX_convolution_accuracy = 1

if 1: # ifndef GL_SGIX_resample ("OpenGL/glext.h":5482)
    """GL_SGIX_resample"""
    GL_SGIX_resample = 1

if 1: # ifndef GL_SGIS_point_line_texgen ("OpenGL/glext.h":5486)
    """GL_SGIS_point_line_texgen"""
    GL_SGIS_point_line_texgen = 1

if 1: # ifndef GL_SGIS_texture_color_mask ("OpenGL/glext.h":5490)
    """GL_SGIS_texture_color_mask"""
    GL_SGIS_texture_color_mask = 1
    
    @bind(GLvoid, [GLboolean, GLboolean, GLboolean, GLboolean])
    def glTextureColorMaskSGIS(arg_0, arg_1, arg_2, arg_3): pass
    
    

if 1: # ifndef GL_SGIX_igloo_interface ("OpenGL/glext.h":5498)
    """GL_SGIX_igloo_interface"""
    GL_SGIX_igloo_interface = 1
    
    @bind(GLvoid, [GLenum, POINTER(GLvoid)])
    def glIglooInterfaceSGIX(arg_0, arg_1): pass
    
    

if 1: # ifndef GL_EXT_texture_env_dot3 ("OpenGL/glext.h":5506)
    """GL_EXT_texture_env_dot3"""
    GL_EXT_texture_env_dot3 = 1

if 1: # ifndef GL_ATI_texture_mirror_once ("OpenGL/glext.h":5510)
    """GL_ATI_texture_mirror_once"""
    GL_ATI_texture_mirror_once = 1

if 1: # ifndef GL_NV_fence ("OpenGL/glext.h":5514)
    """GL_NV_fence"""
    GL_NV_fence = 1
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glDeleteFencesNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glGenFencesNV(arg_0, arg_1): pass
    
    @bind(GLboolean, [GLuint])
    def glIsFenceNV(arg_0): pass
    
    @bind(GLboolean, [GLuint])
    def glTestFenceNV(arg_0): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLint)])
    def glGetFenceivNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint])
    def glFinishFenceNV(arg_0): pass
    
    @bind(GLvoid, [GLuint, GLenum])
    def glSetFenceNV(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_NV_evaluators ("OpenGL/glext.h":5534)
    """GL_NV_evaluators"""
    GL_NV_evaluators = 1
    
    @bind(GLvoid, [GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, POINTER(GLvoid)])
    def glMapControlPointsNV(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glMapParameterivNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glMapParameterfvNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, POINTER(GLvoid)])
    def glGetMapControlPointsNV(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glGetMapParameterivNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glGetMapParameterfvNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLenum, POINTER(GLint)])
    def glGetMapAttribParameterivNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLenum, POINTER(GLfloat)])
    def glGetMapAttribParameterfvNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLenum])
    def glEvalMapsNV(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_NV_packed_depth_stencil ("OpenGL/glext.h":5558)
    """GL_NV_packed_depth_stencil"""
    GL_NV_packed_depth_stencil = 1

if 1: # ifndef GL_NV_register_combiners2 ("OpenGL/glext.h":5562)
    """GL_NV_register_combiners2"""
    GL_NV_register_combiners2 = 1
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glCombinerStageParameterfvNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glGetCombinerStageParameterfvNV(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_NV_texture_compression_vtc ("OpenGL/glext.h":5572)
    """GL_NV_texture_compression_vtc"""
    GL_NV_texture_compression_vtc = 1

if 1: # ifndef GL_NV_texture_rectangle ("OpenGL/glext.h":5576)
    """GL_NV_texture_rectangle"""
    GL_NV_texture_rectangle = 1

if 1: # ifndef GL_NV_texture_shader ("OpenGL/glext.h":5580)
    """GL_NV_texture_shader"""
    GL_NV_texture_shader = 1

if 1: # ifndef GL_NV_texture_shader2 ("OpenGL/glext.h":5584)
    """GL_NV_texture_shader2"""
    GL_NV_texture_shader2 = 1

if 1: # ifndef GL_NV_vertex_array_range2 ("OpenGL/glext.h":5588)
    """GL_NV_vertex_array_range2"""
    GL_NV_vertex_array_range2 = 1

if 1: # ifndef GL_NV_vertex_program ("OpenGL/glext.h":5592)
    """GL_NV_vertex_program"""
    GL_NV_vertex_program = 1
    
    @bind(GLboolean, [GLsizei, POINTER(GLuint), POINTER(GLboolean)])
    def glAreProgramsResidentNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLuint])
    def glBindProgramNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glDeleteProgramsNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLuint, POINTER(GLfloat)])
    def glExecuteProgramNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glGenProgramsNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLenum, POINTER(GLdouble)])
    def glGetProgramParameterdvNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLenum, POINTER(GLfloat)])
    def glGetProgramParameterfvNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLint)])
    def glGetProgramivNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLubyte)])
    def glGetProgramStringNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLenum, POINTER(GLint)])
    def glGetTrackMatrixivNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLdouble)])
    def glGetVertexAttribdvNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLfloat)])
    def glGetVertexAttribfvNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLint)])
    def glGetVertexAttribivNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(POINTER(GLvoid))])
    def glGetVertexAttribPointervNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLboolean, [GLuint])
    def glIsProgramNV(arg_0): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLsizei, POINTER(GLubyte)])
    def glLoadProgramNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble])
    def glProgramParameter4dNV(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLenum, GLuint, POINTER(GLdouble)])
    def glProgramParameter4dvNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat])
    def glProgramParameter4fNV(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLenum, GLuint, POINTER(GLfloat)])
    def glProgramParameter4fvNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLuint, POINTER(GLdouble)])
    def glProgramParameters4dvNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLuint, POINTER(GLfloat)])
    def glProgramParameters4fvNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glRequestResidentProgramsNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLenum, GLenum])
    def glTrackMatrixNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLuint, GLint, GLenum, GLsizei, POINTER(GLvoid)])
    def glVertexAttribPointerNV(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLuint, GLdouble])
    def glVertexAttrib1dNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLdouble)])
    def glVertexAttrib1dvNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLfloat])
    def glVertexAttrib1fNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLfloat)])
    def glVertexAttrib1fvNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLshort])
    def glVertexAttrib1sNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLshort)])
    def glVertexAttrib1svNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLdouble, GLdouble])
    def glVertexAttrib2dNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLdouble)])
    def glVertexAttrib2dvNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLfloat, GLfloat])
    def glVertexAttrib2fNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLfloat)])
    def glVertexAttrib2fvNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLshort, GLshort])
    def glVertexAttrib2sNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLshort)])
    def glVertexAttrib2svNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLdouble, GLdouble, GLdouble])
    def glVertexAttrib3dNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLdouble)])
    def glVertexAttrib3dvNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLfloat, GLfloat, GLfloat])
    def glVertexAttrib3fNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLfloat)])
    def glVertexAttrib3fvNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLshort, GLshort, GLshort])
    def glVertexAttrib3sNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLshort)])
    def glVertexAttrib3svNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLdouble, GLdouble, GLdouble, GLdouble])
    def glVertexAttrib4dNV(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLdouble)])
    def glVertexAttrib4dvNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLfloat, GLfloat, GLfloat, GLfloat])
    def glVertexAttrib4fNV(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLfloat)])
    def glVertexAttrib4fvNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLshort, GLshort, GLshort, GLshort])
    def glVertexAttrib4sNV(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLshort)])
    def glVertexAttrib4svNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLubyte, GLubyte, GLubyte, GLubyte])
    def glVertexAttrib4ubNV(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLubyte)])
    def glVertexAttrib4ubvNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLdouble)])
    def glVertexAttribs1dvNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLfloat)])
    def glVertexAttribs1fvNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLshort)])
    def glVertexAttribs1svNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLdouble)])
    def glVertexAttribs2dvNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLfloat)])
    def glVertexAttribs2fvNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLshort)])
    def glVertexAttribs2svNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLdouble)])
    def glVertexAttribs3dvNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLfloat)])
    def glVertexAttribs3fvNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLshort)])
    def glVertexAttribs3svNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLdouble)])
    def glVertexAttribs4dvNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLfloat)])
    def glVertexAttribs4fvNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLshort)])
    def glVertexAttribs4svNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLubyte)])
    def glVertexAttribs4ubvNV(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SGIX_texture_coordinate_clamp ("OpenGL/glext.h":5726)
    """GL_SGIX_texture_coordinate_clamp"""
    GL_SGIX_texture_coordinate_clamp = 1

if 1: # ifndef GL_SGIX_scalebias_hint ("OpenGL/glext.h":5730)
    """GL_SGIX_scalebias_hint"""
    GL_SGIX_scalebias_hint = 1

if 1: # ifndef GL_OML_interlace ("OpenGL/glext.h":5734)
    """GL_OML_interlace"""
    GL_OML_interlace = 1

if 1: # ifndef GL_OML_subsample ("OpenGL/glext.h":5738)
    """GL_OML_subsample"""
    GL_OML_subsample = 1

if 1: # ifndef GL_OML_resample ("OpenGL/glext.h":5742)
    """GL_OML_resample"""
    GL_OML_resample = 1

if 1: # ifndef GL_NV_copy_depth_to_color ("OpenGL/glext.h":5746)
    """GL_NV_copy_depth_to_color"""
    GL_NV_copy_depth_to_color = 1

if 1: # ifndef GL_ATI_envmap_bumpmap ("OpenGL/glext.h":5750)
    """GL_ATI_envmap_bumpmap"""
    GL_ATI_envmap_bumpmap = 1
    
    @bind(GLvoid, [GLenum, POINTER(GLint)])
    def glTexBumpParameterivATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glTexBumpParameterfvATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLint)])
    def glGetTexBumpParameterivATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glGetTexBumpParameterfvATI(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ATI_fragment_shader ("OpenGL/glext.h":5764)
    """GL_ATI_fragment_shader"""
    GL_ATI_fragment_shader = 1
    
    @bind(GLuint, [GLuint])
    def glGenFragmentShadersATI(arg_0): pass
    
    @bind(GLvoid, [GLuint])
    def glBindFragmentShaderATI(arg_0): pass
    
    @bind(GLvoid, [GLuint])
    def glDeleteFragmentShaderATI(arg_0): pass
    
    @bind(GLvoid, [])
    def glBeginFragmentShaderATI(): pass
    
    @bind(GLvoid, [])
    def glEndFragmentShaderATI(): pass
    
    @bind(GLvoid, [GLuint, GLuint, GLenum])
    def glPassTexCoordATI(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLuint, GLenum])
    def glSampleMapATI(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint])
    def glColorFragmentOp1ATI(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint])
    def glColorFragmentOp2ATI(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8, arg_9): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint])
    def glColorFragmentOp3ATI(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8, arg_9, arg_10, arg_11, arg_12): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLuint, GLuint, GLuint, GLuint])
    def glAlphaFragmentOp1ATI(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint])
    def glAlphaFragmentOp2ATI(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint])
    def glAlphaFragmentOp3ATI(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6, arg_7, arg_8, arg_9, arg_10, arg_11): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLfloat)])
    def glSetFragmentShaderConstantATI(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ATI_pn_triangles ("OpenGL/glext.h":5798)
    """GL_ATI_pn_triangles"""
    GL_ATI_pn_triangles = 1
    
    @bind(GLvoid, [GLenum, GLint])
    def glPNTrianglesiATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLfloat])
    def glPNTrianglesfATI(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ATI_vertex_array_object ("OpenGL/glext.h":5808)
    """GL_ATI_vertex_array_object"""
    GL_ATI_vertex_array_object = 1
    
    @bind(GLuint, [GLsizei, POINTER(GLvoid), GLenum])
    def glNewObjectBufferATI(arg_0, arg_1, arg_2): pass
    
    @bind(GLboolean, [GLuint])
    def glIsObjectBufferATI(arg_0): pass
    
    @bind(GLvoid, [GLuint, GLuint, GLsizei, POINTER(GLvoid), GLenum])
    def glUpdateObjectBufferATI(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLfloat)])
    def glGetObjectBufferfvATI(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLint)])
    def glGetObjectBufferivATI(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint])
    def glFreeObjectBufferATI(arg_0): pass
    
    @bind(GLvoid, [GLenum, GLint, GLenum, GLsizei, GLuint, GLuint])
    def glArrayObjectATI(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLfloat)])
    def glGetArrayObjectfvATI(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glGetArrayObjectivATI(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, GLsizei, GLuint, GLuint])
    def glVariantArrayObjectATI(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLfloat)])
    def glGetVariantArrayObjectfvATI(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLint)])
    def glGetVariantArrayObjectivATI(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_EXT_vertex_shader ("OpenGL/glext.h":5838)
    """GL_EXT_vertex_shader"""
    GL_EXT_vertex_shader = 1
    
    @bind(GLvoid, [])
    def glBeginVertexShaderEXT(): pass
    
    @bind(GLvoid, [])
    def glEndVertexShaderEXT(): pass
    
    @bind(GLvoid, [GLuint])
    def glBindVertexShaderEXT(arg_0): pass
    
    @bind(GLuint, [GLuint])
    def glGenVertexShadersEXT(arg_0): pass
    
    @bind(GLvoid, [GLuint])
    def glDeleteVertexShaderEXT(arg_0): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLuint])
    def glShaderOp1EXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLuint, GLuint])
    def glShaderOp2EXT(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLuint, GLuint, GLuint])
    def glShaderOp3EXT(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLuint, GLuint, GLenum, GLenum, GLenum, GLenum])
    def glSwizzleEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLuint, GLuint, GLenum, GLenum, GLenum, GLenum])
    def glWriteMaskEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLuint, GLuint, GLuint])
    def glInsertComponentEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLuint, GLuint])
    def glExtractComponentEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLuint, [GLenum, GLenum, GLenum, GLuint])
    def glGenSymbolsEXT(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLvoid)])
    def glSetInvariantEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLvoid)])
    def glSetLocalConstantEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLbyte)])
    def glVariantbvEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLshort)])
    def glVariantsvEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLint)])
    def glVariantivEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLfloat)])
    def glVariantfvEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLdouble)])
    def glVariantdvEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLubyte)])
    def glVariantubvEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLushort)])
    def glVariantusvEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLuint)])
    def glVariantuivEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLenum, GLuint, POINTER(GLvoid)])
    def glVariantPointerEXT(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLuint])
    def glEnableVariantClientStateEXT(arg_0): pass
    
    @bind(GLvoid, [GLuint])
    def glDisableVariantClientStateEXT(arg_0): pass
    
    @bind(GLuint, [GLenum, GLenum])
    def glBindLightParameterEXT(arg_0, arg_1): pass
    
    @bind(GLuint, [GLenum, GLenum])
    def glBindMaterialParameterEXT(arg_0, arg_1): pass
    
    @bind(GLuint, [GLenum, GLenum, GLenum])
    def glBindTexGenParameterEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLuint, [GLenum, GLenum])
    def glBindTextureUnitParameterEXT(arg_0, arg_1): pass
    
    @bind(GLuint, [GLenum])
    def glBindParameterEXT(arg_0): pass
    
    @bind(GLboolean, [GLuint, GLenum])
    def glIsVariantEnabledEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLboolean)])
    def glGetVariantBooleanvEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLint)])
    def glGetVariantIntegervEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLfloat)])
    def glGetVariantFloatvEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(POINTER(GLvoid))])
    def glGetVariantPointervEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLboolean)])
    def glGetInvariantBooleanvEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLint)])
    def glGetInvariantIntegervEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLfloat)])
    def glGetInvariantFloatvEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLboolean)])
    def glGetLocalConstantBooleanvEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLint)])
    def glGetLocalConstantIntegervEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLfloat)])
    def glGetLocalConstantFloatvEXT(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ATI_vertex_streams ("OpenGL/glext.h":5928)
    """GL_ATI_vertex_streams"""
    GL_ATI_vertex_streams = 1
    
    @bind(GLvoid, [GLenum, GLshort])
    def glVertexStream1sATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLshort)])
    def glVertexStream1svATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLint])
    def glVertexStream1iATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLint)])
    def glVertexStream1ivATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLfloat])
    def glVertexStream1fATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glVertexStream1fvATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLdouble])
    def glVertexStream1dATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLdouble)])
    def glVertexStream1dvATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLshort, GLshort])
    def glVertexStream2sATI(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLshort)])
    def glVertexStream2svATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLint, GLint])
    def glVertexStream2iATI(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLint)])
    def glVertexStream2ivATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLfloat, GLfloat])
    def glVertexStream2fATI(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glVertexStream2fvATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLdouble, GLdouble])
    def glVertexStream2dATI(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLdouble)])
    def glVertexStream2dvATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLshort, GLshort, GLshort])
    def glVertexStream3sATI(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLshort)])
    def glVertexStream3svATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLint, GLint, GLint])
    def glVertexStream3iATI(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLint)])
    def glVertexStream3ivATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLfloat, GLfloat, GLfloat])
    def glVertexStream3fATI(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glVertexStream3fvATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLdouble, GLdouble, GLdouble])
    def glVertexStream3dATI(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLdouble)])
    def glVertexStream3dvATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLshort, GLshort, GLshort, GLshort])
    def glVertexStream4sATI(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLshort)])
    def glVertexStream4svATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLint, GLint, GLint, GLint])
    def glVertexStream4iATI(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLint)])
    def glVertexStream4ivATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLfloat, GLfloat, GLfloat, GLfloat])
    def glVertexStream4fATI(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glVertexStream4fvATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLdouble, GLdouble, GLdouble, GLdouble])
    def glVertexStream4dATI(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLdouble)])
    def glVertexStream4dvATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLbyte, GLbyte, GLbyte])
    def glNormalStream3bATI(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLbyte)])
    def glNormalStream3bvATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLshort, GLshort, GLshort])
    def glNormalStream3sATI(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLshort)])
    def glNormalStream3svATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLint, GLint, GLint])
    def glNormalStream3iATI(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLint)])
    def glNormalStream3ivATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLfloat, GLfloat, GLfloat])
    def glNormalStream3fATI(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLfloat)])
    def glNormalStream3fvATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLdouble, GLdouble, GLdouble])
    def glNormalStream3dATI(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLdouble)])
    def glNormalStream3dvATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum])
    def glClientActiveVertexStreamATI(arg_0): pass
    
    @bind(GLvoid, [GLenum, GLint])
    def glVertexBlendEnviATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLfloat])
    def glVertexBlendEnvfATI(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ATI_element_array ("OpenGL/glext.h":6024)
    """GL_ATI_element_array"""
    GL_ATI_element_array = 1
    
    @bind(GLvoid, [GLenum, POINTER(GLvoid)])
    def glElementPointerATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLsizei])
    def glDrawElementArrayATI(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLuint, GLsizei])
    def glDrawRangeElementArrayATI(arg_0, arg_1, arg_2, arg_3): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_SUN_mesh_array ("OpenGL/glext.h":6036)
    """GL_SUN_mesh_array"""
    GL_SUN_mesh_array = 1
    
    @bind(GLvoid, [GLenum, GLint, GLsizei, GLsizei])
    def glDrawMeshArraysSUN(arg_0, arg_1, arg_2, arg_3): pass
    
    

if 1: # ifndef GL_SUN_slice_accum ("OpenGL/glext.h":6044)
    """GL_SUN_slice_accum"""
    GL_SUN_slice_accum = 1

if 1: # ifndef GL_NV_multisample_filter_hint ("OpenGL/glext.h":6048)
    """GL_NV_multisample_filter_hint"""
    GL_NV_multisample_filter_hint = 1

if 1: # ifndef GL_NV_depth_clamp ("OpenGL/glext.h":6052)
    """GL_NV_depth_clamp"""
    GL_NV_depth_clamp = 1

if 1: # ifndef GL_NV_occlusion_query ("OpenGL/glext.h":6056)
    """GL_NV_occlusion_query"""
    GL_NV_occlusion_query = 1
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glGenOcclusionQueriesNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glDeleteOcclusionQueriesNV(arg_0, arg_1): pass
    
    @bind(GLboolean, [GLuint])
    def glIsOcclusionQueryNV(arg_0): pass
    
    @bind(GLvoid, [GLuint])
    def glBeginOcclusionQueryNV(arg_0): pass
    
    @bind(GLvoid, [])
    def glEndOcclusionQueryNV(): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLint)])
    def glGetOcclusionQueryivNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLuint)])
    def glGetOcclusionQueryuivNV(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_NV_point_sprite ("OpenGL/glext.h":6076)
    """GL_NV_point_sprite"""
    GL_NV_point_sprite = 1
    
    @bind(GLvoid, [GLenum, GLint])
    def glPointParameteriNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLint)])
    def glPointParameterivNV(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_NV_texture_shader3 ("OpenGL/glext.h":6086)
    """GL_NV_texture_shader3"""
    GL_NV_texture_shader3 = 1

if 1: # ifndef GL_NV_vertex_program1_1 ("OpenGL/glext.h":6090)
    """GL_NV_vertex_program1_1"""
    GL_NV_vertex_program1_1 = 1

if 1: # ifndef GL_EXT_shadow_funcs ("OpenGL/glext.h":6094)
    """GL_EXT_shadow_funcs"""
    GL_EXT_shadow_funcs = 1

if 1: # ifndef GL_EXT_stencil_two_side ("OpenGL/glext.h":6098)
    """GL_EXT_stencil_two_side"""
    GL_EXT_stencil_two_side = 1
    
    @bind(GLvoid, [GLenum])
    def glActiveStencilFaceEXT(arg_0): pass
    
    

if 1: # ifndef GL_ATI_text_fragment_shader ("OpenGL/glext.h":6106)
    """GL_ATI_text_fragment_shader"""
    GL_ATI_text_fragment_shader = 1

if 1: # ifndef GL_APPLE_client_storage ("OpenGL/glext.h":6110)
    """GL_APPLE_client_storage"""
    GL_APPLE_client_storage = 1

if 1: # ifndef GL_APPLE_element_array ("OpenGL/glext.h":6114)
    """GL_APPLE_element_array"""
    GL_APPLE_element_array = 1
    
    @bind(GLvoid, [GLenum, POINTER(GLvoid)])
    def glElementPointerAPPLE(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLint, GLsizei])
    def glDrawElementArrayAPPLE(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLuint, GLint, GLsizei])
    def glDrawRangeElementArrayAPPLE(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLint), POINTER(GLsizei), GLsizei])
    def glMultiDrawElementArrayAPPLE(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLuint, GLuint, POINTER(GLint), POINTER(GLsizei), GLsizei])
    def glMultiDrawRangeElementArrayAPPLE(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_APPLE_fence ("OpenGL/glext.h":6130)
    """GL_APPLE_fence"""
    GL_APPLE_fence = 1
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glGenFencesAPPLE(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glDeleteFencesAPPLE(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint])
    def glSetFenceAPPLE(arg_0): pass
    
    @bind(GLboolean, [GLuint])
    def glIsFenceAPPLE(arg_0): pass
    
    @bind(GLboolean, [GLuint])
    def glTestFenceAPPLE(arg_0): pass
    
    @bind(GLvoid, [GLuint])
    def glFinishFenceAPPLE(arg_0): pass
    
    @bind(GLboolean, [GLenum, GLuint])
    def glTestObjectAPPLE(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLint])
    def glFinishObjectAPPLE(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_APPLE_vertex_array_object ("OpenGL/glext.h":6152)
    """GL_APPLE_vertex_array_object"""
    GL_APPLE_vertex_array_object = 1
    
    @bind(GLvoid, [GLuint])
    def glBindVertexArrayAPPLE(arg_0): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glDeleteVertexArraysAPPLE(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glGenVertexArraysAPPLE(arg_0, arg_1): pass
    
    @bind(GLboolean, [GLuint])
    def glIsVertexArrayAPPLE(arg_0): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_APPLE_vertex_array_range ("OpenGL/glext.h":6166)
    """GL_APPLE_vertex_array_range"""
    GL_APPLE_vertex_array_range = 1
    
    @bind(GLvoid, [GLsizei, POINTER(GLvoid)])
    def glVertexArrayRangeAPPLE(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLvoid)])
    def glFlushVertexArrayRangeAPPLE(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLint])
    def glVertexArrayParameteriAPPLE(arg_0, arg_1): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_APPLE_ycbcr_422 ("OpenGL/glext.h":6178)
    """GL_APPLE_ycbcr_422"""
    GL_APPLE_ycbcr_422 = 1

if 1: # ifndef GL_S3_s3tc ("OpenGL/glext.h":6182)
    """GL_S3_s3tc"""
    GL_S3_s3tc = 1

if 1: # ifndef GL_ATI_draw_buffers ("OpenGL/glext.h":6186)
    """GL_ATI_draw_buffers"""
    GL_ATI_draw_buffers = 1
    
    @bind(GLvoid, [GLsizei, POINTER(GLenum)])
    def glDrawBuffersATI(arg_0, arg_1): pass
    
    

if 1: # ifndef GL_ATI_pixel_format_float ("OpenGL/glext.h":6194)
    """GL_ATI_pixel_format_float"""
    GL_ATI_pixel_format_float = 1
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ATI_texture_env_combine3 ("OpenGL/glext.h":6201)
    """GL_ATI_texture_env_combine3"""
    GL_ATI_texture_env_combine3 = 1

if 1: # ifndef GL_ATI_texture_float ("OpenGL/glext.h":6205)
    """GL_ATI_texture_float"""
    GL_ATI_texture_float = 1

if 1: # ifndef GL_NV_float_buffer ("OpenGL/glext.h":6209)
    """GL_NV_float_buffer"""
    GL_NV_float_buffer = 1

if 1: # ifndef GL_NV_fragment_program ("OpenGL/glext.h":6213)
    """GL_NV_fragment_program"""
    GL_NV_fragment_program = 1
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLubyte), GLfloat, GLfloat, GLfloat, GLfloat])
    def glProgramNamedParameter4fNV(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLubyte), GLdouble, GLdouble, GLdouble, GLdouble])
    def glProgramNamedParameter4dNV(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLubyte), POINTER(GLfloat)])
    def glProgramNamedParameter4fvNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLubyte), POINTER(GLdouble)])
    def glProgramNamedParameter4dvNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLubyte), POINTER(GLfloat)])
    def glGetProgramNamedParameterfvNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLubyte), POINTER(GLdouble)])
    def glGetProgramNamedParameterdvNV(arg_0, arg_1, arg_2, arg_3): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_NV_half_float ("OpenGL/glext.h":6232)
    """GL_NV_half_float"""
    GL_NV_half_float = 1
    
    @bind(GLvoid, [GLhalfNV, GLhalfNV])
    def glVertex2hNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [POINTER(GLhalfNV)])
    def glVertex2hvNV(arg_0): pass
    
    @bind(GLvoid, [GLhalfNV, GLhalfNV, GLhalfNV])
    def glVertex3hNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLhalfNV)])
    def glVertex3hvNV(arg_0): pass
    
    @bind(GLvoid, [GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV])
    def glVertex4hNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [POINTER(GLhalfNV)])
    def glVertex4hvNV(arg_0): pass
    
    @bind(GLvoid, [GLhalfNV, GLhalfNV, GLhalfNV])
    def glNormal3hNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLhalfNV)])
    def glNormal3hvNV(arg_0): pass
    
    @bind(GLvoid, [GLhalfNV, GLhalfNV, GLhalfNV])
    def glColor3hNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLhalfNV)])
    def glColor3hvNV(arg_0): pass
    
    @bind(GLvoid, [GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV])
    def glColor4hNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [POINTER(GLhalfNV)])
    def glColor4hvNV(arg_0): pass
    
    @bind(GLvoid, [GLhalfNV])
    def glTexCoord1hNV(arg_0): pass
    
    @bind(GLvoid, [POINTER(GLhalfNV)])
    def glTexCoord1hvNV(arg_0): pass
    
    @bind(GLvoid, [GLhalfNV, GLhalfNV])
    def glTexCoord2hNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [POINTER(GLhalfNV)])
    def glTexCoord2hvNV(arg_0): pass
    
    @bind(GLvoid, [GLhalfNV, GLhalfNV, GLhalfNV])
    def glTexCoord3hNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLhalfNV)])
    def glTexCoord3hvNV(arg_0): pass
    
    @bind(GLvoid, [GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV])
    def glTexCoord4hNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [POINTER(GLhalfNV)])
    def glTexCoord4hvNV(arg_0): pass
    
    @bind(GLvoid, [GLenum, GLhalfNV])
    def glMultiTexCoord1hNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLhalfNV)])
    def glMultiTexCoord1hvNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLhalfNV, GLhalfNV])
    def glMultiTexCoord2hNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLhalfNV)])
    def glMultiTexCoord2hvNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLhalfNV, GLhalfNV, GLhalfNV])
    def glMultiTexCoord3hNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLhalfNV)])
    def glMultiTexCoord3hvNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV])
    def glMultiTexCoord4hNV(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLenum, POINTER(GLhalfNV)])
    def glMultiTexCoord4hvNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLhalfNV])
    def glFogCoordhNV(arg_0): pass
    
    @bind(GLvoid, [POINTER(GLhalfNV)])
    def glFogCoordhvNV(arg_0): pass
    
    @bind(GLvoid, [GLhalfNV, GLhalfNV, GLhalfNV])
    def glSecondaryColor3hNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [POINTER(GLhalfNV)])
    def glSecondaryColor3hvNV(arg_0): pass
    
    @bind(GLvoid, [GLhalfNV])
    def glVertexWeighthNV(arg_0): pass
    
    @bind(GLvoid, [POINTER(GLhalfNV)])
    def glVertexWeighthvNV(arg_0): pass
    
    @bind(GLvoid, [GLuint, GLhalfNV])
    def glVertexAttrib1hNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLhalfNV)])
    def glVertexAttrib1hvNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLhalfNV, GLhalfNV])
    def glVertexAttrib2hNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLhalfNV)])
    def glVertexAttrib2hvNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLhalfNV, GLhalfNV, GLhalfNV])
    def glVertexAttrib3hNV(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLhalfNV)])
    def glVertexAttrib3hvNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV])
    def glVertexAttrib4hNV(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLuint, POINTER(GLhalfNV)])
    def glVertexAttrib4hvNV(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLhalfNV)])
    def glVertexAttribs1hvNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLhalfNV)])
    def glVertexAttribs2hvNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLhalfNV)])
    def glVertexAttribs3hvNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLsizei, POINTER(GLhalfNV)])
    def glVertexAttribs4hvNV(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_NV_pixel_data_range ("OpenGL/glext.h":6330)
    """GL_NV_pixel_data_range"""
    GL_NV_pixel_data_range = 1
    
    @bind(GLvoid, [GLenum, GLsizei, POINTER(GLvoid)])
    def glPixelDataRangeNV(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLenum])
    def glFlushPixelDataRangeNV(arg_0): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_NV_primitive_restart ("OpenGL/glext.h":6340)
    """GL_NV_primitive_restart"""
    GL_NV_primitive_restart = 1
    
    @bind(GLvoid, [])
    def glPrimitiveRestartNV(): pass
    
    @bind(GLvoid, [GLuint])
    def glPrimitiveRestartIndexNV(arg_0): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_NV_texture_expand_normal ("OpenGL/glext.h":6350)
    """GL_NV_texture_expand_normal"""
    GL_NV_texture_expand_normal = 1

if 1: # ifndef GL_NV_vertex_program2 ("OpenGL/glext.h":6354)
    """GL_NV_vertex_program2"""
    GL_NV_vertex_program2 = 1

if 1: # ifndef GL_ATI_map_object_buffer ("OpenGL/glext.h":6358)
    """GL_ATI_map_object_buffer"""
    GL_ATI_map_object_buffer = 1
    
    @bind(POINTER(GLvoid), [GLuint])
    def glMapObjectBufferATI(arg_0): pass
    
    @bind(GLvoid, [GLuint])
    def glUnmapObjectBufferATI(arg_0): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ATI_separate_stencil ("OpenGL/glext.h":6368)
    """GL_ATI_separate_stencil"""
    GL_ATI_separate_stencil = 1
    
    @bind(GLvoid, [GLenum, GLenum, GLenum, GLenum])
    def glStencilOpSeparateATI(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLint, GLuint])
    def glStencilFuncSeparateATI(arg_0, arg_1, arg_2, arg_3): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_ATI_vertex_attrib_array_object ("OpenGL/glext.h":6378)
    """GL_ATI_vertex_attrib_array_object"""
    GL_ATI_vertex_attrib_array_object = 1
    
    @bind(GLvoid, [GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint])
    def glVertexAttribArrayObjectATI(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5, arg_6): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLfloat)])
    def glGetVertexAttribArrayObjectfvATI(arg_0, arg_1, arg_2): pass
    
    @bind(GLvoid, [GLuint, GLenum, POINTER(GLint)])
    def glGetVertexAttribArrayObjectivATI(arg_0, arg_1, arg_2): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_OES_read_format ("OpenGL/glext.h":6390)
    """GL_OES_read_format"""
    GL_OES_read_format = 1

if 1: # ifndef GL_EXT_depth_bounds_test ("OpenGL/glext.h":6394)
    """GL_EXT_depth_bounds_test"""
    GL_EXT_depth_bounds_test = 1
    
    @bind(GLvoid, [GLclampd, GLclampd])
    def glDepthBoundsEXT(arg_0, arg_1): pass
    
    

if 1: # ifndef GL_EXT_texture_mirror_clamp ("OpenGL/glext.h":6402)
    """GL_EXT_texture_mirror_clamp"""
    GL_EXT_texture_mirror_clamp = 1

if 1: # ifndef GL_EXT_blend_equation_separate ("OpenGL/glext.h":6406)
    """GL_EXT_blend_equation_separate"""
    GL_EXT_blend_equation_separate = 1
    
    @bind(GLvoid, [GLenum, GLenum])
    def glBlendEquationSeparateEXT(arg_0, arg_1): pass
    
    

if 1: # ifndef GL_MESA_pack_invert ("OpenGL/glext.h":6414)
    """GL_MESA_pack_invert"""
    GL_MESA_pack_invert = 1

if 1: # ifndef GL_MESA_ycbcr_texture ("OpenGL/glext.h":6418)
    """GL_MESA_ycbcr_texture"""
    GL_MESA_ycbcr_texture = 1

if 1: # ifndef GL_EXT_pixel_buffer_object ("OpenGL/glext.h":6422)
    """GL_EXT_pixel_buffer_object"""
    GL_EXT_pixel_buffer_object = 1

if 1: # ifndef GL_NV_fragment_program_option ("OpenGL/glext.h":6426)
    """GL_NV_fragment_program_option"""
    GL_NV_fragment_program_option = 1

if 1: # ifndef GL_NV_fragment_program2 ("OpenGL/glext.h":6430)
    """GL_NV_fragment_program2"""
    GL_NV_fragment_program2 = 1

if 1: # ifndef GL_NV_vertex_program2_option ("OpenGL/glext.h":6434)
    """GL_NV_vertex_program2_option"""
    GL_NV_vertex_program2_option = 1

if 1: # ifndef GL_NV_vertex_program3 ("OpenGL/glext.h":6438)
    """GL_NV_vertex_program3"""
    GL_NV_vertex_program3 = 1

if 1: # ifndef GL_EXT_framebuffer_object ("OpenGL/glext.h":6442)
    """GL_EXT_framebuffer_object"""
    GL_EXT_framebuffer_object = 1
    
    @bind(GLboolean, [GLuint])
    def glIsRenderbufferEXT(arg_0): pass
    
    @bind(GLvoid, [GLenum, GLuint])
    def glBindRenderbufferEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glDeleteRenderbuffersEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glGenRenderbuffersEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLsizei, GLsizei])
    def glRenderbufferStorageEXT(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLenum, POINTER(GLint)])
    def glGetRenderbufferParameterivEXT(arg_0, arg_1, arg_2): pass
    
    @bind(GLboolean, [GLuint])
    def glIsFramebufferEXT(arg_0): pass
    
    @bind(GLvoid, [GLenum, GLuint])
    def glBindFramebufferEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glDeleteFramebuffersEXT(arg_0, arg_1): pass
    
    @bind(GLvoid, [GLsizei, POINTER(GLuint)])
    def glGenFramebuffersEXT(arg_0, arg_1): pass
    
    @bind(GLenum, [GLenum])
    def glCheckFramebufferStatusEXT(arg_0): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLenum, GLuint, GLint])
    def glFramebufferTexture1DEXT(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLenum, GLuint, GLint])
    def glFramebufferTexture2DEXT(arg_0, arg_1, arg_2, arg_3, arg_4): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLenum, GLuint, GLint, GLint])
    def glFramebufferTexture3DEXT(arg_0, arg_1, arg_2, arg_3, arg_4, arg_5): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLenum, GLuint])
    def glFramebufferRenderbufferEXT(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum, GLenum, GLenum, POINTER(GLint)])
    def glGetFramebufferAttachmentParameterivEXT(arg_0, arg_1, arg_2, arg_3): pass
    
    @bind(GLvoid, [GLenum])
    def glGenerateMipmapEXT(arg_0): pass
    
    
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    

if 1: # ifndef GL_GREMEDY_string_marker ("OpenGL/glext.h":6482)
    """GL_GREMEDY_string_marker"""
    GL_GREMEDY_string_marker = 1
    
    @bind(GLvoid, [GLsizei, POINTER(GLvoid)])
    def glStringMarkerGREMEDY(arg_0, arg_1): pass
    
    

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~ End of code generated from:
#~   "OpenGL/glext.h"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

